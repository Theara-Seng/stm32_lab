
encoder_mode3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000150  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f314  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e95  00000000  00000000  0002f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00031250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f26  00000000  00000000  00032d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e95f  00000000  00000000  00054c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf179  00000000  00000000  0006359d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000421c  00000000  00000000  00132768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048b4 	.word	0x080048b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080048b4 	.word	0x080048b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
uint32_t rot_old_state;
uint32_t rot_cnt;
int rot_new_state1;
int rot_old_state1;
int rot_cnt1;
uint32_t _write(int file, char* p, int len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <_write+0x24>)
 800058a:	f002 fe5e 	bl	800324a <HAL_UART_Transmit>
	return len;
 800058e:	687b      	ldr	r3, [r7, #4]

}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000144 	.word	0x20000144

0800059c <HAL_CAN_RxFifo0MsgPendingCallback>:

long int TxData[4];
uint8_t RxData[1] ;
uint8_t countq = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan2){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	countq++;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	200001a4 	.word	0x200001a4

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fdcd 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f86d 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9dd 	bl	800098c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005d2:	f000 f909 	bl	80007e8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005d6:	f000 f95b 	bl	8000890 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f9ad 	bl	8000938 <MX_USART2_UART_Init>
  MX_CAN2_Init();
 80005de:	f000 f8cd 	bl	800077c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_CAN_Start(&hcan2);
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <main+0xcc>)
 80005e4:	f000 ff2b 	bl	800143e <HAL_CAN_Start>
    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80005e8:	213c      	movs	r1, #60	; 0x3c
 80005ea:	4829      	ldr	r0, [pc, #164]	; (8000690 <main+0xd0>)
 80005ec:	f002 faa2 	bl	8002b34 <HAL_TIM_Encoder_Start_IT>
    HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80005f0:	213c      	movs	r1, #60	; 0x3c
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <main+0xd4>)
 80005f4:	f002 fa9e 	bl	8002b34 <HAL_TIM_Encoder_Start_IT>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005f8:	2102      	movs	r1, #2
 80005fa:	4824      	ldr	r0, [pc, #144]	; (800068c <main+0xcc>)
 80005fc:	f001 f83e 	bl	800167c <HAL_CAN_ActivateNotification>
    canTxHeader.StdId = 0x102;
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0xd8>)
 8000602:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000606:	601a      	str	r2, [r3, #0]
    canTxHeader.RTR = CAN_RTR_DATA;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <main+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
    canTxHeader.IDE = CAN_ID_STD;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0xd8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    canTxHeader.DLC = 4;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <main+0xd8>)
 8000616:	2204      	movs	r2, #4
 8000618:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
		  uint32_t last_print = 0, now = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
		  unsigned char a[4];
		    long int count1 = (int)TIM2->CNT/4;
 8000622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000628:	2b00      	cmp	r3, #0
 800062a:	da00      	bge.n	800062e <main+0x6e>
 800062c:	3303      	adds	r3, #3
 800062e:	109b      	asrs	r3, r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
		    long int count = (int)TIM5->CNT/4;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <main+0xdc>)
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	2b00      	cmp	r3, #0
 8000638:	da00      	bge.n	800063c <main+0x7c>
 800063a:	3303      	adds	r3, #3
 800063c:	109b      	asrs	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
		    a[0] =  (unsigned)count1 >> 8;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	b2db      	uxtb	r3, r3
 8000646:	713b      	strb	r3, [r7, #4]
		    a[1] =  (unsigned) count1;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	717b      	strb	r3, [r7, #5]
		    a[2] = (unsigned) count >>  8;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	b2db      	uxtb	r3, r3
 8000654:	71bb      	strb	r3, [r7, #6]
		    a[3] = (unsigned) count;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	71fb      	strb	r3, [r7, #7]
		 	now = HAL_GetTick();
 800065c:	f000 fde8 	bl	8001230 <HAL_GetTick>
 8000660:	6138      	str	r0, [r7, #16]
		 	if (now - last_print >= 1000) {
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800066c:	d3d5      	bcc.n	800061a <main+0x5a>
		 		printf("Encoder counter = %ld AND %ld\n", count, count1);
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0xe0>)
 8000674:	f003 f990 	bl	8003998 <iprintf>
		 		HAL_CAN_AddTxMessage(&hcan2, &canTxHeader, a, &txMailBox);
 8000678:	1d3a      	adds	r2, r7, #4
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <main+0xe4>)
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <main+0xd8>)
 800067e:	4803      	ldr	r0, [pc, #12]	; (800068c <main+0xcc>)
 8000680:	f000 ff21 	bl	80014c6 <HAL_CAN_AddTxMessage>
		 		last_print = now;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	617b      	str	r3, [r7, #20]
  {
 8000688:	e7c7      	b.n	800061a <main+0x5a>
 800068a:	bf00      	nop
 800068c:	2000008c 	.word	0x2000008c
 8000690:	200000b4 	.word	0x200000b4
 8000694:	200000fc 	.word	0x200000fc
 8000698:	20000188 	.word	0x20000188
 800069c:	40000c00 	.word	0x40000c00
 80006a0:	080048cc 	.word	0x080048cc
 80006a4:	200001a0 	.word	0x200001a0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f966 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800071c:	23a8      	movs	r3, #168	; 0xa8
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000724:	2307      	movs	r3, #7
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fcc3 	bl	80020b8 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 fa78 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2105      	movs	r1, #5
 800075a:	4618      	mov	r0, r3
 800075c:	f001 ff24 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 fa61 	bl	8000c2c <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_CAN2_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_CAN2_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 21;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_CAN2_Init+0x64>)
 8000788:	2215      	movs	r2, #21
 800078a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_CAN2_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_CAN2_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_CAN2_Init+0x64>)
 800079a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007a2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007a6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_CAN2_Init+0x64>)
 80007ce:	f000 fd3b 	bl	8001248 <HAL_CAN_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 fa28 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40006800 	.word	0x40006800

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2224      	movs	r2, #36	; 0x24
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f8c6 	bl	8003988 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_TIM2_Init+0xa4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_TIM2_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM2_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_TIM2_Init+0xa4>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM2_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_TIM2_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800082c:	2303      	movs	r3, #3
 800082e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_TIM2_Init+0xa4>)
 8000858:	f002 f8c6 	bl	80029e8 <HAL_TIM_Encoder_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000862:	f000 f9e3 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_TIM2_Init+0xa4>)
 8000874:	f002 fc0c 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800087e:	f000 f9d5 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000b4 	.word	0x200000b4

08000890 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 f872 	bl	8003988 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM5_Init+0xa4>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ea:	2301      	movs	r3, #1
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_TIM5_Init+0xa0>)
 80008fe:	f002 f873 	bl	80029e8 <HAL_TIM_Encoder_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f990 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM5_Init+0xa0>)
 800091a:	f002 fbb9 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000924:	f000 f982 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000fc 	.word	0x200000fc
 8000934:	40000c00 	.word	0x40000c00

08000938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000970:	f002 fc1e 	bl	80031b0 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097a:	f000 f957 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000144 	.word	0x20000144
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	4b9b      	ldr	r3, [pc, #620]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a9a      	ldr	r2, [pc, #616]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b98      	ldr	r3, [pc, #608]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	4b94      	ldr	r3, [pc, #592]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a93      	ldr	r2, [pc, #588]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b91      	ldr	r3, [pc, #580]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b8d      	ldr	r3, [pc, #564]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a8c      	ldr	r2, [pc, #560]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b8a      	ldr	r3, [pc, #552]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b86      	ldr	r3, [pc, #536]	; (8000c14 <MX_GPIO_Init+0x288>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a85      	ldr	r2, [pc, #532]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b83      	ldr	r3, [pc, #524]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b7f      	ldr	r3, [pc, #508]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a7e      	ldr	r2, [pc, #504]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b7c      	ldr	r3, [pc, #496]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b78      	ldr	r3, [pc, #480]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a77      	ldr	r2, [pc, #476]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a38:	f043 0308 	orr.w	r3, r3, #8
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b75      	ldr	r3, [pc, #468]	; (8000c14 <MX_GPIO_Init+0x288>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0308 	and.w	r3, r3, #8
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4872      	ldr	r0, [pc, #456]	; (8000c18 <MX_GPIO_Init+0x28c>)
 8000a50:	f001 fb18 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2101      	movs	r1, #1
 8000a58:	4870      	ldr	r0, [pc, #448]	; (8000c1c <MX_GPIO_Init+0x290>)
 8000a5a:	f001 fb13 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a64:	486e      	ldr	r0, [pc, #440]	; (8000c20 <MX_GPIO_Init+0x294>)
 8000a66:	f001 fb0d 	bl	8002084 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4865      	ldr	r0, [pc, #404]	; (8000c18 <MX_GPIO_Init+0x28c>)
 8000a82:	f001 f963 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	485f      	ldr	r0, [pc, #380]	; (8000c1c <MX_GPIO_Init+0x290>)
 8000a9e:	f001 f955 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4857      	ldr	r0, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x290>)
 8000abe:	f001 f945 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	4851      	ldr	r0, [pc, #324]	; (8000c24 <MX_GPIO_Init+0x298>)
 8000ade:	f001 f935 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ae2:	23e0      	movs	r3, #224	; 0xe0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af2:	2305      	movs	r3, #5
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4849      	ldr	r0, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x298>)
 8000afe:	f001 f925 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4844      	ldr	r0, [pc, #272]	; (8000c28 <MX_GPIO_Init+0x29c>)
 8000b16:	f001 f919 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	483c      	ldr	r0, [pc, #240]	; (8000c28 <MX_GPIO_Init+0x29c>)
 8000b38:	f001 f908 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b3c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b40:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4832      	ldr	r0, [pc, #200]	; (8000c20 <MX_GPIO_Init+0x294>)
 8000b56:	f001 f8f9 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b5a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	4829      	ldr	r0, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x290>)
 8000b78:	f001 f8e8 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4824      	ldr	r0, [pc, #144]	; (8000c24 <MX_GPIO_Init+0x298>)
 8000b92:	f001 f8db 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000b96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ba8:	230a      	movs	r3, #10
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481c      	ldr	r0, [pc, #112]	; (8000c24 <MX_GPIO_Init+0x298>)
 8000bb4:	f001 f8ca 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bb8:	2320      	movs	r3, #32
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <MX_GPIO_Init+0x294>)
 8000bcc:	f001 f8be 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_GPIO_Init+0x29c>)
 8000bee:	f001 f8ad 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_GPIO_Init+0x28c>)
 8000c08:	f001 f8a0 	bl	8001d4c <HAL_GPIO_Init>

}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40020800 	.word	0x40020800
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f001 f826 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <HAL_CAN_MspInit+0xc0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d14a      	bne.n	8000d40 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_CAN_MspInit+0xc4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cfe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d10:	2309      	movs	r3, #9
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <HAL_CAN_MspInit+0xc8>)
 8000d1c:	f001 f816 	bl	8001d4c <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2040      	movs	r0, #64	; 0x40
 8000d26:	f000 ffda 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d2a:	2040      	movs	r0, #64	; 0x40
 8000d2c:	f000 fff3 	bl	8001d16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2041      	movs	r0, #65	; 0x41
 8000d36:	f000 ffd2 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000d3a:	2041      	movs	r0, #65	; 0x41
 8000d3c:	f000 ffeb 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40006800 	.word	0x40006800
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d74:	d153      	bne.n	8000e1e <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a46      	ldr	r2, [pc, #280]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	482d      	ldr	r0, [pc, #180]	; (8000e9c <HAL_TIM_Encoder_MspInit+0x148>)
 8000de8:	f000 ffb0 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dec:	2308      	movs	r3, #8
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4826      	ldr	r0, [pc, #152]	; (8000ea0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8000e08:	f000 ffa0 	bl	8001d4c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	201c      	movs	r0, #28
 8000e12:	f000 ff64 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 ff7d 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000e1c:	e038      	b.n	8000e90 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM5)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_TIM_Encoder_MspInit+0x150>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d133      	bne.n	8000e90 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_TIM_Encoder_MspInit+0x144>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4808      	ldr	r0, [pc, #32]	; (8000e9c <HAL_TIM_Encoder_MspInit+0x148>)
 8000e7c:	f000 ff66 	bl	8001d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2032      	movs	r0, #50	; 0x32
 8000e86:	f000 ff2a 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e8a:	2032      	movs	r0, #50	; 0x32
 8000e8c:	f000 ff43 	bl	8001d16 <HAL_NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40000c00 	.word	0x40000c00

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12b      	bne.n	8000f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_UART_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f02:	230c      	movs	r3, #12
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_UART_MspInit+0x8c>)
 8000f1e:	f000 ff15 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40004400 	.word	0x40004400
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f940 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM2_IRQHandler+0x10>)
 8000f92:	f001 fe7d 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000b4 	.word	0x200000b4

08000fa0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM5_IRQHandler+0x10>)
 8000fa6:	f001 fe73 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000fc 	.word	0x200000fc

08000fb4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <CAN2_RX0_IRQHandler+0x10>)
 8000fba:	f000 fb85 	bl	80016c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <CAN2_RX1_IRQHandler+0x10>)
 8000fce:	f000 fb7b 	bl	80016c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00a      	b.n	8001004 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fee:	f3af 8000 	nop.w
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf0      	blt.n	8000fee <_read+0x12>
  }

  return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103e:	605a      	str	r2, [r3, #4]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_isatty>:

int _isatty(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f002 fc40 	bl	8003934 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200001a8 	.word	0x200001a8
 80010e8:	200001c0 	.word	0x200001c0

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f002 fbff 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fa3d 	bl	80005c0 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001154:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8001158:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800115c:	200001c0 	.word	0x200001c0

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 fd9b 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f808 	bl	80011a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd4e 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x54>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x58>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fdb3 	bl	8001d32 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00e      	b.n	80011f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e4:	f000 fd7b 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <HAL_InitTick+0x5c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000008 	.word	0x20000008
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	200001ac 	.word	0x200001ac

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200001ac 	.word	0x200001ac

08001248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0ed      	b.n	8001436 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd0e 	bl	8000c88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0201 	orr.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800127c:	f7ff ffd8 	bl	8001230 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001282:	e012      	b.n	80012aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001284:	f7ff ffd4 	bl	8001230 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b0a      	cmp	r3, #10
 8001290:	d90b      	bls.n	80012aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2205      	movs	r2, #5
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0c5      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0e5      	beq.n	8001284 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0202 	bic.w	r2, r2, #2
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff ffb2 	bl	8001230 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ce:	e012      	b.n	80012f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d0:	f7ff ffae 	bl	8001230 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b0a      	cmp	r3, #10
 80012dc:	d90b      	bls.n	80012f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2205      	movs	r2, #5
 80012ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e09f      	b.n	8001436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e5      	bne.n	80012d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7e1b      	ldrb	r3, [r3, #24]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d108      	bne.n	800131e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e007      	b.n	800132e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e007      	b.n	8001358 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001356:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e9b      	ldrb	r3, [r3, #26]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d108      	bne.n	8001372 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e007      	b.n	8001382 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0220 	bic.w	r2, r2, #32
 8001380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7edb      	ldrb	r3, [r3, #27]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 0210 	bic.w	r2, r2, #16
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e007      	b.n	80013ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0210 	orr.w	r2, r2, #16
 80013aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7f1b      	ldrb	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d108      	bne.n	80013c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0208 	orr.w	r2, r2, #8
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0208 	bic.w	r2, r2, #8
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7f5b      	ldrb	r3, [r3, #29]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e007      	b.n	8001400 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	ea42 0103 	orr.w	r1, r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d12e      	bne.n	80014b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2202      	movs	r2, #2
 8001456:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800146a:	f7ff fee1 	bl	8001230 <HAL_GetTick>
 800146e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001470:	e012      	b.n	8001498 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001472:	f7ff fedd 	bl	8001230 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b0a      	cmp	r3, #10
 800147e:	d90b      	bls.n	8001498 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2205      	movs	r2, #5
 8001490:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e012      	b.n	80014be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e5      	bne.n	8001472 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e006      	b.n	80014be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
  }
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b089      	sub	sp, #36	; 0x24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <HAL_CAN_AddTxMessage+0x2c>
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 80b8 	bne.w	8001662 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10a      	bne.n	8001512 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a0 	beq.w	8001652 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	0e1b      	lsrs	r3, r3, #24
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d907      	bls.n	8001532 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e09e      	b.n	8001670 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10d      	bne.n	8001560 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	6809      	ldr	r1, [r1, #0]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3318      	adds	r3, #24
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	440b      	add	r3, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e00f      	b.n	8001580 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800156a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001574:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3318      	adds	r3, #24
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6819      	ldr	r1, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3318      	adds	r3, #24
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	3304      	adds	r3, #4
 8001592:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	7d1b      	ldrb	r3, [r3, #20]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d111      	bne.n	80015c0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3318      	adds	r3, #24
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	6811      	ldr	r1, [r2, #0]
 80015b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3318      	adds	r3, #24
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3307      	adds	r3, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	061a      	lsls	r2, r3, #24
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3306      	adds	r3, #6
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	041b      	lsls	r3, r3, #16
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3305      	adds	r3, #5
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	4313      	orrs	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	3204      	adds	r2, #4
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	4610      	mov	r0, r2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	ea43 0200 	orr.w	r2, r3, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3303      	adds	r3, #3
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	061a      	lsls	r2, r3, #24
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3302      	adds	r3, #2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4313      	orrs	r3, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	4610      	mov	r0, r2
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	6811      	ldr	r1, [r2, #0]
 800161e:	ea43 0200 	orr.w	r2, r3, r0
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	440b      	add	r3, r1
 8001628:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800162c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3318      	adds	r3, #24
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	4413      	add	r3, r2
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	6811      	ldr	r1, [r2, #0]
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3318      	adds	r3, #24
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	440b      	add	r3, r1
 800164c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e00e      	b.n	8001670 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e006      	b.n	8001670 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d002      	beq.n	800169a <HAL_CAN_ActivateNotification+0x1e>
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d109      	bne.n	80016ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6959      	ldr	r1, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e006      	b.n	80016bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d07c      	beq.n	8001808 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d023      	beq.n	8001760 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f983 	bl	8001a36 <HAL_CAN_TxMailbox0CompleteCallback>
 8001730:	e016      	b.n	8001760 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d004      	beq.n	8001746 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	e00c      	b.n	8001760 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
 8001758:	e002      	b.n	8001760 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f989 	bl	8001a72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001772:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f963 	bl	8001a4a <HAL_CAN_TxMailbox1CompleteCallback>
 8001784:	e016      	b.n	80017b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	e00c      	b.n	80017b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
 80017ac:	e002      	b.n	80017b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f969 	bl	8001a86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f943 	bl	8001a5e <HAL_CAN_TxMailbox2CompleteCallback>
 80017d8:	e016      	b.n	8001808 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
 80017ec:	e00c      	b.n	8001808 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001800:	e002      	b.n	8001808 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f949 	bl	8001a9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2210      	movs	r2, #16
 800182a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2208      	movs	r2, #8
 8001846:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f930 	bl	8001aae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe fe98 	bl	800059c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f912 	bl	8001ad6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8f9 	bl	8001ac2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8fc 	bl	8001aea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2208      	movs	r2, #8
 800190c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8f5 	bl	8001afe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d07b      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d072      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	2b00      	cmp	r3, #0
 8001984:	d043      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03e      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001996:	2b60      	cmp	r3, #96	; 0x60
 8001998:	d02b      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x32a>
 800199a:	2b60      	cmp	r3, #96	; 0x60
 800199c:	d82e      	bhi.n	80019fc <HAL_CAN_IRQHandler+0x334>
 800199e:	2b50      	cmp	r3, #80	; 0x50
 80019a0:	d022      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x320>
 80019a2:	2b50      	cmp	r3, #80	; 0x50
 80019a4:	d82a      	bhi.n	80019fc <HAL_CAN_IRQHandler+0x334>
 80019a6:	2b40      	cmp	r3, #64	; 0x40
 80019a8:	d019      	beq.n	80019de <HAL_CAN_IRQHandler+0x316>
 80019aa:	2b40      	cmp	r3, #64	; 0x40
 80019ac:	d826      	bhi.n	80019fc <HAL_CAN_IRQHandler+0x334>
 80019ae:	2b30      	cmp	r3, #48	; 0x30
 80019b0:	d010      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x30c>
 80019b2:	2b30      	cmp	r3, #48	; 0x30
 80019b4:	d822      	bhi.n	80019fc <HAL_CAN_IRQHandler+0x334>
 80019b6:	2b10      	cmp	r3, #16
 80019b8:	d002      	beq.n	80019c0 <HAL_CAN_IRQHandler+0x2f8>
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d005      	beq.n	80019ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019be:	e01d      	b.n	80019fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c8:	e019      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	f043 0310 	orr.w	r3, r3, #16
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019d2:	e014      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f043 0320 	orr.w	r3, r3, #32
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019dc:	e00f      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e6:	e00a      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f0:	e005      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019fa:	e000      	b.n	80019fe <HAL_CAN_IRQHandler+0x336>
            break;
 80019fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699a      	ldr	r2, [r3, #24]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2204      	movs	r2, #4
 8001a14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f872 	bl	8001b12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e16b      	b.n	8002040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 815a 	bne.w	800203a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80b4 	beq.w	800203a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b60      	ldr	r3, [pc, #384]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_GPIO_Init+0x310>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x314>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x226>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x318>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x222>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x31c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x21e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	; (800206c <HAL_GPIO_Init+0x320>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_GPIO_Init+0x324>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x216>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_GPIO_Init+0x328>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x212>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <HAL_GPIO_Init+0x32c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4b      	ldr	r2, [pc, #300]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20a>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x228>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	; (800205c <HAL_GPIO_Init+0x310>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_GPIO_Init+0x334>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_GPIO_Init+0x334>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae90 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e267      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e242      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6f      	ldr	r2, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a68      	ldr	r2, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f85e 	bl	8001230 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f85a 	bl	8001230 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e207      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f84a 	bl	8001230 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f846 	bl	8001230 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1f3      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b44      	ldr	r3, [pc, #272]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1c7      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe ffff 	bl	8001230 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002236:	f7fe fffb 	bl	8001230 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1a8      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4925      	ldr	r1, [pc, #148]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCC_OscConfig+0x244>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe ffde 	bl	8001230 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe ffda 	bl	8001230 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e187      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d036      	beq.n	8002310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d016      	beq.n	80022d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe ffbe 	bl	8001230 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7fe ffba 	bl	8001230 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e167      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x240>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
 80022d6:	e01b      	b.n	8002310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x248>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe ffa7 	bl	8001230 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	e00e      	b.n	8002304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe ffa3 	bl	8001230 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d907      	bls.n	8002304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e150      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
 8002300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ea      	bne.n	80022e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8097 	beq.w	800244c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b7a      	ldr	r3, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d118      	bne.n	800238c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a73      	ldr	r2, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe ff63 	bl	8001230 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7fe ff5f 	bl	8001230 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e10c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x474>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a63      	ldr	r2, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x30c>
 80023aa:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x324>
 80023c4:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	4b55      	ldr	r3, [pc, #340]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a54      	ldr	r2, [pc, #336]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe ff24 	bl	8001230 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff20 	bl	8001230 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0cb      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCC_OscConfig+0x334>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe ff0e 	bl	8001230 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe ff0a 	bl	8001230 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0b5      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a38      	ldr	r2, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a1 	beq.w	8002598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d05c      	beq.n	800251c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d141      	bne.n	80024ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe fede 	bl	8001230 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe feda 	bl	8001230 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e087      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	019b      	lsls	r3, r3, #6
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7fe feb3 	bl	8001230 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ce:	f7fe feaf 	bl	8001230 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e05c      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x416>
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fe9c 	bl	8001230 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fe98 	bl	8001230 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e045      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x444>
 800251a:	e03d      	b.n	8002598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e038      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
 8002530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x4ec>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d028      	beq.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d121      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d11a      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800256a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	085b      	lsrs	r3, r3, #1
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d107      	bne.n	8002594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7fe fdca 	bl	8001230 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fdc6 	bl	8001230 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f821 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fd2a 	bl	80011a8 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	08004900 	.word	0x08004900
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b094      	sub	sp, #80	; 0x50
 800277a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
 8002780:	2300      	movs	r3, #0
 8002782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002784:	2300      	movs	r3, #0
 8002786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278c:	4b79      	ldr	r3, [pc, #484]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d00d      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002798:	2b08      	cmp	r3, #8
 800279a:	f200 80e1 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x34>
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x3a>
 80027a6:	e0db      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_GetSysClockFreq+0x204>)
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027ac:	e0db      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_GetSysClockFreq+0x208>)
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b2:	e0d8      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b4:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ca:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	099b      	lsrs	r3, r3, #6
 80027d0:	2200      	movs	r2, #0
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
 80027e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027e6:	4622      	mov	r2, r4
 80027e8:	462b      	mov	r3, r5
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	0159      	lsls	r1, r3, #5
 80027f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f8:	0150      	lsls	r0, r2, #5
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4621      	mov	r1, r4
 8002800:	1a51      	subs	r1, r2, r1
 8002802:	6139      	str	r1, [r7, #16]
 8002804:	4629      	mov	r1, r5
 8002806:	eb63 0301 	sbc.w	r3, r3, r1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002818:	4659      	mov	r1, fp
 800281a:	018b      	lsls	r3, r1, #6
 800281c:	4651      	mov	r1, sl
 800281e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002822:	4651      	mov	r1, sl
 8002824:	018a      	lsls	r2, r1, #6
 8002826:	4651      	mov	r1, sl
 8002828:	ebb2 0801 	subs.w	r8, r2, r1
 800282c:	4659      	mov	r1, fp
 800282e:	eb63 0901 	sbc.w	r9, r3, r1
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800283e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002846:	4690      	mov	r8, r2
 8002848:	4699      	mov	r9, r3
 800284a:	4623      	mov	r3, r4
 800284c:	eb18 0303 	adds.w	r3, r8, r3
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	462b      	mov	r3, r5
 8002854:	eb49 0303 	adc.w	r3, r9, r3
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002866:	4629      	mov	r1, r5
 8002868:	024b      	lsls	r3, r1, #9
 800286a:	4621      	mov	r1, r4
 800286c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002870:	4621      	mov	r1, r4
 8002872:	024a      	lsls	r2, r1, #9
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287a:	2200      	movs	r2, #0
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
 800287e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002884:	f7fd fcf4 	bl	8000270 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002890:	e058      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b38      	ldr	r3, [pc, #224]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	2200      	movs	r2, #0
 800289a:	4618      	mov	r0, r3
 800289c:	4611      	mov	r1, r2
 800289e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
 80028a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	0159      	lsls	r1, r3, #5
 80028ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028be:	0150      	lsls	r0, r2, #5
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4641      	mov	r1, r8
 80028c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ca:	4649      	mov	r1, r9
 80028cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028e4:	ebb2 040a 	subs.w	r4, r2, sl
 80028e8:	eb63 050b 	sbc.w	r5, r3, fp
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	00eb      	lsls	r3, r5, #3
 80028f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fa:	00e2      	lsls	r2, r4, #3
 80028fc:	4614      	mov	r4, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	4643      	mov	r3, r8
 8002902:	18e3      	adds	r3, r4, r3
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	464b      	mov	r3, r9
 8002908:	eb45 0303 	adc.w	r3, r5, r3
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291a:	4629      	mov	r1, r5
 800291c:	028b      	lsls	r3, r1, #10
 800291e:	4621      	mov	r1, r4
 8002920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002924:	4621      	mov	r1, r4
 8002926:	028a      	lsls	r2, r1, #10
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	61fa      	str	r2, [r7, #28]
 8002934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002938:	f7fd fc9a 	bl	8000270 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0x200>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x204>)
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002968:	4618      	mov	r0, r3
 800296a:	3750      	adds	r7, #80	; 0x50
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08004910 	.word	0x08004910

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08004910 	.word	0x08004910

080029e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e097      	b.n	8002b2c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe f99f 	bl	8000d54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2c:	f023 0307 	bic.w	r3, r3, #7
 8002a30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f000 fa61 	bl	8002f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	f023 0303 	bic.w	r3, r3, #3
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a88:	f023 030c 	bic.w	r3, r3, #12
 8002a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	011a      	lsls	r2, r3, #4
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	031b      	lsls	r3, r3, #12
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ace:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4313      	orrs	r3, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d102      	bne.n	8002b70 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b6a:	7b7b      	ldrb	r3, [r7, #13]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e089      	b.n	8002c88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b84:	e031      	b.n	8002bea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d110      	bne.n	8002bae <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b92:	7b3b      	ldrb	r3, [r7, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e075      	b.n	8002c88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	e01d      	b.n	8002bea <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d108      	bne.n	8002bc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bb4:	7bbb      	ldrb	r3, [r7, #14]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bc0:	7b3b      	ldrb	r3, [r7, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e05e      	b.n	8002c88 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d010      	beq.n	8002c18 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002bf6:	e01f      	b.n	8002c38 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa1f 	bl	8003044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0202 	orr.w	r2, r2, #2
 8002c14:	60da      	str	r2, [r3, #12]
      break;
 8002c16:	e02e      	b.n	8002c76 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	2104      	movs	r1, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fa0f 	bl	8003044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0204 	orr.w	r2, r2, #4
 8002c34:	60da      	str	r2, [r3, #12]
      break;
 8002c36:	e01e      	b.n	8002c76 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f9ff 	bl	8003044 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9f8 	bl	8003044 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0202 	orr.w	r2, r2, #2
 8002c62:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0204 	orr.w	r2, r2, #4
 8002c72:	60da      	str	r2, [r3, #12]
      break;
 8002c74:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8f8 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8ea 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f8fb 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8ce 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8c0 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f8d1 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0208 	mvn.w	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8a4 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f896 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8a7 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f87a 	bl	8002ec8 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f86c 	bl	8002eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f87d 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0201 	mvn.w	r2, #1
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f846 	bl	8002ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9ae 	bl	800319c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f842 	bl	8002ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f978 	bl	8003188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a40      	ldr	r2, [pc, #256]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3d      	ldr	r2, [pc, #244]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a3b      	ldr	r2, [pc, #236]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a3a      	ldr	r2, [pc, #232]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d027      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2c      	ldr	r2, [pc, #176]	; (800301c <TIM_Base_SetConfig+0x118>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d023      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2b      	ldr	r2, [pc, #172]	; (8003020 <TIM_Base_SetConfig+0x11c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <TIM_Base_SetConfig+0x120>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d017      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <TIM_Base_SetConfig+0x128>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <TIM_Base_SetConfig+0x12c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a26      	ldr	r2, [pc, #152]	; (8003034 <TIM_Base_SetConfig+0x130>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	; (8003038 <TIM_Base_SetConfig+0x134>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <TIM_Base_SetConfig+0x138>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a23      	ldr	r2, [pc, #140]	; (8003040 <TIM_Base_SetConfig+0x13c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <TIM_Base_SetConfig+0x114>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xf8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <TIM_Base_SetConfig+0x124>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800
 8003038:	40001800 	.word	0x40001800
 800303c:	40001c00 	.word	0x40001c00
 8003040:	40002000 	.word	0x40002000

08003044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e05a      	b.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d022      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d01d      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1b      	ldr	r2, [pc, #108]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a1a      	ldr	r2, [pc, #104]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a15      	ldr	r2, [pc, #84]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10c      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40010400 	.word	0x40010400
 8003180:	40014000 	.word	0x40014000
 8003184:	40001800 	.word	0x40001800

08003188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e03f      	b.n	8003242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fe66 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	; 0x24
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f929 	bl	800344c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08a      	sub	sp, #40	; 0x28
 800324e:	af02      	add	r7, sp, #8
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d17c      	bne.n	8003364 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_Transmit+0x2c>
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e075      	b.n	8003366 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x3e>
 8003284:	2302      	movs	r3, #2
 8003286:	e06e      	b.n	8003366 <HAL_UART_Transmit+0x11c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2221      	movs	r2, #33	; 0x21
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800329e:	f7fd ffc7 	bl	8001230 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	88fa      	ldrh	r2, [r7, #6]
 80032ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b8:	d108      	bne.n	80032cc <HAL_UART_Transmit+0x82>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e003      	b.n	80032d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032dc:	e02a      	b.n	8003334 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f840 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e036      	b.n	8003366 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800330c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3302      	adds	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	e007      	b.n	8003326 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1cf      	bne.n	80032de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	; 0x40
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f810 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b090      	sub	sp, #64	; 0x40
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337e:	e050      	b.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003386:	d04c      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0x30>
 800338e:	f7fd ff4f 	bl	8001230 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339a:	429a      	cmp	r2, r3
 800339c:	d241      	bcs.n	8003422 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033be:	637a      	str	r2, [r7, #52]	; 0x34
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e5      	bne.n	800339e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	613b      	str	r3, [r7, #16]
   return(result);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3314      	adds	r3, #20
 80033f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f2:	623a      	str	r2, [r7, #32]
 80033f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	69f9      	ldr	r1, [r7, #28]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e00f      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	429a      	cmp	r2, r3
 800343e:	d09f      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3740      	adds	r7, #64	; 0x40
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b0c0      	sub	sp, #256	; 0x100
 8003452:	af00      	add	r7, sp, #0
 8003454:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	68d9      	ldr	r1, [r3, #12]
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	ea40 0301 	orr.w	r3, r0, r1
 8003474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	431a      	orrs	r2, r3
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034a4:	f021 010c 	bic.w	r1, r1, #12
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034b2:	430b      	orrs	r3, r1
 80034b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c6:	6999      	ldr	r1, [r3, #24]
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	ea40 0301 	orr.w	r3, r0, r1
 80034d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8f      	ldr	r3, [pc, #572]	; (8003718 <UART_SetConfig+0x2cc>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d005      	beq.n	80034ec <UART_SetConfig+0xa0>
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4b8d      	ldr	r3, [pc, #564]	; (800371c <UART_SetConfig+0x2d0>)
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d104      	bne.n	80034f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff fa68 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80034f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034f4:	e003      	b.n	80034fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034f6:	f7ff fa4f 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80034fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003508:	f040 810c 	bne.w	8003724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800350c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003516:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800351a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800351e:	4622      	mov	r2, r4
 8003520:	462b      	mov	r3, r5
 8003522:	1891      	adds	r1, r2, r2
 8003524:	65b9      	str	r1, [r7, #88]	; 0x58
 8003526:	415b      	adcs	r3, r3
 8003528:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800352e:	4621      	mov	r1, r4
 8003530:	eb12 0801 	adds.w	r8, r2, r1
 8003534:	4629      	mov	r1, r5
 8003536:	eb43 0901 	adc.w	r9, r3, r1
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354e:	4690      	mov	r8, r2
 8003550:	4699      	mov	r9, r3
 8003552:	4623      	mov	r3, r4
 8003554:	eb18 0303 	adds.w	r3, r8, r3
 8003558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800355c:	462b      	mov	r3, r5
 800355e:	eb49 0303 	adc.w	r3, r9, r3
 8003562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003572:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800357a:	460b      	mov	r3, r1
 800357c:	18db      	adds	r3, r3, r3
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
 8003580:	4613      	mov	r3, r2
 8003582:	eb42 0303 	adc.w	r3, r2, r3
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
 8003588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800358c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003590:	f7fc fe6e 	bl	8000270 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <UART_SetConfig+0x2d4>)
 800359a:	fba3 2302 	umull	r2, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	011c      	lsls	r4, r3, #4
 80035a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	1891      	adds	r1, r2, r2
 80035ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80035bc:	415b      	adcs	r3, r3
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035c4:	4641      	mov	r1, r8
 80035c6:	eb12 0a01 	adds.w	sl, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb43 0b01 	adc.w	fp, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e4:	4692      	mov	sl, r2
 80035e6:	469b      	mov	fp, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	eb1a 0303 	adds.w	r3, sl, r3
 80035ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f2:	464b      	mov	r3, r9
 80035f4:	eb4b 0303 	adc.w	r3, fp, r3
 80035f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003608:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800360c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003610:	460b      	mov	r3, r1
 8003612:	18db      	adds	r3, r3, r3
 8003614:	643b      	str	r3, [r7, #64]	; 0x40
 8003616:	4613      	mov	r3, r2
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	647b      	str	r3, [r7, #68]	; 0x44
 800361e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003626:	f7fc fe23 	bl	8000270 <__aeabi_uldivmod>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4611      	mov	r1, r2
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <UART_SetConfig+0x2d4>)
 8003632:	fba3 2301 	umull	r2, r3, r3, r1
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2264      	movs	r2, #100	; 0x64
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	1acb      	subs	r3, r1, r3
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <UART_SetConfig+0x2d4>)
 8003648:	fba3 2302 	umull	r2, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003654:	441c      	add	r4, r3
 8003656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003660:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	1891      	adds	r1, r2, r2
 800366e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003670:	415b      	adcs	r3, r3
 8003672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003678:	4641      	mov	r1, r8
 800367a:	1851      	adds	r1, r2, r1
 800367c:	6339      	str	r1, [r7, #48]	; 0x30
 800367e:	4649      	mov	r1, r9
 8003680:	414b      	adcs	r3, r1
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003690:	4659      	mov	r1, fp
 8003692:	00cb      	lsls	r3, r1, #3
 8003694:	4651      	mov	r1, sl
 8003696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369a:	4651      	mov	r1, sl
 800369c:	00ca      	lsls	r2, r1, #3
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	4642      	mov	r2, r8
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ac:	464b      	mov	r3, r9
 80036ae:	460a      	mov	r2, r1
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036cc:	460b      	mov	r3, r1
 80036ce:	18db      	adds	r3, r3, r3
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d2:	4613      	mov	r3, r2
 80036d4:	eb42 0303 	adc.w	r3, r2, r3
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036e2:	f7fc fdc5 	bl	8000270 <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <UART_SetConfig+0x2d4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 0207 	and.w	r2, r3, #7
 800370a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4422      	add	r2, r4
 8003712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003714:	e105      	b.n	8003922 <UART_SetConfig+0x4d6>
 8003716:	bf00      	nop
 8003718:	40011000 	.word	0x40011000
 800371c:	40011400 	.word	0x40011400
 8003720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003728:	2200      	movs	r2, #0
 800372a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800372e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003736:	4642      	mov	r2, r8
 8003738:	464b      	mov	r3, r9
 800373a:	1891      	adds	r1, r2, r2
 800373c:	6239      	str	r1, [r7, #32]
 800373e:	415b      	adcs	r3, r3
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003746:	4641      	mov	r1, r8
 8003748:	1854      	adds	r4, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb43 0501 	adc.w	r5, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	00eb      	lsls	r3, r5, #3
 800375a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375e:	00e2      	lsls	r2, r4, #3
 8003760:	4614      	mov	r4, r2
 8003762:	461d      	mov	r5, r3
 8003764:	4643      	mov	r3, r8
 8003766:	18e3      	adds	r3, r4, r3
 8003768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800376c:	464b      	mov	r3, r9
 800376e:	eb45 0303 	adc.w	r3, r5, r3
 8003772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003792:	4629      	mov	r1, r5
 8003794:	008b      	lsls	r3, r1, #2
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800379c:	4621      	mov	r1, r4
 800379e:	008a      	lsls	r2, r1, #2
 80037a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037a4:	f7fc fd64 	bl	8000270 <__aeabi_uldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4b60      	ldr	r3, [pc, #384]	; (8003930 <UART_SetConfig+0x4e4>)
 80037ae:	fba3 2302 	umull	r2, r3, r3, r2
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	011c      	lsls	r4, r3, #4
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	61b9      	str	r1, [r7, #24]
 80037d0:	415b      	adcs	r3, r3
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d8:	4641      	mov	r1, r8
 80037da:	1851      	adds	r1, r2, r1
 80037dc:	6139      	str	r1, [r7, #16]
 80037de:	4649      	mov	r1, r9
 80037e0:	414b      	adcs	r3, r1
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f0:	4659      	mov	r1, fp
 80037f2:	00cb      	lsls	r3, r1, #3
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fa:	4651      	mov	r1, sl
 80037fc:	00ca      	lsls	r2, r1, #3
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	4603      	mov	r3, r0
 8003804:	4642      	mov	r2, r8
 8003806:	189b      	adds	r3, r3, r2
 8003808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800380c:	464b      	mov	r3, r9
 800380e:	460a      	mov	r2, r1
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	67bb      	str	r3, [r7, #120]	; 0x78
 8003822:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003830:	4649      	mov	r1, r9
 8003832:	008b      	lsls	r3, r1, #2
 8003834:	4641      	mov	r1, r8
 8003836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383a:	4641      	mov	r1, r8
 800383c:	008a      	lsls	r2, r1, #2
 800383e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003842:	f7fc fd15 	bl	8000270 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <UART_SetConfig+0x4e4>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <UART_SetConfig+0x4e4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386a:	441c      	add	r4, r3
 800386c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003870:	2200      	movs	r2, #0
 8003872:	673b      	str	r3, [r7, #112]	; 0x70
 8003874:	677a      	str	r2, [r7, #116]	; 0x74
 8003876:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800387a:	4642      	mov	r2, r8
 800387c:	464b      	mov	r3, r9
 800387e:	1891      	adds	r1, r2, r2
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	415b      	adcs	r3, r3
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388a:	4641      	mov	r1, r8
 800388c:	1851      	adds	r1, r2, r1
 800388e:	6039      	str	r1, [r7, #0]
 8003890:	4649      	mov	r1, r9
 8003892:	414b      	adcs	r3, r1
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038a2:	4659      	mov	r1, fp
 80038a4:	00cb      	lsls	r3, r1, #3
 80038a6:	4651      	mov	r1, sl
 80038a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ac:	4651      	mov	r1, sl
 80038ae:	00ca      	lsls	r2, r1, #3
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	4642      	mov	r2, r8
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80038bc:	464b      	mov	r3, r9
 80038be:	460a      	mov	r2, r1
 80038c0:	eb42 0303 	adc.w	r3, r2, r3
 80038c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	663b      	str	r3, [r7, #96]	; 0x60
 80038d0:	667a      	str	r2, [r7, #100]	; 0x64
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038de:	4649      	mov	r1, r9
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	4641      	mov	r1, r8
 80038e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e8:	4641      	mov	r1, r8
 80038ea:	008a      	lsls	r2, r1, #2
 80038ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038f0:	f7fc fcbe 	bl	8000270 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <UART_SetConfig+0x4e4>)
 80038fa:	fba3 1302 	umull	r1, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2164      	movs	r1, #100	; 0x64
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	; 0x32
 800390c:	4a08      	ldr	r2, [pc, #32]	; (8003930 <UART_SetConfig+0x4e4>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4422      	add	r2, r4
 8003920:	609a      	str	r2, [r3, #8]
}
 8003922:	bf00      	nop
 8003924:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003928:	46bd      	mov	sp, r7
 800392a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800392e:	bf00      	nop
 8003930:	51eb851f 	.word	0x51eb851f

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f000 ffae 	bl	80048b4 <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080049b8 	.word	0x080049b8
 800397c:	080049b8 	.word	0x080049b8
 8003980:	080049b8 	.word	0x080049b8
 8003984:	080049bc 	.word	0x080049bc

08003988 <memset>:
 8003988:	4402      	add	r2, r0
 800398a:	4603      	mov	r3, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <iprintf>:
 8003998:	b40f      	push	{r0, r1, r2, r3}
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <iprintf+0x2c>)
 800399c:	b513      	push	{r0, r1, r4, lr}
 800399e:	681c      	ldr	r4, [r3, #0]
 80039a0:	b124      	cbz	r4, 80039ac <iprintf+0x14>
 80039a2:	69a3      	ldr	r3, [r4, #24]
 80039a4:	b913      	cbnz	r3, 80039ac <iprintf+0x14>
 80039a6:	4620      	mov	r0, r4
 80039a8:	f000 f866 	bl	8003a78 <__sinit>
 80039ac:	ab05      	add	r3, sp, #20
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	68a1      	ldr	r1, [r4, #8]
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	4620      	mov	r0, r4
 80039b6:	f000 f9bd 	bl	8003d34 <_vfiprintf_r>
 80039ba:	b002      	add	sp, #8
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c0:	b004      	add	sp, #16
 80039c2:	4770      	bx	lr
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <std>:
 80039c8:	2300      	movs	r3, #0
 80039ca:	b510      	push	{r4, lr}
 80039cc:	4604      	mov	r4, r0
 80039ce:	e9c0 3300 	strd	r3, r3, [r0]
 80039d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039d6:	6083      	str	r3, [r0, #8]
 80039d8:	8181      	strh	r1, [r0, #12]
 80039da:	6643      	str	r3, [r0, #100]	; 0x64
 80039dc:	81c2      	strh	r2, [r0, #14]
 80039de:	6183      	str	r3, [r0, #24]
 80039e0:	4619      	mov	r1, r3
 80039e2:	2208      	movs	r2, #8
 80039e4:	305c      	adds	r0, #92	; 0x5c
 80039e6:	f7ff ffcf 	bl	8003988 <memset>
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <std+0x38>)
 80039ec:	6263      	str	r3, [r4, #36]	; 0x24
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <std+0x3c>)
 80039f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <std+0x40>)
 80039f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <std+0x44>)
 80039f8:	6224      	str	r4, [r4, #32]
 80039fa:	6323      	str	r3, [r4, #48]	; 0x30
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	bf00      	nop
 8003a00:	080042dd 	.word	0x080042dd
 8003a04:	080042ff 	.word	0x080042ff
 8003a08:	08004337 	.word	0x08004337
 8003a0c:	0800435b 	.word	0x0800435b

08003a10 <_cleanup_r>:
 8003a10:	4901      	ldr	r1, [pc, #4]	; (8003a18 <_cleanup_r+0x8>)
 8003a12:	f000 b8af 	b.w	8003b74 <_fwalk_reent>
 8003a16:	bf00      	nop
 8003a18:	08004635 	.word	0x08004635

08003a1c <__sfmoreglue>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	2268      	movs	r2, #104	; 0x68
 8003a20:	1e4d      	subs	r5, r1, #1
 8003a22:	4355      	muls	r5, r2
 8003a24:	460e      	mov	r6, r1
 8003a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a2a:	f000 f8e5 	bl	8003bf8 <_malloc_r>
 8003a2e:	4604      	mov	r4, r0
 8003a30:	b140      	cbz	r0, 8003a44 <__sfmoreglue+0x28>
 8003a32:	2100      	movs	r1, #0
 8003a34:	e9c0 1600 	strd	r1, r6, [r0]
 8003a38:	300c      	adds	r0, #12
 8003a3a:	60a0      	str	r0, [r4, #8]
 8003a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a40:	f7ff ffa2 	bl	8003988 <memset>
 8003a44:	4620      	mov	r0, r4
 8003a46:	bd70      	pop	{r4, r5, r6, pc}

08003a48 <__sfp_lock_acquire>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__sfp_lock_acquire+0x8>)
 8003a4a:	f000 b8b3 	b.w	8003bb4 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	200001b1 	.word	0x200001b1

08003a54 <__sfp_lock_release>:
 8003a54:	4801      	ldr	r0, [pc, #4]	; (8003a5c <__sfp_lock_release+0x8>)
 8003a56:	f000 b8ae 	b.w	8003bb6 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	200001b1 	.word	0x200001b1

08003a60 <__sinit_lock_acquire>:
 8003a60:	4801      	ldr	r0, [pc, #4]	; (8003a68 <__sinit_lock_acquire+0x8>)
 8003a62:	f000 b8a7 	b.w	8003bb4 <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	200001b2 	.word	0x200001b2

08003a6c <__sinit_lock_release>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__sinit_lock_release+0x8>)
 8003a6e:	f000 b8a2 	b.w	8003bb6 <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	200001b2 	.word	0x200001b2

08003a78 <__sinit>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	f7ff fff0 	bl	8003a60 <__sinit_lock_acquire>
 8003a80:	69a3      	ldr	r3, [r4, #24]
 8003a82:	b11b      	cbz	r3, 8003a8c <__sinit+0x14>
 8003a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a88:	f7ff bff0 	b.w	8003a6c <__sinit_lock_release>
 8003a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a90:	6523      	str	r3, [r4, #80]	; 0x50
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <__sinit+0x68>)
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <__sinit+0x6c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a9a:	42a3      	cmp	r3, r4
 8003a9c:	bf04      	itt	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	61a3      	streq	r3, [r4, #24]
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f000 f820 	bl	8003ae8 <__sfp>
 8003aa8:	6060      	str	r0, [r4, #4]
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f000 f81c 	bl	8003ae8 <__sfp>
 8003ab0:	60a0      	str	r0, [r4, #8]
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f000 f818 	bl	8003ae8 <__sfp>
 8003ab8:	2200      	movs	r2, #0
 8003aba:	60e0      	str	r0, [r4, #12]
 8003abc:	2104      	movs	r1, #4
 8003abe:	6860      	ldr	r0, [r4, #4]
 8003ac0:	f7ff ff82 	bl	80039c8 <std>
 8003ac4:	68a0      	ldr	r0, [r4, #8]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2109      	movs	r1, #9
 8003aca:	f7ff ff7d 	bl	80039c8 <std>
 8003ace:	68e0      	ldr	r0, [r4, #12]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	2112      	movs	r1, #18
 8003ad4:	f7ff ff78 	bl	80039c8 <std>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	61a3      	str	r3, [r4, #24]
 8003adc:	e7d2      	b.n	8003a84 <__sinit+0xc>
 8003ade:	bf00      	nop
 8003ae0:	08004918 	.word	0x08004918
 8003ae4:	08003a11 	.word	0x08003a11

08003ae8 <__sfp>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	4607      	mov	r7, r0
 8003aec:	f7ff ffac 	bl	8003a48 <__sfp_lock_acquire>
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <__sfp+0x84>)
 8003af2:	681e      	ldr	r6, [r3, #0]
 8003af4:	69b3      	ldr	r3, [r6, #24]
 8003af6:	b913      	cbnz	r3, 8003afe <__sfp+0x16>
 8003af8:	4630      	mov	r0, r6
 8003afa:	f7ff ffbd 	bl	8003a78 <__sinit>
 8003afe:	3648      	adds	r6, #72	; 0x48
 8003b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	d503      	bpl.n	8003b10 <__sfp+0x28>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	b30b      	cbz	r3, 8003b50 <__sfp+0x68>
 8003b0c:	6836      	ldr	r6, [r6, #0]
 8003b0e:	e7f7      	b.n	8003b00 <__sfp+0x18>
 8003b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b14:	b9d5      	cbnz	r5, 8003b4c <__sfp+0x64>
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <__sfp+0x88>)
 8003b18:	60e3      	str	r3, [r4, #12]
 8003b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b20:	f000 f847 	bl	8003bb2 <__retarget_lock_init_recursive>
 8003b24:	f7ff ff96 	bl	8003a54 <__sfp_lock_release>
 8003b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b30:	6025      	str	r5, [r4, #0]
 8003b32:	61a5      	str	r5, [r4, #24]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4629      	mov	r1, r5
 8003b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b3c:	f7ff ff24 	bl	8003988 <memset>
 8003b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b48:	4620      	mov	r0, r4
 8003b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b4c:	3468      	adds	r4, #104	; 0x68
 8003b4e:	e7d9      	b.n	8003b04 <__sfp+0x1c>
 8003b50:	2104      	movs	r1, #4
 8003b52:	4638      	mov	r0, r7
 8003b54:	f7ff ff62 	bl	8003a1c <__sfmoreglue>
 8003b58:	4604      	mov	r4, r0
 8003b5a:	6030      	str	r0, [r6, #0]
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1d5      	bne.n	8003b0c <__sfp+0x24>
 8003b60:	f7ff ff78 	bl	8003a54 <__sfp_lock_release>
 8003b64:	230c      	movs	r3, #12
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	e7ee      	b.n	8003b48 <__sfp+0x60>
 8003b6a:	bf00      	nop
 8003b6c:	08004918 	.word	0x08004918
 8003b70:	ffff0001 	.word	0xffff0001

08003b74 <_fwalk_reent>:
 8003b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b78:	4606      	mov	r6, r0
 8003b7a:	4688      	mov	r8, r1
 8003b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b80:	2700      	movs	r7, #0
 8003b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b86:	f1b9 0901 	subs.w	r9, r9, #1
 8003b8a:	d505      	bpl.n	8003b98 <_fwalk_reent+0x24>
 8003b8c:	6824      	ldr	r4, [r4, #0]
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	d1f7      	bne.n	8003b82 <_fwalk_reent+0xe>
 8003b92:	4638      	mov	r0, r7
 8003b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b98:	89ab      	ldrh	r3, [r5, #12]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d907      	bls.n	8003bae <_fwalk_reent+0x3a>
 8003b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	d003      	beq.n	8003bae <_fwalk_reent+0x3a>
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	4630      	mov	r0, r6
 8003baa:	47c0      	blx	r8
 8003bac:	4307      	orrs	r7, r0
 8003bae:	3568      	adds	r5, #104	; 0x68
 8003bb0:	e7e9      	b.n	8003b86 <_fwalk_reent+0x12>

08003bb2 <__retarget_lock_init_recursive>:
 8003bb2:	4770      	bx	lr

08003bb4 <__retarget_lock_acquire_recursive>:
 8003bb4:	4770      	bx	lr

08003bb6 <__retarget_lock_release_recursive>:
 8003bb6:	4770      	bx	lr

08003bb8 <sbrk_aligned>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4e0e      	ldr	r6, [pc, #56]	; (8003bf4 <sbrk_aligned+0x3c>)
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	6831      	ldr	r1, [r6, #0]
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	b911      	cbnz	r1, 8003bca <sbrk_aligned+0x12>
 8003bc4:	f000 fb7a 	bl	80042bc <_sbrk_r>
 8003bc8:	6030      	str	r0, [r6, #0]
 8003bca:	4621      	mov	r1, r4
 8003bcc:	4628      	mov	r0, r5
 8003bce:	f000 fb75 	bl	80042bc <_sbrk_r>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	d00a      	beq.n	8003bec <sbrk_aligned+0x34>
 8003bd6:	1cc4      	adds	r4, r0, #3
 8003bd8:	f024 0403 	bic.w	r4, r4, #3
 8003bdc:	42a0      	cmp	r0, r4
 8003bde:	d007      	beq.n	8003bf0 <sbrk_aligned+0x38>
 8003be0:	1a21      	subs	r1, r4, r0
 8003be2:	4628      	mov	r0, r5
 8003be4:	f000 fb6a 	bl	80042bc <_sbrk_r>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d101      	bne.n	8003bf0 <sbrk_aligned+0x38>
 8003bec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	200001b8 	.word	0x200001b8

08003bf8 <_malloc_r>:
 8003bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfc:	1ccd      	adds	r5, r1, #3
 8003bfe:	f025 0503 	bic.w	r5, r5, #3
 8003c02:	3508      	adds	r5, #8
 8003c04:	2d0c      	cmp	r5, #12
 8003c06:	bf38      	it	cc
 8003c08:	250c      	movcc	r5, #12
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	db01      	blt.n	8003c14 <_malloc_r+0x1c>
 8003c10:	42a9      	cmp	r1, r5
 8003c12:	d905      	bls.n	8003c20 <_malloc_r+0x28>
 8003c14:	230c      	movs	r3, #12
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	2600      	movs	r6, #0
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c20:	4e2e      	ldr	r6, [pc, #184]	; (8003cdc <_malloc_r+0xe4>)
 8003c22:	f000 fdbb 	bl	800479c <__malloc_lock>
 8003c26:	6833      	ldr	r3, [r6, #0]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	bb34      	cbnz	r4, 8003c7a <_malloc_r+0x82>
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7ff ffc2 	bl	8003bb8 <sbrk_aligned>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	4604      	mov	r4, r0
 8003c38:	d14d      	bne.n	8003cd6 <_malloc_r+0xde>
 8003c3a:	6834      	ldr	r4, [r6, #0]
 8003c3c:	4626      	mov	r6, r4
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	d140      	bne.n	8003cc4 <_malloc_r+0xcc>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	4631      	mov	r1, r6
 8003c46:	4638      	mov	r0, r7
 8003c48:	eb04 0803 	add.w	r8, r4, r3
 8003c4c:	f000 fb36 	bl	80042bc <_sbrk_r>
 8003c50:	4580      	cmp	r8, r0
 8003c52:	d13a      	bne.n	8003cca <_malloc_r+0xd2>
 8003c54:	6821      	ldr	r1, [r4, #0]
 8003c56:	3503      	adds	r5, #3
 8003c58:	1a6d      	subs	r5, r5, r1
 8003c5a:	f025 0503 	bic.w	r5, r5, #3
 8003c5e:	3508      	adds	r5, #8
 8003c60:	2d0c      	cmp	r5, #12
 8003c62:	bf38      	it	cc
 8003c64:	250c      	movcc	r5, #12
 8003c66:	4629      	mov	r1, r5
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f7ff ffa5 	bl	8003bb8 <sbrk_aligned>
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d02b      	beq.n	8003cca <_malloc_r+0xd2>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	442b      	add	r3, r5
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	e00e      	b.n	8003c98 <_malloc_r+0xa0>
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	1b52      	subs	r2, r2, r5
 8003c7e:	d41e      	bmi.n	8003cbe <_malloc_r+0xc6>
 8003c80:	2a0b      	cmp	r2, #11
 8003c82:	d916      	bls.n	8003cb2 <_malloc_r+0xba>
 8003c84:	1961      	adds	r1, r4, r5
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	6025      	str	r5, [r4, #0]
 8003c8a:	bf18      	it	ne
 8003c8c:	6059      	strne	r1, [r3, #4]
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	bf08      	it	eq
 8003c92:	6031      	streq	r1, [r6, #0]
 8003c94:	5162      	str	r2, [r4, r5]
 8003c96:	604b      	str	r3, [r1, #4]
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f104 060b 	add.w	r6, r4, #11
 8003c9e:	f000 fd83 	bl	80047a8 <__malloc_unlock>
 8003ca2:	f026 0607 	bic.w	r6, r6, #7
 8003ca6:	1d23      	adds	r3, r4, #4
 8003ca8:	1af2      	subs	r2, r6, r3
 8003caa:	d0b6      	beq.n	8003c1a <_malloc_r+0x22>
 8003cac:	1b9b      	subs	r3, r3, r6
 8003cae:	50a3      	str	r3, [r4, r2]
 8003cb0:	e7b3      	b.n	8003c1a <_malloc_r+0x22>
 8003cb2:	6862      	ldr	r2, [r4, #4]
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	bf0c      	ite	eq
 8003cb8:	6032      	streq	r2, [r6, #0]
 8003cba:	605a      	strne	r2, [r3, #4]
 8003cbc:	e7ec      	b.n	8003c98 <_malloc_r+0xa0>
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	6864      	ldr	r4, [r4, #4]
 8003cc2:	e7b2      	b.n	8003c2a <_malloc_r+0x32>
 8003cc4:	4634      	mov	r4, r6
 8003cc6:	6876      	ldr	r6, [r6, #4]
 8003cc8:	e7b9      	b.n	8003c3e <_malloc_r+0x46>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f000 fd6a 	bl	80047a8 <__malloc_unlock>
 8003cd4:	e7a1      	b.n	8003c1a <_malloc_r+0x22>
 8003cd6:	6025      	str	r5, [r4, #0]
 8003cd8:	e7de      	b.n	8003c98 <_malloc_r+0xa0>
 8003cda:	bf00      	nop
 8003cdc:	200001b4 	.word	0x200001b4

08003ce0 <__sfputc_r>:
 8003ce0:	6893      	ldr	r3, [r2, #8]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	b410      	push	{r4}
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	da08      	bge.n	8003cfe <__sfputc_r+0x1e>
 8003cec:	6994      	ldr	r4, [r2, #24]
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	db01      	blt.n	8003cf6 <__sfputc_r+0x16>
 8003cf2:	290a      	cmp	r1, #10
 8003cf4:	d103      	bne.n	8003cfe <__sfputc_r+0x1e>
 8003cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cfa:	f000 bb33 	b.w	8004364 <__swbuf_r>
 8003cfe:	6813      	ldr	r3, [r2, #0]
 8003d00:	1c58      	adds	r0, r3, #1
 8003d02:	6010      	str	r0, [r2, #0]
 8003d04:	7019      	strb	r1, [r3, #0]
 8003d06:	4608      	mov	r0, r1
 8003d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <__sfputs_r>:
 8003d0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d10:	4606      	mov	r6, r0
 8003d12:	460f      	mov	r7, r1
 8003d14:	4614      	mov	r4, r2
 8003d16:	18d5      	adds	r5, r2, r3
 8003d18:	42ac      	cmp	r4, r5
 8003d1a:	d101      	bne.n	8003d20 <__sfputs_r+0x12>
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	e007      	b.n	8003d30 <__sfputs_r+0x22>
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	463a      	mov	r2, r7
 8003d26:	4630      	mov	r0, r6
 8003d28:	f7ff ffda 	bl	8003ce0 <__sfputc_r>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d1f3      	bne.n	8003d18 <__sfputs_r+0xa>
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d34 <_vfiprintf_r>:
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	460d      	mov	r5, r1
 8003d3a:	b09d      	sub	sp, #116	; 0x74
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	4698      	mov	r8, r3
 8003d40:	4606      	mov	r6, r0
 8003d42:	b118      	cbz	r0, 8003d4c <_vfiprintf_r+0x18>
 8003d44:	6983      	ldr	r3, [r0, #24]
 8003d46:	b90b      	cbnz	r3, 8003d4c <_vfiprintf_r+0x18>
 8003d48:	f7ff fe96 	bl	8003a78 <__sinit>
 8003d4c:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <_vfiprintf_r+0x240>)
 8003d4e:	429d      	cmp	r5, r3
 8003d50:	d11b      	bne.n	8003d8a <_vfiprintf_r+0x56>
 8003d52:	6875      	ldr	r5, [r6, #4]
 8003d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d56:	07d9      	lsls	r1, r3, #31
 8003d58:	d405      	bmi.n	8003d66 <_vfiprintf_r+0x32>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	059a      	lsls	r2, r3, #22
 8003d5e:	d402      	bmi.n	8003d66 <_vfiprintf_r+0x32>
 8003d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d62:	f7ff ff27 	bl	8003bb4 <__retarget_lock_acquire_recursive>
 8003d66:	89ab      	ldrh	r3, [r5, #12]
 8003d68:	071b      	lsls	r3, r3, #28
 8003d6a:	d501      	bpl.n	8003d70 <_vfiprintf_r+0x3c>
 8003d6c:	692b      	ldr	r3, [r5, #16]
 8003d6e:	b9eb      	cbnz	r3, 8003dac <_vfiprintf_r+0x78>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4630      	mov	r0, r6
 8003d74:	f000 fb5a 	bl	800442c <__swsetup_r>
 8003d78:	b1c0      	cbz	r0, 8003dac <_vfiprintf_r+0x78>
 8003d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d7c:	07dc      	lsls	r4, r3, #31
 8003d7e:	d50e      	bpl.n	8003d9e <_vfiprintf_r+0x6a>
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d84:	b01d      	add	sp, #116	; 0x74
 8003d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <_vfiprintf_r+0x244>)
 8003d8c:	429d      	cmp	r5, r3
 8003d8e:	d101      	bne.n	8003d94 <_vfiprintf_r+0x60>
 8003d90:	68b5      	ldr	r5, [r6, #8]
 8003d92:	e7df      	b.n	8003d54 <_vfiprintf_r+0x20>
 8003d94:	4b79      	ldr	r3, [pc, #484]	; (8003f7c <_vfiprintf_r+0x248>)
 8003d96:	429d      	cmp	r5, r3
 8003d98:	bf08      	it	eq
 8003d9a:	68f5      	ldreq	r5, [r6, #12]
 8003d9c:	e7da      	b.n	8003d54 <_vfiprintf_r+0x20>
 8003d9e:	89ab      	ldrh	r3, [r5, #12]
 8003da0:	0598      	lsls	r0, r3, #22
 8003da2:	d4ed      	bmi.n	8003d80 <_vfiprintf_r+0x4c>
 8003da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003da6:	f7ff ff06 	bl	8003bb6 <__retarget_lock_release_recursive>
 8003daa:	e7e9      	b.n	8003d80 <_vfiprintf_r+0x4c>
 8003dac:	2300      	movs	r3, #0
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	2320      	movs	r3, #32
 8003db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dba:	2330      	movs	r3, #48	; 0x30
 8003dbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f80 <_vfiprintf_r+0x24c>
 8003dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dc4:	f04f 0901 	mov.w	r9, #1
 8003dc8:	4623      	mov	r3, r4
 8003dca:	469a      	mov	sl, r3
 8003dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd0:	b10a      	cbz	r2, 8003dd6 <_vfiprintf_r+0xa2>
 8003dd2:	2a25      	cmp	r2, #37	; 0x25
 8003dd4:	d1f9      	bne.n	8003dca <_vfiprintf_r+0x96>
 8003dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8003dda:	d00b      	beq.n	8003df4 <_vfiprintf_r+0xc0>
 8003ddc:	465b      	mov	r3, fp
 8003dde:	4622      	mov	r2, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f7ff ff93 	bl	8003d0e <__sfputs_r>
 8003de8:	3001      	adds	r0, #1
 8003dea:	f000 80aa 	beq.w	8003f42 <_vfiprintf_r+0x20e>
 8003dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003df0:	445a      	add	r2, fp
 8003df2:	9209      	str	r2, [sp, #36]	; 0x24
 8003df4:	f89a 3000 	ldrb.w	r3, [sl]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a2 	beq.w	8003f42 <_vfiprintf_r+0x20e>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e08:	f10a 0a01 	add.w	sl, sl, #1
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	9307      	str	r3, [sp, #28]
 8003e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e14:	931a      	str	r3, [sp, #104]	; 0x68
 8003e16:	4654      	mov	r4, sl
 8003e18:	2205      	movs	r2, #5
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	4858      	ldr	r0, [pc, #352]	; (8003f80 <_vfiprintf_r+0x24c>)
 8003e20:	f7fc f9d6 	bl	80001d0 <memchr>
 8003e24:	9a04      	ldr	r2, [sp, #16]
 8003e26:	b9d8      	cbnz	r0, 8003e60 <_vfiprintf_r+0x12c>
 8003e28:	06d1      	lsls	r1, r2, #27
 8003e2a:	bf44      	itt	mi
 8003e2c:	2320      	movmi	r3, #32
 8003e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e32:	0713      	lsls	r3, r2, #28
 8003e34:	bf44      	itt	mi
 8003e36:	232b      	movmi	r3, #43	; 0x2b
 8003e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e40:	2b2a      	cmp	r3, #42	; 0x2a
 8003e42:	d015      	beq.n	8003e70 <_vfiprintf_r+0x13c>
 8003e44:	9a07      	ldr	r2, [sp, #28]
 8003e46:	4654      	mov	r4, sl
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f04f 0c0a 	mov.w	ip, #10
 8003e4e:	4621      	mov	r1, r4
 8003e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e54:	3b30      	subs	r3, #48	; 0x30
 8003e56:	2b09      	cmp	r3, #9
 8003e58:	d94e      	bls.n	8003ef8 <_vfiprintf_r+0x1c4>
 8003e5a:	b1b0      	cbz	r0, 8003e8a <_vfiprintf_r+0x156>
 8003e5c:	9207      	str	r2, [sp, #28]
 8003e5e:	e014      	b.n	8003e8a <_vfiprintf_r+0x156>
 8003e60:	eba0 0308 	sub.w	r3, r0, r8
 8003e64:	fa09 f303 	lsl.w	r3, r9, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	9304      	str	r3, [sp, #16]
 8003e6c:	46a2      	mov	sl, r4
 8003e6e:	e7d2      	b.n	8003e16 <_vfiprintf_r+0xe2>
 8003e70:	9b03      	ldr	r3, [sp, #12]
 8003e72:	1d19      	adds	r1, r3, #4
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bfbb      	ittet	lt
 8003e7c:	425b      	neglt	r3, r3
 8003e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e82:	9307      	strge	r3, [sp, #28]
 8003e84:	9307      	strlt	r3, [sp, #28]
 8003e86:	bfb8      	it	lt
 8003e88:	9204      	strlt	r2, [sp, #16]
 8003e8a:	7823      	ldrb	r3, [r4, #0]
 8003e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e8e:	d10c      	bne.n	8003eaa <_vfiprintf_r+0x176>
 8003e90:	7863      	ldrb	r3, [r4, #1]
 8003e92:	2b2a      	cmp	r3, #42	; 0x2a
 8003e94:	d135      	bne.n	8003f02 <_vfiprintf_r+0x1ce>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	1d1a      	adds	r2, r3, #4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	9203      	str	r2, [sp, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003ea6:	3402      	adds	r4, #2
 8003ea8:	9305      	str	r3, [sp, #20]
 8003eaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f90 <_vfiprintf_r+0x25c>
 8003eae:	7821      	ldrb	r1, [r4, #0]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	4650      	mov	r0, sl
 8003eb4:	f7fc f98c 	bl	80001d0 <memchr>
 8003eb8:	b140      	cbz	r0, 8003ecc <_vfiprintf_r+0x198>
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	eba0 000a 	sub.w	r0, r0, sl
 8003ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ec4:	9b04      	ldr	r3, [sp, #16]
 8003ec6:	4303      	orrs	r3, r0
 8003ec8:	3401      	adds	r4, #1
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed0:	482c      	ldr	r0, [pc, #176]	; (8003f84 <_vfiprintf_r+0x250>)
 8003ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	f7fc f97a 	bl	80001d0 <memchr>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d03f      	beq.n	8003f60 <_vfiprintf_r+0x22c>
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <_vfiprintf_r+0x254>)
 8003ee2:	bb1b      	cbnz	r3, 8003f2c <_vfiprintf_r+0x1f8>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	f023 0307 	bic.w	r3, r3, #7
 8003eec:	3308      	adds	r3, #8
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ef2:	443b      	add	r3, r7
 8003ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef6:	e767      	b.n	8003dc8 <_vfiprintf_r+0x94>
 8003ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003efc:	460c      	mov	r4, r1
 8003efe:	2001      	movs	r0, #1
 8003f00:	e7a5      	b.n	8003e4e <_vfiprintf_r+0x11a>
 8003f02:	2300      	movs	r3, #0
 8003f04:	3401      	adds	r4, #1
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f14:	3a30      	subs	r2, #48	; 0x30
 8003f16:	2a09      	cmp	r2, #9
 8003f18:	d903      	bls.n	8003f22 <_vfiprintf_r+0x1ee>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0c5      	beq.n	8003eaa <_vfiprintf_r+0x176>
 8003f1e:	9105      	str	r1, [sp, #20]
 8003f20:	e7c3      	b.n	8003eaa <_vfiprintf_r+0x176>
 8003f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f26:	4604      	mov	r4, r0
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e7f0      	b.n	8003f0e <_vfiprintf_r+0x1da>
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <_vfiprintf_r+0x258>)
 8003f34:	a904      	add	r1, sp, #16
 8003f36:	4630      	mov	r0, r6
 8003f38:	f3af 8000 	nop.w
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	1c78      	adds	r0, r7, #1
 8003f40:	d1d6      	bne.n	8003ef0 <_vfiprintf_r+0x1bc>
 8003f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f44:	07d9      	lsls	r1, r3, #31
 8003f46:	d405      	bmi.n	8003f54 <_vfiprintf_r+0x220>
 8003f48:	89ab      	ldrh	r3, [r5, #12]
 8003f4a:	059a      	lsls	r2, r3, #22
 8003f4c:	d402      	bmi.n	8003f54 <_vfiprintf_r+0x220>
 8003f4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f50:	f7ff fe31 	bl	8003bb6 <__retarget_lock_release_recursive>
 8003f54:	89ab      	ldrh	r3, [r5, #12]
 8003f56:	065b      	lsls	r3, r3, #25
 8003f58:	f53f af12 	bmi.w	8003d80 <_vfiprintf_r+0x4c>
 8003f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5e:	e711      	b.n	8003d84 <_vfiprintf_r+0x50>
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	462a      	mov	r2, r5
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <_vfiprintf_r+0x258>)
 8003f68:	a904      	add	r1, sp, #16
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 f880 	bl	8004070 <_printf_i>
 8003f70:	e7e4      	b.n	8003f3c <_vfiprintf_r+0x208>
 8003f72:	bf00      	nop
 8003f74:	0800493c 	.word	0x0800493c
 8003f78:	0800495c 	.word	0x0800495c
 8003f7c:	0800491c 	.word	0x0800491c
 8003f80:	0800497c 	.word	0x0800497c
 8003f84:	08004986 	.word	0x08004986
 8003f88:	00000000 	.word	0x00000000
 8003f8c:	08003d0f 	.word	0x08003d0f
 8003f90:	08004982 	.word	0x08004982

08003f94 <_printf_common>:
 8003f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f98:	4616      	mov	r6, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	688a      	ldr	r2, [r1, #8]
 8003f9e:	690b      	ldr	r3, [r1, #16]
 8003fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bfb8      	it	lt
 8003fa8:	4613      	movlt	r3, r2
 8003faa:	6033      	str	r3, [r6, #0]
 8003fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fb0:	4607      	mov	r7, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b10a      	cbz	r2, 8003fba <_printf_common+0x26>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	0699      	lsls	r1, r3, #26
 8003fbe:	bf42      	ittt	mi
 8003fc0:	6833      	ldrmi	r3, [r6, #0]
 8003fc2:	3302      	addmi	r3, #2
 8003fc4:	6033      	strmi	r3, [r6, #0]
 8003fc6:	6825      	ldr	r5, [r4, #0]
 8003fc8:	f015 0506 	ands.w	r5, r5, #6
 8003fcc:	d106      	bne.n	8003fdc <_printf_common+0x48>
 8003fce:	f104 0a19 	add.w	sl, r4, #25
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	6832      	ldr	r2, [r6, #0]
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	42ab      	cmp	r3, r5
 8003fda:	dc26      	bgt.n	800402a <_printf_common+0x96>
 8003fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fe0:	1e13      	subs	r3, r2, #0
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	bf18      	it	ne
 8003fe6:	2301      	movne	r3, #1
 8003fe8:	0692      	lsls	r2, r2, #26
 8003fea:	d42b      	bmi.n	8004044 <_printf_common+0xb0>
 8003fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c0      	blx	r8
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d01e      	beq.n	8004038 <_printf_common+0xa4>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	68e5      	ldr	r5, [r4, #12]
 8003ffe:	6832      	ldr	r2, [r6, #0]
 8004000:	f003 0306 	and.w	r3, r3, #6
 8004004:	2b04      	cmp	r3, #4
 8004006:	bf08      	it	eq
 8004008:	1aad      	subeq	r5, r5, r2
 800400a:	68a3      	ldr	r3, [r4, #8]
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	bf0c      	ite	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	2500      	movne	r5, #0
 8004016:	4293      	cmp	r3, r2
 8004018:	bfc4      	itt	gt
 800401a:	1a9b      	subgt	r3, r3, r2
 800401c:	18ed      	addgt	r5, r5, r3
 800401e:	2600      	movs	r6, #0
 8004020:	341a      	adds	r4, #26
 8004022:	42b5      	cmp	r5, r6
 8004024:	d11a      	bne.n	800405c <_printf_common+0xc8>
 8004026:	2000      	movs	r0, #0
 8004028:	e008      	b.n	800403c <_printf_common+0xa8>
 800402a:	2301      	movs	r3, #1
 800402c:	4652      	mov	r2, sl
 800402e:	4649      	mov	r1, r9
 8004030:	4638      	mov	r0, r7
 8004032:	47c0      	blx	r8
 8004034:	3001      	adds	r0, #1
 8004036:	d103      	bne.n	8004040 <_printf_common+0xac>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	3501      	adds	r5, #1
 8004042:	e7c6      	b.n	8003fd2 <_printf_common+0x3e>
 8004044:	18e1      	adds	r1, r4, r3
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	2030      	movs	r0, #48	; 0x30
 800404a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800404e:	4422      	add	r2, r4
 8004050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004058:	3302      	adds	r3, #2
 800405a:	e7c7      	b.n	8003fec <_printf_common+0x58>
 800405c:	2301      	movs	r3, #1
 800405e:	4622      	mov	r2, r4
 8004060:	4649      	mov	r1, r9
 8004062:	4638      	mov	r0, r7
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d0e6      	beq.n	8004038 <_printf_common+0xa4>
 800406a:	3601      	adds	r6, #1
 800406c:	e7d9      	b.n	8004022 <_printf_common+0x8e>
	...

08004070 <_printf_i>:
 8004070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004074:	7e0f      	ldrb	r7, [r1, #24]
 8004076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004078:	2f78      	cmp	r7, #120	; 0x78
 800407a:	4691      	mov	r9, r2
 800407c:	4680      	mov	r8, r0
 800407e:	460c      	mov	r4, r1
 8004080:	469a      	mov	sl, r3
 8004082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004086:	d807      	bhi.n	8004098 <_printf_i+0x28>
 8004088:	2f62      	cmp	r7, #98	; 0x62
 800408a:	d80a      	bhi.n	80040a2 <_printf_i+0x32>
 800408c:	2f00      	cmp	r7, #0
 800408e:	f000 80d8 	beq.w	8004242 <_printf_i+0x1d2>
 8004092:	2f58      	cmp	r7, #88	; 0x58
 8004094:	f000 80a3 	beq.w	80041de <_printf_i+0x16e>
 8004098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800409c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040a0:	e03a      	b.n	8004118 <_printf_i+0xa8>
 80040a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040a6:	2b15      	cmp	r3, #21
 80040a8:	d8f6      	bhi.n	8004098 <_printf_i+0x28>
 80040aa:	a101      	add	r1, pc, #4	; (adr r1, 80040b0 <_printf_i+0x40>)
 80040ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040b0:	08004109 	.word	0x08004109
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	08004099 	.word	0x08004099
 80040bc:	08004099 	.word	0x08004099
 80040c0:	08004099 	.word	0x08004099
 80040c4:	08004099 	.word	0x08004099
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004099 	.word	0x08004099
 80040d0:	08004099 	.word	0x08004099
 80040d4:	08004099 	.word	0x08004099
 80040d8:	08004099 	.word	0x08004099
 80040dc:	08004229 	.word	0x08004229
 80040e0:	0800414d 	.word	0x0800414d
 80040e4:	0800420b 	.word	0x0800420b
 80040e8:	08004099 	.word	0x08004099
 80040ec:	08004099 	.word	0x08004099
 80040f0:	0800424b 	.word	0x0800424b
 80040f4:	08004099 	.word	0x08004099
 80040f8:	0800414d 	.word	0x0800414d
 80040fc:	08004099 	.word	0x08004099
 8004100:	08004099 	.word	0x08004099
 8004104:	08004213 	.word	0x08004213
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	602a      	str	r2, [r5, #0]
 8004110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004118:	2301      	movs	r3, #1
 800411a:	e0a3      	b.n	8004264 <_printf_i+0x1f4>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	6829      	ldr	r1, [r5, #0]
 8004120:	0606      	lsls	r6, r0, #24
 8004122:	f101 0304 	add.w	r3, r1, #4
 8004126:	d50a      	bpl.n	800413e <_printf_i+0xce>
 8004128:	680e      	ldr	r6, [r1, #0]
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	2e00      	cmp	r6, #0
 800412e:	da03      	bge.n	8004138 <_printf_i+0xc8>
 8004130:	232d      	movs	r3, #45	; 0x2d
 8004132:	4276      	negs	r6, r6
 8004134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004138:	485e      	ldr	r0, [pc, #376]	; (80042b4 <_printf_i+0x244>)
 800413a:	230a      	movs	r3, #10
 800413c:	e019      	b.n	8004172 <_printf_i+0x102>
 800413e:	680e      	ldr	r6, [r1, #0]
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004146:	bf18      	it	ne
 8004148:	b236      	sxthne	r6, r6
 800414a:	e7ef      	b.n	800412c <_printf_i+0xbc>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	6820      	ldr	r0, [r4, #0]
 8004150:	1d19      	adds	r1, r3, #4
 8004152:	6029      	str	r1, [r5, #0]
 8004154:	0601      	lsls	r1, r0, #24
 8004156:	d501      	bpl.n	800415c <_printf_i+0xec>
 8004158:	681e      	ldr	r6, [r3, #0]
 800415a:	e002      	b.n	8004162 <_printf_i+0xf2>
 800415c:	0646      	lsls	r6, r0, #25
 800415e:	d5fb      	bpl.n	8004158 <_printf_i+0xe8>
 8004160:	881e      	ldrh	r6, [r3, #0]
 8004162:	4854      	ldr	r0, [pc, #336]	; (80042b4 <_printf_i+0x244>)
 8004164:	2f6f      	cmp	r7, #111	; 0x6f
 8004166:	bf0c      	ite	eq
 8004168:	2308      	moveq	r3, #8
 800416a:	230a      	movne	r3, #10
 800416c:	2100      	movs	r1, #0
 800416e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004172:	6865      	ldr	r5, [r4, #4]
 8004174:	60a5      	str	r5, [r4, #8]
 8004176:	2d00      	cmp	r5, #0
 8004178:	bfa2      	ittt	ge
 800417a:	6821      	ldrge	r1, [r4, #0]
 800417c:	f021 0104 	bicge.w	r1, r1, #4
 8004180:	6021      	strge	r1, [r4, #0]
 8004182:	b90e      	cbnz	r6, 8004188 <_printf_i+0x118>
 8004184:	2d00      	cmp	r5, #0
 8004186:	d04d      	beq.n	8004224 <_printf_i+0x1b4>
 8004188:	4615      	mov	r5, r2
 800418a:	fbb6 f1f3 	udiv	r1, r6, r3
 800418e:	fb03 6711 	mls	r7, r3, r1, r6
 8004192:	5dc7      	ldrb	r7, [r0, r7]
 8004194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004198:	4637      	mov	r7, r6
 800419a:	42bb      	cmp	r3, r7
 800419c:	460e      	mov	r6, r1
 800419e:	d9f4      	bls.n	800418a <_printf_i+0x11a>
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d10b      	bne.n	80041bc <_printf_i+0x14c>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	07de      	lsls	r6, r3, #31
 80041a8:	d508      	bpl.n	80041bc <_printf_i+0x14c>
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	6861      	ldr	r1, [r4, #4]
 80041ae:	4299      	cmp	r1, r3
 80041b0:	bfde      	ittt	le
 80041b2:	2330      	movle	r3, #48	; 0x30
 80041b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041bc:	1b52      	subs	r2, r2, r5
 80041be:	6122      	str	r2, [r4, #16]
 80041c0:	f8cd a000 	str.w	sl, [sp]
 80041c4:	464b      	mov	r3, r9
 80041c6:	aa03      	add	r2, sp, #12
 80041c8:	4621      	mov	r1, r4
 80041ca:	4640      	mov	r0, r8
 80041cc:	f7ff fee2 	bl	8003f94 <_printf_common>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d14c      	bne.n	800426e <_printf_i+0x1fe>
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041d8:	b004      	add	sp, #16
 80041da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041de:	4835      	ldr	r0, [pc, #212]	; (80042b4 <_printf_i+0x244>)
 80041e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041e4:	6829      	ldr	r1, [r5, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80041ec:	6029      	str	r1, [r5, #0]
 80041ee:	061d      	lsls	r5, r3, #24
 80041f0:	d514      	bpl.n	800421c <_printf_i+0x1ac>
 80041f2:	07df      	lsls	r7, r3, #31
 80041f4:	bf44      	itt	mi
 80041f6:	f043 0320 	orrmi.w	r3, r3, #32
 80041fa:	6023      	strmi	r3, [r4, #0]
 80041fc:	b91e      	cbnz	r6, 8004206 <_printf_i+0x196>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	f023 0320 	bic.w	r3, r3, #32
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	2310      	movs	r3, #16
 8004208:	e7b0      	b.n	800416c <_printf_i+0xfc>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	f043 0320 	orr.w	r3, r3, #32
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	2378      	movs	r3, #120	; 0x78
 8004214:	4828      	ldr	r0, [pc, #160]	; (80042b8 <_printf_i+0x248>)
 8004216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800421a:	e7e3      	b.n	80041e4 <_printf_i+0x174>
 800421c:	0659      	lsls	r1, r3, #25
 800421e:	bf48      	it	mi
 8004220:	b2b6      	uxthmi	r6, r6
 8004222:	e7e6      	b.n	80041f2 <_printf_i+0x182>
 8004224:	4615      	mov	r5, r2
 8004226:	e7bb      	b.n	80041a0 <_printf_i+0x130>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	6826      	ldr	r6, [r4, #0]
 800422c:	6961      	ldr	r1, [r4, #20]
 800422e:	1d18      	adds	r0, r3, #4
 8004230:	6028      	str	r0, [r5, #0]
 8004232:	0635      	lsls	r5, r6, #24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	d501      	bpl.n	800423c <_printf_i+0x1cc>
 8004238:	6019      	str	r1, [r3, #0]
 800423a:	e002      	b.n	8004242 <_printf_i+0x1d2>
 800423c:	0670      	lsls	r0, r6, #25
 800423e:	d5fb      	bpl.n	8004238 <_printf_i+0x1c8>
 8004240:	8019      	strh	r1, [r3, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	4615      	mov	r5, r2
 8004248:	e7ba      	b.n	80041c0 <_printf_i+0x150>
 800424a:	682b      	ldr	r3, [r5, #0]
 800424c:	1d1a      	adds	r2, r3, #4
 800424e:	602a      	str	r2, [r5, #0]
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	2100      	movs	r1, #0
 8004256:	4628      	mov	r0, r5
 8004258:	f7fb ffba 	bl	80001d0 <memchr>
 800425c:	b108      	cbz	r0, 8004262 <_printf_i+0x1f2>
 800425e:	1b40      	subs	r0, r0, r5
 8004260:	6060      	str	r0, [r4, #4]
 8004262:	6863      	ldr	r3, [r4, #4]
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	2300      	movs	r3, #0
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426c:	e7a8      	b.n	80041c0 <_printf_i+0x150>
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	462a      	mov	r2, r5
 8004272:	4649      	mov	r1, r9
 8004274:	4640      	mov	r0, r8
 8004276:	47d0      	blx	sl
 8004278:	3001      	adds	r0, #1
 800427a:	d0ab      	beq.n	80041d4 <_printf_i+0x164>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	079b      	lsls	r3, r3, #30
 8004280:	d413      	bmi.n	80042aa <_printf_i+0x23a>
 8004282:	68e0      	ldr	r0, [r4, #12]
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	4298      	cmp	r0, r3
 8004288:	bfb8      	it	lt
 800428a:	4618      	movlt	r0, r3
 800428c:	e7a4      	b.n	80041d8 <_printf_i+0x168>
 800428e:	2301      	movs	r3, #1
 8004290:	4632      	mov	r2, r6
 8004292:	4649      	mov	r1, r9
 8004294:	4640      	mov	r0, r8
 8004296:	47d0      	blx	sl
 8004298:	3001      	adds	r0, #1
 800429a:	d09b      	beq.n	80041d4 <_printf_i+0x164>
 800429c:	3501      	adds	r5, #1
 800429e:	68e3      	ldr	r3, [r4, #12]
 80042a0:	9903      	ldr	r1, [sp, #12]
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	42ab      	cmp	r3, r5
 80042a6:	dcf2      	bgt.n	800428e <_printf_i+0x21e>
 80042a8:	e7eb      	b.n	8004282 <_printf_i+0x212>
 80042aa:	2500      	movs	r5, #0
 80042ac:	f104 0619 	add.w	r6, r4, #25
 80042b0:	e7f5      	b.n	800429e <_printf_i+0x22e>
 80042b2:	bf00      	nop
 80042b4:	0800498d 	.word	0x0800498d
 80042b8:	0800499e 	.word	0x0800499e

080042bc <_sbrk_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4d06      	ldr	r5, [pc, #24]	; (80042d8 <_sbrk_r+0x1c>)
 80042c0:	2300      	movs	r3, #0
 80042c2:	4604      	mov	r4, r0
 80042c4:	4608      	mov	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fc feda 	bl	8001080 <_sbrk>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_sbrk_r+0x1a>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_sbrk_r+0x1a>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	200001bc 	.word	0x200001bc

080042dc <__sread>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	460c      	mov	r4, r1
 80042e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e4:	f000 fab2 	bl	800484c <_read_r>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	bfab      	itete	ge
 80042ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ee:	89a3      	ldrhlt	r3, [r4, #12]
 80042f0:	181b      	addge	r3, r3, r0
 80042f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042f6:	bfac      	ite	ge
 80042f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042fa:	81a3      	strhlt	r3, [r4, #12]
 80042fc:	bd10      	pop	{r4, pc}

080042fe <__swrite>:
 80042fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004302:	461f      	mov	r7, r3
 8004304:	898b      	ldrh	r3, [r1, #12]
 8004306:	05db      	lsls	r3, r3, #23
 8004308:	4605      	mov	r5, r0
 800430a:	460c      	mov	r4, r1
 800430c:	4616      	mov	r6, r2
 800430e:	d505      	bpl.n	800431c <__swrite+0x1e>
 8004310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004314:	2302      	movs	r3, #2
 8004316:	2200      	movs	r2, #0
 8004318:	f000 f9c8 	bl	80046ac <_lseek_r>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	4632      	mov	r2, r6
 800432a:	463b      	mov	r3, r7
 800432c:	4628      	mov	r0, r5
 800432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004332:	f000 b869 	b.w	8004408 <_write_r>

08004336 <__sseek>:
 8004336:	b510      	push	{r4, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433e:	f000 f9b5 	bl	80046ac <_lseek_r>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	bf15      	itete	ne
 8004348:	6560      	strne	r0, [r4, #84]	; 0x54
 800434a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800434e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004352:	81a3      	strheq	r3, [r4, #12]
 8004354:	bf18      	it	ne
 8004356:	81a3      	strhne	r3, [r4, #12]
 8004358:	bd10      	pop	{r4, pc}

0800435a <__sclose>:
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 b8d3 	b.w	8004508 <_close_r>
	...

08004364 <__swbuf_r>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	460e      	mov	r6, r1
 8004368:	4614      	mov	r4, r2
 800436a:	4605      	mov	r5, r0
 800436c:	b118      	cbz	r0, 8004376 <__swbuf_r+0x12>
 800436e:	6983      	ldr	r3, [r0, #24]
 8004370:	b90b      	cbnz	r3, 8004376 <__swbuf_r+0x12>
 8004372:	f7ff fb81 	bl	8003a78 <__sinit>
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <__swbuf_r+0x98>)
 8004378:	429c      	cmp	r4, r3
 800437a:	d12b      	bne.n	80043d4 <__swbuf_r+0x70>
 800437c:	686c      	ldr	r4, [r5, #4]
 800437e:	69a3      	ldr	r3, [r4, #24]
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	071a      	lsls	r2, r3, #28
 8004386:	d52f      	bpl.n	80043e8 <__swbuf_r+0x84>
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	b36b      	cbz	r3, 80043e8 <__swbuf_r+0x84>
 800438c:	6923      	ldr	r3, [r4, #16]
 800438e:	6820      	ldr	r0, [r4, #0]
 8004390:	1ac0      	subs	r0, r0, r3
 8004392:	6963      	ldr	r3, [r4, #20]
 8004394:	b2f6      	uxtb	r6, r6
 8004396:	4283      	cmp	r3, r0
 8004398:	4637      	mov	r7, r6
 800439a:	dc04      	bgt.n	80043a6 <__swbuf_r+0x42>
 800439c:	4621      	mov	r1, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f948 	bl	8004634 <_fflush_r>
 80043a4:	bb30      	cbnz	r0, 80043f4 <__swbuf_r+0x90>
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60a3      	str	r3, [r4, #8]
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	6022      	str	r2, [r4, #0]
 80043b2:	701e      	strb	r6, [r3, #0]
 80043b4:	6963      	ldr	r3, [r4, #20]
 80043b6:	3001      	adds	r0, #1
 80043b8:	4283      	cmp	r3, r0
 80043ba:	d004      	beq.n	80043c6 <__swbuf_r+0x62>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	07db      	lsls	r3, r3, #31
 80043c0:	d506      	bpl.n	80043d0 <__swbuf_r+0x6c>
 80043c2:	2e0a      	cmp	r6, #10
 80043c4:	d104      	bne.n	80043d0 <__swbuf_r+0x6c>
 80043c6:	4621      	mov	r1, r4
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f933 	bl	8004634 <_fflush_r>
 80043ce:	b988      	cbnz	r0, 80043f4 <__swbuf_r+0x90>
 80043d0:	4638      	mov	r0, r7
 80043d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <__swbuf_r+0x9c>)
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d101      	bne.n	80043de <__swbuf_r+0x7a>
 80043da:	68ac      	ldr	r4, [r5, #8]
 80043dc:	e7cf      	b.n	800437e <__swbuf_r+0x1a>
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <__swbuf_r+0xa0>)
 80043e0:	429c      	cmp	r4, r3
 80043e2:	bf08      	it	eq
 80043e4:	68ec      	ldreq	r4, [r5, #12]
 80043e6:	e7ca      	b.n	800437e <__swbuf_r+0x1a>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f81e 	bl	800442c <__swsetup_r>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d0cb      	beq.n	800438c <__swbuf_r+0x28>
 80043f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80043f8:	e7ea      	b.n	80043d0 <__swbuf_r+0x6c>
 80043fa:	bf00      	nop
 80043fc:	0800493c 	.word	0x0800493c
 8004400:	0800495c 	.word	0x0800495c
 8004404:	0800491c 	.word	0x0800491c

08004408 <_write_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d07      	ldr	r5, [pc, #28]	; (8004428 <_write_r+0x20>)
 800440c:	4604      	mov	r4, r0
 800440e:	4608      	mov	r0, r1
 8004410:	4611      	mov	r1, r2
 8004412:	2200      	movs	r2, #0
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f7fc f8ac 	bl	8000574 <_write>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_write_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_write_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	200001bc 	.word	0x200001bc

0800442c <__swsetup_r>:
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <__swsetup_r+0xcc>)
 800442e:	b570      	push	{r4, r5, r6, lr}
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	4606      	mov	r6, r0
 8004434:	460c      	mov	r4, r1
 8004436:	b125      	cbz	r5, 8004442 <__swsetup_r+0x16>
 8004438:	69ab      	ldr	r3, [r5, #24]
 800443a:	b913      	cbnz	r3, 8004442 <__swsetup_r+0x16>
 800443c:	4628      	mov	r0, r5
 800443e:	f7ff fb1b 	bl	8003a78 <__sinit>
 8004442:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <__swsetup_r+0xd0>)
 8004444:	429c      	cmp	r4, r3
 8004446:	d10f      	bne.n	8004468 <__swsetup_r+0x3c>
 8004448:	686c      	ldr	r4, [r5, #4]
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004450:	0719      	lsls	r1, r3, #28
 8004452:	d42c      	bmi.n	80044ae <__swsetup_r+0x82>
 8004454:	06dd      	lsls	r5, r3, #27
 8004456:	d411      	bmi.n	800447c <__swsetup_r+0x50>
 8004458:	2309      	movs	r3, #9
 800445a:	6033      	str	r3, [r6, #0]
 800445c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004466:	e03e      	b.n	80044e6 <__swsetup_r+0xba>
 8004468:	4b25      	ldr	r3, [pc, #148]	; (8004500 <__swsetup_r+0xd4>)
 800446a:	429c      	cmp	r4, r3
 800446c:	d101      	bne.n	8004472 <__swsetup_r+0x46>
 800446e:	68ac      	ldr	r4, [r5, #8]
 8004470:	e7eb      	b.n	800444a <__swsetup_r+0x1e>
 8004472:	4b24      	ldr	r3, [pc, #144]	; (8004504 <__swsetup_r+0xd8>)
 8004474:	429c      	cmp	r4, r3
 8004476:	bf08      	it	eq
 8004478:	68ec      	ldreq	r4, [r5, #12]
 800447a:	e7e6      	b.n	800444a <__swsetup_r+0x1e>
 800447c:	0758      	lsls	r0, r3, #29
 800447e:	d512      	bpl.n	80044a6 <__swsetup_r+0x7a>
 8004480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004482:	b141      	cbz	r1, 8004496 <__swsetup_r+0x6a>
 8004484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004488:	4299      	cmp	r1, r3
 800448a:	d002      	beq.n	8004492 <__swsetup_r+0x66>
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f991 	bl	80047b4 <_free_r>
 8004492:	2300      	movs	r3, #0
 8004494:	6363      	str	r3, [r4, #52]	; 0x34
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800449c:	81a3      	strh	r3, [r4, #12]
 800449e:	2300      	movs	r3, #0
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	b94b      	cbnz	r3, 80044c6 <__swsetup_r+0x9a>
 80044b2:	89a3      	ldrh	r3, [r4, #12]
 80044b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044bc:	d003      	beq.n	80044c6 <__swsetup_r+0x9a>
 80044be:	4621      	mov	r1, r4
 80044c0:	4630      	mov	r0, r6
 80044c2:	f000 f92b 	bl	800471c <__smakebuf_r>
 80044c6:	89a0      	ldrh	r0, [r4, #12]
 80044c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044cc:	f010 0301 	ands.w	r3, r0, #1
 80044d0:	d00a      	beq.n	80044e8 <__swsetup_r+0xbc>
 80044d2:	2300      	movs	r3, #0
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	6963      	ldr	r3, [r4, #20]
 80044d8:	425b      	negs	r3, r3
 80044da:	61a3      	str	r3, [r4, #24]
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	b943      	cbnz	r3, 80044f2 <__swsetup_r+0xc6>
 80044e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80044e4:	d1ba      	bne.n	800445c <__swsetup_r+0x30>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	0781      	lsls	r1, r0, #30
 80044ea:	bf58      	it	pl
 80044ec:	6963      	ldrpl	r3, [r4, #20]
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	e7f4      	b.n	80044dc <__swsetup_r+0xb0>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7f7      	b.n	80044e6 <__swsetup_r+0xba>
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	0800493c 	.word	0x0800493c
 8004500:	0800495c 	.word	0x0800495c
 8004504:	0800491c 	.word	0x0800491c

08004508 <_close_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_close_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc fd7f 	bl	8001016 <_close>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_close_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_close_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	200001bc 	.word	0x200001bc

08004528 <__sflush_r>:
 8004528:	898a      	ldrh	r2, [r1, #12]
 800452a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452e:	4605      	mov	r5, r0
 8004530:	0710      	lsls	r0, r2, #28
 8004532:	460c      	mov	r4, r1
 8004534:	d458      	bmi.n	80045e8 <__sflush_r+0xc0>
 8004536:	684b      	ldr	r3, [r1, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	dc05      	bgt.n	8004548 <__sflush_r+0x20>
 800453c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	dc02      	bgt.n	8004548 <__sflush_r+0x20>
 8004542:	2000      	movs	r0, #0
 8004544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800454a:	2e00      	cmp	r6, #0
 800454c:	d0f9      	beq.n	8004542 <__sflush_r+0x1a>
 800454e:	2300      	movs	r3, #0
 8004550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004554:	682f      	ldr	r7, [r5, #0]
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	d032      	beq.n	80045c0 <__sflush_r+0x98>
 800455a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	075a      	lsls	r2, r3, #29
 8004560:	d505      	bpl.n	800456e <__sflush_r+0x46>
 8004562:	6863      	ldr	r3, [r4, #4]
 8004564:	1ac0      	subs	r0, r0, r3
 8004566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004568:	b10b      	cbz	r3, 800456e <__sflush_r+0x46>
 800456a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800456c:	1ac0      	subs	r0, r0, r3
 800456e:	2300      	movs	r3, #0
 8004570:	4602      	mov	r2, r0
 8004572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004574:	6a21      	ldr	r1, [r4, #32]
 8004576:	4628      	mov	r0, r5
 8004578:	47b0      	blx	r6
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	d106      	bne.n	800458e <__sflush_r+0x66>
 8004580:	6829      	ldr	r1, [r5, #0]
 8004582:	291d      	cmp	r1, #29
 8004584:	d82c      	bhi.n	80045e0 <__sflush_r+0xb8>
 8004586:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <__sflush_r+0x108>)
 8004588:	40ca      	lsrs	r2, r1
 800458a:	07d6      	lsls	r6, r2, #31
 800458c:	d528      	bpl.n	80045e0 <__sflush_r+0xb8>
 800458e:	2200      	movs	r2, #0
 8004590:	6062      	str	r2, [r4, #4]
 8004592:	04d9      	lsls	r1, r3, #19
 8004594:	6922      	ldr	r2, [r4, #16]
 8004596:	6022      	str	r2, [r4, #0]
 8004598:	d504      	bpl.n	80045a4 <__sflush_r+0x7c>
 800459a:	1c42      	adds	r2, r0, #1
 800459c:	d101      	bne.n	80045a2 <__sflush_r+0x7a>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	b903      	cbnz	r3, 80045a4 <__sflush_r+0x7c>
 80045a2:	6560      	str	r0, [r4, #84]	; 0x54
 80045a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045a6:	602f      	str	r7, [r5, #0]
 80045a8:	2900      	cmp	r1, #0
 80045aa:	d0ca      	beq.n	8004542 <__sflush_r+0x1a>
 80045ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b0:	4299      	cmp	r1, r3
 80045b2:	d002      	beq.n	80045ba <__sflush_r+0x92>
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f8fd 	bl	80047b4 <_free_r>
 80045ba:	2000      	movs	r0, #0
 80045bc:	6360      	str	r0, [r4, #52]	; 0x34
 80045be:	e7c1      	b.n	8004544 <__sflush_r+0x1c>
 80045c0:	6a21      	ldr	r1, [r4, #32]
 80045c2:	2301      	movs	r3, #1
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b0      	blx	r6
 80045c8:	1c41      	adds	r1, r0, #1
 80045ca:	d1c7      	bne.n	800455c <__sflush_r+0x34>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0c4      	beq.n	800455c <__sflush_r+0x34>
 80045d2:	2b1d      	cmp	r3, #29
 80045d4:	d001      	beq.n	80045da <__sflush_r+0xb2>
 80045d6:	2b16      	cmp	r3, #22
 80045d8:	d101      	bne.n	80045de <__sflush_r+0xb6>
 80045da:	602f      	str	r7, [r5, #0]
 80045dc:	e7b1      	b.n	8004542 <__sflush_r+0x1a>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e4:	81a3      	strh	r3, [r4, #12]
 80045e6:	e7ad      	b.n	8004544 <__sflush_r+0x1c>
 80045e8:	690f      	ldr	r7, [r1, #16]
 80045ea:	2f00      	cmp	r7, #0
 80045ec:	d0a9      	beq.n	8004542 <__sflush_r+0x1a>
 80045ee:	0793      	lsls	r3, r2, #30
 80045f0:	680e      	ldr	r6, [r1, #0]
 80045f2:	bf08      	it	eq
 80045f4:	694b      	ldreq	r3, [r1, #20]
 80045f6:	600f      	str	r7, [r1, #0]
 80045f8:	bf18      	it	ne
 80045fa:	2300      	movne	r3, #0
 80045fc:	eba6 0807 	sub.w	r8, r6, r7
 8004600:	608b      	str	r3, [r1, #8]
 8004602:	f1b8 0f00 	cmp.w	r8, #0
 8004606:	dd9c      	ble.n	8004542 <__sflush_r+0x1a>
 8004608:	6a21      	ldr	r1, [r4, #32]
 800460a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800460c:	4643      	mov	r3, r8
 800460e:	463a      	mov	r2, r7
 8004610:	4628      	mov	r0, r5
 8004612:	47b0      	blx	r6
 8004614:	2800      	cmp	r0, #0
 8004616:	dc06      	bgt.n	8004626 <__sflush_r+0xfe>
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004624:	e78e      	b.n	8004544 <__sflush_r+0x1c>
 8004626:	4407      	add	r7, r0
 8004628:	eba8 0800 	sub.w	r8, r8, r0
 800462c:	e7e9      	b.n	8004602 <__sflush_r+0xda>
 800462e:	bf00      	nop
 8004630:	20400001 	.word	0x20400001

08004634 <_fflush_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	690b      	ldr	r3, [r1, #16]
 8004638:	4605      	mov	r5, r0
 800463a:	460c      	mov	r4, r1
 800463c:	b913      	cbnz	r3, 8004644 <_fflush_r+0x10>
 800463e:	2500      	movs	r5, #0
 8004640:	4628      	mov	r0, r5
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	b118      	cbz	r0, 800464e <_fflush_r+0x1a>
 8004646:	6983      	ldr	r3, [r0, #24]
 8004648:	b90b      	cbnz	r3, 800464e <_fflush_r+0x1a>
 800464a:	f7ff fa15 	bl	8003a78 <__sinit>
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <_fflush_r+0x6c>)
 8004650:	429c      	cmp	r4, r3
 8004652:	d11b      	bne.n	800468c <_fflush_r+0x58>
 8004654:	686c      	ldr	r4, [r5, #4]
 8004656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ef      	beq.n	800463e <_fflush_r+0xa>
 800465e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004660:	07d0      	lsls	r0, r2, #31
 8004662:	d404      	bmi.n	800466e <_fflush_r+0x3a>
 8004664:	0599      	lsls	r1, r3, #22
 8004666:	d402      	bmi.n	800466e <_fflush_r+0x3a>
 8004668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800466a:	f7ff faa3 	bl	8003bb4 <__retarget_lock_acquire_recursive>
 800466e:	4628      	mov	r0, r5
 8004670:	4621      	mov	r1, r4
 8004672:	f7ff ff59 	bl	8004528 <__sflush_r>
 8004676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004678:	07da      	lsls	r2, r3, #31
 800467a:	4605      	mov	r5, r0
 800467c:	d4e0      	bmi.n	8004640 <_fflush_r+0xc>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	059b      	lsls	r3, r3, #22
 8004682:	d4dd      	bmi.n	8004640 <_fflush_r+0xc>
 8004684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004686:	f7ff fa96 	bl	8003bb6 <__retarget_lock_release_recursive>
 800468a:	e7d9      	b.n	8004640 <_fflush_r+0xc>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <_fflush_r+0x70>)
 800468e:	429c      	cmp	r4, r3
 8004690:	d101      	bne.n	8004696 <_fflush_r+0x62>
 8004692:	68ac      	ldr	r4, [r5, #8]
 8004694:	e7df      	b.n	8004656 <_fflush_r+0x22>
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <_fflush_r+0x74>)
 8004698:	429c      	cmp	r4, r3
 800469a:	bf08      	it	eq
 800469c:	68ec      	ldreq	r4, [r5, #12]
 800469e:	e7da      	b.n	8004656 <_fflush_r+0x22>
 80046a0:	0800493c 	.word	0x0800493c
 80046a4:	0800495c 	.word	0x0800495c
 80046a8:	0800491c 	.word	0x0800491c

080046ac <_lseek_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d07      	ldr	r5, [pc, #28]	; (80046cc <_lseek_r+0x20>)
 80046b0:	4604      	mov	r4, r0
 80046b2:	4608      	mov	r0, r1
 80046b4:	4611      	mov	r1, r2
 80046b6:	2200      	movs	r2, #0
 80046b8:	602a      	str	r2, [r5, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f7fc fcd2 	bl	8001064 <_lseek>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_lseek_r+0x1e>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_lseek_r+0x1e>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	200001bc 	.word	0x200001bc

080046d0 <__swhatbuf_r>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	460e      	mov	r6, r1
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	2900      	cmp	r1, #0
 80046da:	b096      	sub	sp, #88	; 0x58
 80046dc:	4614      	mov	r4, r2
 80046de:	461d      	mov	r5, r3
 80046e0:	da08      	bge.n	80046f4 <__swhatbuf_r+0x24>
 80046e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	602a      	str	r2, [r5, #0]
 80046ea:	061a      	lsls	r2, r3, #24
 80046ec:	d410      	bmi.n	8004710 <__swhatbuf_r+0x40>
 80046ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f2:	e00e      	b.n	8004712 <__swhatbuf_r+0x42>
 80046f4:	466a      	mov	r2, sp
 80046f6:	f000 f8bb 	bl	8004870 <_fstat_r>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	dbf1      	blt.n	80046e2 <__swhatbuf_r+0x12>
 80046fe:	9a01      	ldr	r2, [sp, #4]
 8004700:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004704:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004708:	425a      	negs	r2, r3
 800470a:	415a      	adcs	r2, r3
 800470c:	602a      	str	r2, [r5, #0]
 800470e:	e7ee      	b.n	80046ee <__swhatbuf_r+0x1e>
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	2000      	movs	r0, #0
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	b016      	add	sp, #88	; 0x58
 8004718:	bd70      	pop	{r4, r5, r6, pc}
	...

0800471c <__smakebuf_r>:
 800471c:	898b      	ldrh	r3, [r1, #12]
 800471e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004720:	079d      	lsls	r5, r3, #30
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	d507      	bpl.n	8004738 <__smakebuf_r+0x1c>
 8004728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	6123      	str	r3, [r4, #16]
 8004730:	2301      	movs	r3, #1
 8004732:	6163      	str	r3, [r4, #20]
 8004734:	b002      	add	sp, #8
 8004736:	bd70      	pop	{r4, r5, r6, pc}
 8004738:	ab01      	add	r3, sp, #4
 800473a:	466a      	mov	r2, sp
 800473c:	f7ff ffc8 	bl	80046d0 <__swhatbuf_r>
 8004740:	9900      	ldr	r1, [sp, #0]
 8004742:	4605      	mov	r5, r0
 8004744:	4630      	mov	r0, r6
 8004746:	f7ff fa57 	bl	8003bf8 <_malloc_r>
 800474a:	b948      	cbnz	r0, 8004760 <__smakebuf_r+0x44>
 800474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d4ef      	bmi.n	8004734 <__smakebuf_r+0x18>
 8004754:	f023 0303 	bic.w	r3, r3, #3
 8004758:	f043 0302 	orr.w	r3, r3, #2
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	e7e3      	b.n	8004728 <__smakebuf_r+0xc>
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <__smakebuf_r+0x7c>)
 8004762:	62b3      	str	r3, [r6, #40]	; 0x28
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	6020      	str	r0, [r4, #0]
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	9b00      	ldr	r3, [sp, #0]
 8004770:	6163      	str	r3, [r4, #20]
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	6120      	str	r0, [r4, #16]
 8004776:	b15b      	cbz	r3, 8004790 <__smakebuf_r+0x74>
 8004778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f889 	bl	8004894 <_isatty_r>
 8004782:	b128      	cbz	r0, 8004790 <__smakebuf_r+0x74>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	89a0      	ldrh	r0, [r4, #12]
 8004792:	4305      	orrs	r5, r0
 8004794:	81a5      	strh	r5, [r4, #12]
 8004796:	e7cd      	b.n	8004734 <__smakebuf_r+0x18>
 8004798:	08003a11 	.word	0x08003a11

0800479c <__malloc_lock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_lock+0x8>)
 800479e:	f7ff ba09 	b.w	8003bb4 <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	200001b0 	.word	0x200001b0

080047a8 <__malloc_unlock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_unlock+0x8>)
 80047aa:	f7ff ba04 	b.w	8003bb6 <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	200001b0 	.word	0x200001b0

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d044      	beq.n	8004844 <_free_r+0x90>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f7ff ffe7 	bl	800479c <__malloc_lock>
 80047ce:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	b933      	cbnz	r3, 80047e4 <_free_r+0x30>
 80047d6:	6063      	str	r3, [r4, #4]
 80047d8:	6014      	str	r4, [r2, #0]
 80047da:	b003      	add	sp, #12
 80047dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e0:	f7ff bfe2 	b.w	80047a8 <__malloc_unlock>
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d908      	bls.n	80047fa <_free_r+0x46>
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	1961      	adds	r1, r4, r5
 80047ec:	428b      	cmp	r3, r1
 80047ee:	bf01      	itttt	eq
 80047f0:	6819      	ldreq	r1, [r3, #0]
 80047f2:	685b      	ldreq	r3, [r3, #4]
 80047f4:	1949      	addeq	r1, r1, r5
 80047f6:	6021      	streq	r1, [r4, #0]
 80047f8:	e7ed      	b.n	80047d6 <_free_r+0x22>
 80047fa:	461a      	mov	r2, r3
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b10b      	cbz	r3, 8004804 <_free_r+0x50>
 8004800:	42a3      	cmp	r3, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x46>
 8004804:	6811      	ldr	r1, [r2, #0]
 8004806:	1855      	adds	r5, r2, r1
 8004808:	42a5      	cmp	r5, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x70>
 800480c:	6824      	ldr	r4, [r4, #0]
 800480e:	4421      	add	r1, r4
 8004810:	1854      	adds	r4, r2, r1
 8004812:	42a3      	cmp	r3, r4
 8004814:	6011      	str	r1, [r2, #0]
 8004816:	d1e0      	bne.n	80047da <_free_r+0x26>
 8004818:	681c      	ldr	r4, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	6053      	str	r3, [r2, #4]
 800481e:	4421      	add	r1, r4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	e7da      	b.n	80047da <_free_r+0x26>
 8004824:	d902      	bls.n	800482c <_free_r+0x78>
 8004826:	230c      	movs	r3, #12
 8004828:	6003      	str	r3, [r0, #0]
 800482a:	e7d6      	b.n	80047da <_free_r+0x26>
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	1961      	adds	r1, r4, r5
 8004830:	428b      	cmp	r3, r1
 8004832:	bf04      	itt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	6054      	str	r4, [r2, #4]
 8004842:	e7ca      	b.n	80047da <_free_r+0x26>
 8004844:	b003      	add	sp, #12
 8004846:	bd30      	pop	{r4, r5, pc}
 8004848:	200001b4 	.word	0x200001b4

0800484c <_read_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d07      	ldr	r5, [pc, #28]	; (800486c <_read_r+0x20>)
 8004850:	4604      	mov	r4, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	602a      	str	r2, [r5, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f7fc fbbe 	bl	8000fdc <_read>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_read_r+0x1e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_read_r+0x1e>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	200001bc 	.word	0x200001bc

08004870 <_fstat_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4d07      	ldr	r5, [pc, #28]	; (8004890 <_fstat_r+0x20>)
 8004874:	2300      	movs	r3, #0
 8004876:	4604      	mov	r4, r0
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	f7fc fbd6 	bl	800102e <_fstat>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d102      	bne.n	800488c <_fstat_r+0x1c>
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	b103      	cbz	r3, 800488c <_fstat_r+0x1c>
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	bd38      	pop	{r3, r4, r5, pc}
 800488e:	bf00      	nop
 8004890:	200001bc 	.word	0x200001bc

08004894 <_isatty_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_isatty_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc fbd5 	bl	800104e <_isatty>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_isatty_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_isatty_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	200001bc 	.word	0x200001bc

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
