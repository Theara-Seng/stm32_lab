
I2C_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007988  08007988  00017988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da4  08007da4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000184  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef0c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e6  00000000  00000000  0002f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  00031f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220a3  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001113f  00000000  00000000  00054cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca294  00000000  00000000  00065e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130096  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  001300e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007970 	.word	0x08007970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007970 	.word	0x08007970

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <_write>:
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
uint32_t _write(int file, char* p, int len){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, p, len, 10);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <_write+0x24>)
 8000f62:	f003 fc2f 	bl	80047c4 <HAL_UART_Transmit>
	return len;
 8000f66:	687b      	ldr	r3, [r7, #4]

}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002ec 	.word	0x200002ec

08000f74 <PMU6050_Init>:
int16_t Accel_Y_RAW_DATA = 0;
int16_t Accel_Z_RAW_DATA = 0;

float Ax, Ay, Az;

void PMU6050_Init(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
    uint8_t check_val, sendData;
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, who_i_am, 1, &check_val, 1, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2275      	movs	r2, #117	; 0x75
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <PMU6050_Init+0xa8>)
 8000f90:	f001 fb48 	bl	8002624 <HAL_I2C_Mem_Read>
    if(check_val == 104){
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b68      	cmp	r3, #104	; 0x68
 8000f98:	d13b      	bne.n	8001012 <PMU6050_Init+0x9e>
        sendData = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, pwr_mgmt_1_register, 1, &sendData, 1, 1000);
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	226b      	movs	r2, #107	; 0x6b
 8000fb0:	21d0      	movs	r1, #208	; 0xd0
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <PMU6050_Init+0xa8>)
 8000fb4:	f001 fa3c 	bl	8002430 <HAL_I2C_Mem_Write>
	sendData = 0x07;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, smplrt_dv_register, 1, &sendData, 1, 1000);
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1dbb      	adds	r3, r7, #6
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2219      	movs	r2, #25
 8000fce:	21d0      	movs	r1, #208	; 0xd0
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <PMU6050_Init+0xa8>)
 8000fd2:	f001 fa2d 	bl	8002430 <HAL_I2C_Mem_Write>
	sendData = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, gyro_comfig_register, 1, &sendData, 1, 1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	221b      	movs	r2, #27
 8000fec:	21d0      	movs	r1, #208	; 0xd0
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <PMU6050_Init+0xa8>)
 8000ff0:	f001 fa1e 	bl	8002430 <HAL_I2C_Mem_Write>
	sendData = 0x00;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, accel_config_register, 1, &sendData, 1, 1000);
 8000ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	221c      	movs	r2, #28
 800100a:	21d0      	movs	r1, #208	; 0xd0
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <PMU6050_Init+0xa8>)
 800100e:	f001 fa0f 	bl	8002430 <HAL_I2C_Mem_Write>
    }
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f8 	.word	0x200001f8

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fd8d 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f8b1 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f9d7 	bl	80013e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001032:	f000 f917 	bl	8001264 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001036:	f000 f943 	bl	80012c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800103a:	f000 f971 	bl	8001320 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f9a5 	bl	800138c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PMU6050_Init();
 8001042:	f7ff ff97 	bl	8000f74 <PMU6050_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	      HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, accel_x_out_h_register, 1, Receive_Data, 6, 1000);
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2306      	movs	r3, #6
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4b43      	ldr	r3, [pc, #268]	; (8001160 <main+0x140>)
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	223b      	movs	r2, #59	; 0x3b
 8001058:	21d0      	movs	r1, #208	; 0xd0
 800105a:	4842      	ldr	r0, [pc, #264]	; (8001164 <main+0x144>)
 800105c:	f001 fae2 	bl	8002624 <HAL_I2C_Mem_Read>
	      Accel_X_RAW_DATA = (int16_t)(Receive_Data[0] << 8 | Receive_Data [1]);
 8001060:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <main+0x140>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <main+0x140>)
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <main+0x148>)
 8001074:	801a      	strh	r2, [r3, #0]
	      Accel_Y_RAW_DATA = (int16_t)(Receive_Data[2] << 8 | Receive_Data [3]);
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <main+0x140>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <main+0x140>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <main+0x14c>)
 800108a:	801a      	strh	r2, [r3, #0]
	      Accel_Z_RAW_DATA = (int16_t)(Receive_Data[4] << 8 | Receive_Data [5]);
 800108c:	4b34      	ldr	r3, [pc, #208]	; (8001160 <main+0x140>)
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <main+0x140>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <main+0x150>)
 80010a0:	801a      	strh	r2, [r3, #0]

	      Ax = Accel_X_RAW_DATA/16384.0;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <main+0x148>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa3b 	bl	8000524 <__aeabi_i2d>
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <main+0x154>)
 80010b4:	f7ff fbca 	bl	800084c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fd72 	bl	8000ba8 <__aeabi_d2f>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a2c      	ldr	r2, [pc, #176]	; (8001178 <main+0x158>)
 80010c8:	6013      	str	r3, [r2, #0]
	      Ay = Accel_Y_RAW_DATA/16384.0;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <main+0x14c>)
 80010cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa27 	bl	8000524 <__aeabi_i2d>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <main+0x154>)
 80010dc:	f7ff fbb6 	bl	800084c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd5e 	bl	8000ba8 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <main+0x15c>)
 80010f0:	6013      	str	r3, [r2, #0]
	      Az = Accel_Z_RAW_DATA/16384.0;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <main+0x150>)
 80010f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa13 	bl	8000524 <__aeabi_i2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <main+0x154>)
 8001104:	f7ff fba2 	bl	800084c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd4a 	bl	8000ba8 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <main+0x160>)
 8001118:	6013      	str	r3, [r2, #0]
	      printf("A`CC_X=%f",Ax );
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <main+0x158>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa12 	bl	8000548 <__aeabi_f2d>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <main+0x164>)
 800112a:	f004 fb5b 	bl	80057e4 <iprintf>
	      printf("ACC_y=%f",Ay );
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <main+0x15c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4812      	ldr	r0, [pc, #72]	; (8001188 <main+0x168>)
 800113e:	f004 fb51 	bl	80057e4 <iprintf>
	      printf("ACC_z=%f\n",Az );
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <main+0x160>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9fe 	bl	8000548 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <main+0x16c>)
 8001152:	f004 fb47 	bl	80057e4 <iprintf>
	      HAL_Delay(1000);
 8001156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800115a:	f000 fd65 	bl	8001c28 <HAL_Delay>
	      HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDRESS, accel_x_out_h_register, 1, Receive_Data, 6, 1000);
 800115e:	e772      	b.n	8001046 <main+0x26>
 8001160:	20000330 	.word	0x20000330
 8001164:	200001f8 	.word	0x200001f8
 8001168:	20000336 	.word	0x20000336
 800116c:	20000338 	.word	0x20000338
 8001170:	2000033a 	.word	0x2000033a
 8001174:	40d00000 	.word	0x40d00000
 8001178:	2000033c 	.word	0x2000033c
 800117c:	20000340 	.word	0x20000340
 8001180:	20000344 	.word	0x20000344
 8001184:	08007988 	.word	0x08007988
 8001188:	08007994 	.word	0x08007994
 800118c:	080079a0 	.word	0x080079a0

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	; 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2230      	movs	r2, #48	; 0x30
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 feae 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <SystemClock_Config+0xcc>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	; 0x40
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <SystemClock_Config+0xd0>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f6:	2302      	movs	r3, #2
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001200:	2308      	movs	r3, #8
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001204:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800120e:	2307      	movs	r3, #7
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fc26 	bl	8003a68 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001222:	f000 f9f9 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001232:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2105      	movs	r1, #5
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fe87 	bl	8003f58 <HAL_RCC_ClockConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001250:	f000 f9e2 	bl	8001618 <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3750      	adds	r7, #80	; 0x50
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f000 ff81 	bl	80021a8 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 f9b4 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001f8 	.word	0x200001f8
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_I2S3_Init+0x54>)
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <MX_I2S3_Init+0x58>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2S3_Init+0x54>)
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_I2S3_Init+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_I2S3_Init+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_I2S3_Init+0x54>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_I2S3_Init+0x54>)
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <MX_I2S3_Init+0x5c>)
 80012ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_I2S3_Init+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_I2S3_Init+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_I2S3_Init+0x54>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_I2S3_Init+0x54>)
 8001300:	f001 ff12 	bl	8003128 <HAL_I2S_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800130a:	f000 f985 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000024c 	.word	0x2000024c
 8001318:	40003c00 	.word	0x40003c00
 800131c:	00017700 	.word	0x00017700

08001320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_SPI1_Init+0x64>)
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <MX_SPI1_Init+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_SPI1_Init+0x64>)
 800132c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_SPI1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_SPI1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_SPI1_Init+0x64>)
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SPI1_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <MX_SPI1_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SPI1_Init+0x64>)
 800136c:	220a      	movs	r2, #10
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <MX_SPI1_Init+0x64>)
 8001372:	f003 f951 	bl	8004618 <HAL_SPI_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800137c:	f000 f94c 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000294 	.word	0x20000294
 8001388:	40013000 	.word	0x40013000

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f003 f9b1 	bl	800472a <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 f923 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002ec 	.word	0x200002ec
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <MX_GPIO_Init+0x220>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a80      	ldr	r2, [pc, #512]	; (8001600 <MX_GPIO_Init+0x220>)
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <MX_GPIO_Init+0x220>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b7a      	ldr	r3, [pc, #488]	; (8001600 <MX_GPIO_Init+0x220>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a79      	ldr	r2, [pc, #484]	; (8001600 <MX_GPIO_Init+0x220>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <MX_GPIO_Init+0x220>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	4b73      	ldr	r3, [pc, #460]	; (8001600 <MX_GPIO_Init+0x220>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a72      	ldr	r2, [pc, #456]	; (8001600 <MX_GPIO_Init+0x220>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b70      	ldr	r3, [pc, #448]	; (8001600 <MX_GPIO_Init+0x220>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <MX_GPIO_Init+0x220>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a6b      	ldr	r2, [pc, #428]	; (8001600 <MX_GPIO_Init+0x220>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b69      	ldr	r3, [pc, #420]	; (8001600 <MX_GPIO_Init+0x220>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <MX_GPIO_Init+0x220>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <MX_GPIO_Init+0x220>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <MX_GPIO_Init+0x220>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <MX_GPIO_Init+0x220>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a5d      	ldr	r2, [pc, #372]	; (8001600 <MX_GPIO_Init+0x220>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <MX_GPIO_Init+0x220>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2108      	movs	r1, #8
 80014a2:	4858      	ldr	r0, [pc, #352]	; (8001604 <MX_GPIO_Init+0x224>)
 80014a4:	f000 fe66 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2101      	movs	r1, #1
 80014ac:	4856      	ldr	r0, [pc, #344]	; (8001608 <MX_GPIO_Init+0x228>)
 80014ae:	f000 fe61 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014b2:	2200      	movs	r2, #0
 80014b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014b8:	4854      	ldr	r0, [pc, #336]	; (800160c <MX_GPIO_Init+0x22c>)
 80014ba:	f000 fe5b 	bl	8002174 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014be:	2308      	movs	r3, #8
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	484b      	ldr	r0, [pc, #300]	; (8001604 <MX_GPIO_Init+0x224>)
 80014d6:	f000 fcb1 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014da:	2301      	movs	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4845      	ldr	r0, [pc, #276]	; (8001608 <MX_GPIO_Init+0x228>)
 80014f2:	f000 fca3 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014f6:	2308      	movs	r3, #8
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001506:	2305      	movs	r3, #5
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	483d      	ldr	r0, [pc, #244]	; (8001608 <MX_GPIO_Init+0x228>)
 8001512:	f000 fc93 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800151a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4839      	ldr	r0, [pc, #228]	; (8001610 <MX_GPIO_Init+0x230>)
 800152c:	f000 fc86 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001530:	2304      	movs	r3, #4
 8001532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4834      	ldr	r0, [pc, #208]	; (8001614 <MX_GPIO_Init+0x234>)
 8001544:	f000 fc7a 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155a:	2305      	movs	r3, #5
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	482b      	ldr	r0, [pc, #172]	; (8001614 <MX_GPIO_Init+0x234>)
 8001566:	f000 fc69 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800156a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800156e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_GPIO_Init+0x22c>)
 8001584:	f000 fc5a 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_GPIO_Init+0x230>)
 800159e:	f000 fc4d 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80015a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015b4:	230a      	movs	r3, #10
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4814      	ldr	r0, [pc, #80]	; (8001610 <MX_GPIO_Init+0x230>)
 80015c0:	f000 fc3c 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015c4:	2320      	movs	r3, #32
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_GPIO_Init+0x22c>)
 80015d8:	f000 fc30 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_GPIO_Init+0x224>)
 80015f2:	f000 fc23 	bl	8001e3c <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	; 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40021000 	.word	0x40021000
 8001608:	40020800 	.word	0x40020800
 800160c:	40020c00 	.word	0x40020c00
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001662:	2007      	movs	r0, #7
 8001664:	f000 fbb6 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_I2C_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_I2C_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c4:	2304      	movs	r3, #4
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <HAL_I2C_MspInit+0x8c>)
 80016d0:	f000 fbb4 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e2:	6413      	str	r3, [r2, #64]	; 0x40
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400

08001704 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a31      	ldr	r2, [pc, #196]	; (80017f4 <HAL_I2S_MspInit+0xf0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d15a      	bne.n	80017ea <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001734:	2301      	movs	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001738:	23c0      	movs	r3, #192	; 0xc0
 800173a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fe27 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001750:	f7ff ff62 	bl	8001618 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 800175e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_I2S_MspInit+0xf4>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017a8:	2310      	movs	r3, #16
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b8:	2306      	movs	r3, #6
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <HAL_I2S_MspInit+0xf8>)
 80017c4:	f000 fb3a 	bl	8001e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017da:	2306      	movs	r3, #6
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <HAL_I2S_MspInit+0xfc>)
 80017e6:	f000 fb29 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	; 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40003c00 	.word	0x40003c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020800 	.word	0x40020800

08001804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_SPI_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_SPI_MspInit+0x88>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_SPI_MspInit+0x88>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_SPI_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_SPI_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_SPI_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_SPI_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800185e:	23e0      	movs	r3, #224	; 0xe0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186e:	2305      	movs	r3, #5
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_SPI_MspInit+0x8c>)
 800187a:	f000 fadf 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013000 	.word	0x40013000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_UART_MspInit+0x84>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12b      	bne.n	800190e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_UART_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <HAL_UART_MspInit+0x88>)
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_UART_MspInit+0x88>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_UART_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_UART_MspInit+0x88>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_UART_MspInit+0x88>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ee:	230c      	movs	r3, #12
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018fe:	2307      	movs	r3, #7
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <HAL_UART_MspInit+0x8c>)
 800190a:	f000 fa97 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40004400 	.word	0x40004400
 800191c:	40023800 	.word	0x40023800
 8001920:	40020000 	.word	0x40020000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f93a 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001992:	f003 fa8b 	bl	8004eac <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0x12>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
  }

  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_isatty>:

int _isatty(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f003 fa0c 	bl	8004eac <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20020000 	.word	0x20020000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	20000348 	.word	0x20000348
 8001ac8:	20000360 	.word	0x20000360

08001acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <SystemInit+0x20>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <SystemInit+0x20>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af6:	490e      	ldr	r1, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b0c:	4c0b      	ldr	r4, [pc, #44]	; (8001b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b1a:	f7ff ffd7 	bl	8001acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f003 f9cb 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b22:	f7ff fa7d 	bl	8001020 <main>
  bx  lr    
 8001b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b30:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b34:	08007dac 	.word	0x08007dac
  ldr r2, =_sbss
 8001b38:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b3c:	20000360 	.word	0x20000360

08001b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f931 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fd54 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f93b 	bl	8001e22 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bc4:	f000 f911 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	2000034c 	.word	0x2000034c

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000034c 	.word	0x2000034c

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff47 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5c 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e16b      	b.n	8002130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 815a 	bne.w	800212a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80b4 	beq.w	800212a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a5f      	ldr	r2, [pc, #380]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a5b      	ldr	r2, [pc, #364]	; (800214c <HAL_GPIO_Init+0x310>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_GPIO_Init+0x314>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d02b      	beq.n	8002062 <HAL_GPIO_Init+0x226>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x318>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d025      	beq.n	800205e <HAL_GPIO_Init+0x222>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_GPIO_Init+0x31c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01f      	beq.n	800205a <HAL_GPIO_Init+0x21e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x320>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x324>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_GPIO_Init+0x328>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x212>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_GPIO_Init+0x32c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x330>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x20a>
 8002042:	2307      	movs	r3, #7
 8002044:	e00e      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002046:	2308      	movs	r3, #8
 8002048:	e00c      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204a:	2306      	movs	r3, #6
 800204c:	e00a      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800204e:	2305      	movs	r3, #5
 8002050:	e008      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002052:	2304      	movs	r3, #4
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002056:	2303      	movs	r3, #3
 8002058:	e004      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205a:	2302      	movs	r3, #2
 800205c:	e002      	b.n	8002064 <HAL_GPIO_Init+0x228>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_GPIO_Init+0x228>
 8002062:	2300      	movs	r3, #0
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	f002 0203 	and.w	r2, r2, #3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4093      	lsls	r3, r2
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002074:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_GPIO_Init+0x310>)
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_GPIO_Init+0x334>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a6:	4a32      	ldr	r2, [pc, #200]	; (8002170 <HAL_GPIO_Init+0x334>)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_GPIO_Init+0x334>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <HAL_GPIO_Init+0x334>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_GPIO_Init+0x334>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fa:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_GPIO_Init+0x334>)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_GPIO_Init+0x334>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_GPIO_Init+0x334>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	f67f ae90 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	40013800 	.word	0x40013800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020400 	.word	0x40020400
 8002158:	40020800 	.word	0x40020800
 800215c:	40020c00 	.word	0x40020c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40021400 	.word	0x40021400
 8002168:	40021800 	.word	0x40021800
 800216c:	40021c00 	.word	0x40021c00
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e12b      	b.n	8002412 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff fa50 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800220c:	f002 f89c 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a81      	ldr	r2, [pc, #516]	; (800241c <HAL_I2C_Init+0x274>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d807      	bhi.n	800222c <HAL_I2C_Init+0x84>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4a80      	ldr	r2, [pc, #512]	; (8002420 <HAL_I2C_Init+0x278>)
 8002220:	4293      	cmp	r3, r2
 8002222:	bf94      	ite	ls
 8002224:	2301      	movls	r3, #1
 8002226:	2300      	movhi	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e006      	b.n	800223a <HAL_I2C_Init+0x92>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a7d      	ldr	r2, [pc, #500]	; (8002424 <HAL_I2C_Init+0x27c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e7      	b.n	8002412 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a78      	ldr	r2, [pc, #480]	; (8002428 <HAL_I2C_Init+0x280>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0c9b      	lsrs	r3, r3, #18
 800224c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a6a      	ldr	r2, [pc, #424]	; (800241c <HAL_I2C_Init+0x274>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d802      	bhi.n	800227c <HAL_I2C_Init+0xd4>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3301      	adds	r3, #1
 800227a:	e009      	b.n	8002290 <HAL_I2C_Init+0xe8>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	4a69      	ldr	r2, [pc, #420]	; (800242c <HAL_I2C_Init+0x284>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	3301      	adds	r3, #1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	495c      	ldr	r1, [pc, #368]	; (800241c <HAL_I2C_Init+0x274>)
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d819      	bhi.n	80022e4 <HAL_I2C_Init+0x13c>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e59      	subs	r1, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022c4:	400b      	ands	r3, r1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_I2C_Init+0x138>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e59      	subs	r1, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022de:	e051      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e0:	2304      	movs	r3, #4
 80022e2:	e04f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d111      	bne.n	8002310 <HAL_I2C_Init+0x168>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e012      	b.n	8002336 <HAL_I2C_Init+0x18e>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e58      	subs	r0, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	0099      	lsls	r1, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Init+0x196>
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10e      	bne.n	8002364 <HAL_I2C_Init+0x1bc>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e58      	subs	r0, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6859      	ldr	r1, [r3, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	440b      	add	r3, r1
 8002354:	fbb0 f3f3 	udiv	r3, r0, r3
 8002358:	3301      	adds	r3, #1
 800235a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002362:	e00f      	b.n	8002384 <HAL_I2C_Init+0x1dc>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	6809      	ldr	r1, [r1, #0]
 8002388:	4313      	orrs	r3, r2
 800238a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6911      	ldr	r1, [r2, #16]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	000186a0 	.word	0x000186a0
 8002420:	001e847f 	.word	0x001e847f
 8002424:	003d08ff 	.word	0x003d08ff
 8002428:	431bde83 	.word	0x431bde83
 800242c:	10624dd3 	.word	0x10624dd3

08002430 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244a:	f7ff fbe1 	bl	8001c10 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	f040 80d9 	bne.w	8002610 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2319      	movs	r3, #25
 8002464:	2201      	movs	r2, #1
 8002466:	496d      	ldr	r1, [pc, #436]	; (800261c <HAL_I2C_Mem_Write+0x1ec>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fc7f 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
 8002476:	e0cc      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Mem_Write+0x56>
 8002482:	2302      	movs	r3, #2
 8002484:	e0c5      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d007      	beq.n	80024ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2221      	movs	r2, #33	; 0x21
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2240      	movs	r2, #64	; 0x40
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_I2C_Mem_Write+0x1f0>)
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ee:	88f8      	ldrh	r0, [r7, #6]
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	8979      	ldrh	r1, [r7, #10]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	4603      	mov	r3, r0
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fab6 	bl	8002a70 <I2C_RequestMemoryWrite>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d052      	beq.n	80025b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e081      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fd00 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00d      	beq.n	800253a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b04      	cmp	r3, #4
 8002524:	d107      	bne.n	8002536 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002534:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d11b      	bne.n	80025b0 <HAL_I2C_Mem_Write+0x180>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1aa      	bne.n	800250e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fcec 	bl	8002f9a <I2C_WaitOnBTFFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e016      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	00100002 	.word	0x00100002
 8002620:	ffff0000 	.word	0xffff0000

08002624 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	; 0x30
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	817b      	strh	r3, [r7, #10]
 8002636:	460b      	mov	r3, r1
 8002638:	813b      	strh	r3, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7ff fae7 	bl	8001c10 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b20      	cmp	r3, #32
 800264e:	f040 8208 	bne.w	8002a62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	497b      	ldr	r1, [pc, #492]	; (8002848 <HAL_I2C_Mem_Read+0x224>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fb85 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	e1fb      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Read+0x56>
 8002676:	2302      	movs	r3, #2
 8002678:	e1f4      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d007      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2222      	movs	r2, #34	; 0x22
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a5b      	ldr	r2, [pc, #364]	; (800284c <HAL_I2C_Mem_Read+0x228>)
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4603      	mov	r3, r0
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa52 	bl	8002b9c <I2C_RequestMemoryRead>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1b0      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e184      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11b      	bne.n	8002772 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e164      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b02      	cmp	r3, #2
 8002778:	d11b      	bne.n	80027b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002788:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	e144      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027c8:	e138      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	f200 80f1 	bhi.w	80029b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d123      	bne.n	8002824 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fc1b 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e139      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002822:	e10b      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b02      	cmp	r3, #2
 800282a:	d14e      	bne.n	80028ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	2200      	movs	r2, #0
 8002834:	4906      	ldr	r1, [pc, #24]	; (8002850 <HAL_I2C_Mem_Read+0x22c>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fa98 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e10e      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
 8002846:	bf00      	nop
 8002848:	00100002 	.word	0x00100002
 800284c:	ffff0000 	.word	0xffff0000
 8002850:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c8:	e0b8      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	2200      	movs	r2, #0
 80028d2:	4966      	ldr	r1, [pc, #408]	; (8002a6c <HAL_I2C_Mem_Read+0x448>)
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fa49 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0bf      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	2200      	movs	r2, #0
 800292e:	494f      	ldr	r1, [pc, #316]	; (8002a6c <HAL_I2C_Mem_Read+0x448>)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fa1b 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e091      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029b4:	e042      	b.n	8002a3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb2e 	bl	800301c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e04c      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d118      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f47f aec2 	bne.w	80027ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	00010004 	.word	0x00010004

08002a70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	460b      	mov	r3, r1
 8002a84:	813b      	strh	r3, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f960 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d103      	bne.n	8002aca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e05f      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	492d      	ldr	r1, [pc, #180]	; (8002b98 <I2C_RequestMemoryWrite+0x128>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f998 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04c      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fa02 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02b      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e021      	b.n	8002b8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f9dc 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e005      	b.n	8002b8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	4608      	mov	r0, r1
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	817b      	strh	r3, [r7, #10]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	813b      	strh	r3, [r7, #8]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f8c2 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d103      	bne.n	8002c06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0aa      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	4952      	ldr	r1, [pc, #328]	; (8002d68 <I2C_RequestMemoryRead+0x1cc>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f8fa 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e097      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f964 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e076      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]
 8002c82:	e021      	b.n	8002cc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f93e 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e050      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbe:	893b      	ldrh	r3, [r7, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cca:	6a39      	ldr	r1, [r7, #32]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f923 	bl	8002f18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d107      	bne.n	8002cf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e035      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f82b 	bl	8002d6c <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00d      	beq.n	8002d38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d2a:	d103      	bne.n	8002d34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e013      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	4906      	ldr	r1, [pc, #24]	; (8002d68 <I2C_RequestMemoryRead+0x1cc>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f863 	bl	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	00010002 	.word	0x00010002

08002d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d7c:	e025      	b.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d84:	d021      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe ff43 	bl	8001c10 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e023      	b.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10d      	bne.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	e00c      	b.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d0b6      	beq.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e28:	e051      	b.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d123      	bne.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0204 	orr.w	r2, r3, #4
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e046      	b.n	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d021      	beq.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fec1 	bl	8001c10 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0220 	orr.w	r2, r3, #32
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e020      	b.n	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	bf14      	ite	ne
 8002eea:	2301      	movne	r3, #1
 8002eec:	2300      	moveq	r3, #0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	e00b      	b.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d18d      	bne.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f24:	e02d      	b.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f8ce 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e02d      	b.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3c:	d021      	beq.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7fe fe67 	bl	8001c10 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e007      	b.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d1ca      	bne.n	8002f26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa6:	e02d      	b.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f88d 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e02d      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d021      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe fe26 	bl	8001c10 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d1ca      	bne.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003028:	e042      	b.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b10      	cmp	r3, #16
 8003036:	d119      	bne.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0210 	mvn.w	r2, #16
 8003040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e029      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7fe fdd0 	bl	8001c10 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d302      	bcc.n	8003082 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b40      	cmp	r3, #64	; 0x40
 80030bc:	d1b5      	bne.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d11b      	bne.n	8003118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e128      	b.n	800338c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a90      	ldr	r2, [pc, #576]	; (8003394 <HAL_I2S_Init+0x26c>)
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fe fad5 	bl	8001704 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003170:	f023 030f 	bic.w	r3, r3, #15
 8003174:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2202      	movs	r2, #2
 800317c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d060      	beq.n	8003248 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800318e:	2310      	movs	r3, #16
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b20      	cmp	r3, #32
 800319e:	d802      	bhi.n	80031a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f001 f9d8 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 80031ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b6:	d125      	bne.n	8003204 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	3305      	adds	r3, #5
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e01f      	b.n	8003222 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	3305      	adds	r3, #5
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e00e      	b.n	8003222 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	3305      	adds	r3, #5
 8003220:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_I2S_Init+0x270>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003248:	2302      	movs	r3, #2
 800324a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d902      	bls.n	800325c <HAL_I2S_Init+0x134>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	d907      	bls.n	800326c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e08f      	b.n	800338c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	430a      	orrs	r2, r1
 800327e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800328a:	f023 030f 	bic.w	r3, r3, #15
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6851      	ldr	r1, [r2, #4]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6892      	ldr	r2, [r2, #8]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68d2      	ldr	r2, [r2, #12]
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6992      	ldr	r2, [r2, #24]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d161      	bne.n	800337c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_I2S_Init+0x274>)
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_I2S_Init+0x1a4>
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032ca:	e001      	b.n	80032d0 <HAL_I2S_Init+0x1a8>
 80032cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4932      	ldr	r1, [pc, #200]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032d8:	428a      	cmp	r2, r1
 80032da:	d101      	bne.n	80032e0 <HAL_I2S_Init+0x1b8>
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032de:	e001      	b.n	80032e4 <HAL_I2S_Init+0x1bc>
 80032e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_I2S_Init+0x1d4>
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032fa:	e001      	b.n	8003300 <HAL_I2S_Init+0x1d8>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	2202      	movs	r2, #2
 8003302:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_I2S_Init+0x278>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_I2S_Init+0x1ea>
 800330e:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_I2S_Init+0x27c>)
 8003310:	e001      	b.n	8003316 <HAL_I2S_Init+0x1ee>
 8003312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	d003      	beq.n	800332c <HAL_I2S_Init+0x204>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800332c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003342:	4313      	orrs	r3, r2
 8003344:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800334c:	4313      	orrs	r3, r2
 800334e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003356:	4313      	orrs	r3, r2
 8003358:	b29a      	uxth	r2, r3
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	4313      	orrs	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003364:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_I2S_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x24c>
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x250>
 8003374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003378:	897a      	ldrh	r2, [r7, #10]
 800337a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	0800349f 	.word	0x0800349f
 8003398:	cccccccd 	.word	0xcccccccd
 800339c:	080035b5 	.word	0x080035b5
 80033a0:	40003800 	.word	0x40003800
 80033a4:	40003400 	.word	0x40003400

080033a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003428:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffb8 	bl	80033a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	b292      	uxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10e      	bne.n	8003496 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003486:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff93 	bl	80033bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d13a      	bne.n	8003530 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d109      	bne.n	80034d8 <I2S_IRQHandler+0x3a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d102      	bne.n	80034d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffb4 	bl	8003440 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d126      	bne.n	8003530 <I2S_IRQHandler+0x92>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d11f      	bne.n	8003530 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff50 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b03      	cmp	r3, #3
 800353a:	d136      	bne.n	80035aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d109      	bne.n	800355a <I2S_IRQHandler+0xbc>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d102      	bne.n	800355a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff45 	bl	80033e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d122      	bne.n	80035aa <I2S_IRQHandler+0x10c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b20      	cmp	r3, #32
 8003570:	d11b      	bne.n	80035aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff13 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a92      	ldr	r2, [pc, #584]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ce:	4b92      	ldr	r3, [pc, #584]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a8b      	ldr	r2, [pc, #556]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035ec:	4b8a      	ldr	r3, [pc, #552]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035ee:	e001      	b.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d004      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 8099 	bne.w	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f925 	bl	8003870 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9c8 	bl	80039d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d13a      	bne.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d035      	beq.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a6e      	ldr	r2, [pc, #440]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800365e:	4b6e      	ldr	r3, [pc, #440]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4969      	ldr	r1, [pc, #420]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003672:	4b69      	ldr	r3, [pc, #420]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe88 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	f040 80c3 	bne.w	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80bd 	beq.w	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a49      	ldr	r2, [pc, #292]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036f2:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4944      	ldr	r1, [pc, #272]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d101      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003706:	4b44      	ldr	r3, [pc, #272]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003708:	e001      	b.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800370a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003712:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fe4a 	bl	80033d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800373c:	e089      	b.n	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d107      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8be 	bl	80038d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8fd 	bl	800396c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d12f      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02a      	beq.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003794:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1e      	ldr	r2, [pc, #120]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a2:	e001      	b.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4919      	ldr	r1, [pc, #100]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b6:	e001      	b.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fdfa 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d136      	bne.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d031      	beq.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4902      	ldr	r1, [pc, #8]	; (8003814 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380a:	428b      	cmp	r3, r1
 800380c:	d106      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800380e:	4b02      	ldr	r3, [pc, #8]	; (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003810:	e006      	b.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003812:	bf00      	nop
 8003814:	40003800 	.word	0x40003800
 8003818:	40003400 	.word	0x40003400
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003824:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003834:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fdc0 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003850:	e000      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003852:	bf00      	nop
}
 8003854:	bf00      	nop
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6251      	str	r1, [r2, #36]	; 0x24
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d113      	bne.n	80038ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffc9 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c99      	adds	r1, r3, #2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6251      	str	r1, [r2, #36]	; 0x24
 80038e6:	8819      	ldrh	r1, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <I2SEx_TxISR_I2SExt+0x22>
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 80038f4:	e001      	b.n	80038fa <I2SEx_TxISR_I2SExt+0x26>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	460a      	mov	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d121      	bne.n	800395a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <I2SEx_TxISR_I2SExt+0x50>
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 8003922:	e001      	b.n	8003928 <I2SEx_TxISR_I2SExt+0x54>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	490d      	ldr	r1, [pc, #52]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d101      	bne.n	8003938 <I2SEx_TxISR_I2SExt+0x64>
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 8003936:	e001      	b.n	800393c <I2SEx_TxISR_I2SExt+0x68>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003940:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff81 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40003800 	.word	0x40003800
 8003968:	40003400 	.word	0x40003400

0800396c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68d8      	ldr	r0, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	1c99      	adds	r1, r3, #2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003984:	b282      	uxth	r2, r0
 8003986:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff4a 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x16>
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 80039e4:	e001      	b.n	80039ea <I2SEx_RxISR_I2SExt+0x1a>
 80039e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ea:	68d8      	ldr	r0, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	1c99      	adds	r1, r3, #2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039f6:	b282      	uxth	r2, r0
 80039f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d121      	bne.n	8003a56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <I2SEx_RxISR_I2SExt+0x50>
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 8003a1e:	e001      	b.n	8003a24 <I2SEx_RxISR_I2SExt+0x54>
 8003a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d101      	bne.n	8003a34 <I2SEx_RxISR_I2SExt+0x64>
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 8003a32:	e001      	b.n	8003a38 <I2SEx_RxISR_I2SExt+0x68>
 8003a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff03 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40003800 	.word	0x40003800
 8003a64:	40003400 	.word	0x40003400

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e267      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d075      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b7e      	ldr	r3, [pc, #504]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e242      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x74>
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a75      	ldr	r2, [pc, #468]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x98>
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6c      	ldr	r2, [pc, #432]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe f876 	bl	8001c10 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fe f872 	bl	8001c10 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e207      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe f862 	bl	8001c10 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe f85e 	bl	8001c10 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1f3      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b51      	ldr	r3, [pc, #324]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d11c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c7      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e03a      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe f817 	bl	8001c10 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe f813 	bl	8001c10 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1a8      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fff6 	bl	8001c10 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd fff2 	bl	8001c10 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e187      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d036      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd ffd6 	bl	8001c10 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fd ffd2 	bl	8001c10 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e167      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x200>
 8003c86:	e01b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd ffbf 	bl	8001c10 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	e00e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fd ffbb 	bl	8001c10 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d907      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e150      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470000 	.word	0x42470000
 8003cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ea      	bne.n	8003c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8097 	beq.w	8003dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4b81      	ldr	r3, [pc, #516]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b7a      	ldr	r3, [pc, #488]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b77      	ldr	r3, [pc, #476]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b74      	ldr	r3, [pc, #464]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a73      	ldr	r2, [pc, #460]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fd ff7b 	bl	8001c10 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd ff77 	bl	8001c10 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e10c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2ea>
 8003d44:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a63      	ldr	r2, [pc, #396]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e01c      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x30c>
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a54      	ldr	r2, [pc, #336]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd ff3c 	bl	8001c10 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fd ff38 	bl	8001c10 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0cb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCC_OscConfig+0x334>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ff26 	bl	8001c10 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd ff22 	bl	8001c10 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0b5      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a1 	beq.w	8003f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d05c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d141      	bne.n	8003e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fef6 	bl	8001c10 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd fef2 	bl	8001c10 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e087      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fd fecb 	bl	8001c10 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fec7 	bl	8001c10 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e05c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x416>
 8003e9c:	e054      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd feb4 	bl	8001c10 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd feb0 	bl	8001c10 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e045      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x444>
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e038      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d90c      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e067      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4934      	ldr	r1, [pc, #208]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fd fde2 	bl	8001c10 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd fdde 	bl	8001c10 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20c      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fd42 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	080079ac 	.word	0x080079ac
 800411c:	20000000 	.word	0x20000000
 8004120:	20000004 	.word	0x20000004

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b094      	sub	sp, #80	; 0x50
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
 8004130:	2300      	movs	r3, #0
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004134:	2300      	movs	r3, #0
 8004136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413c:	4b79      	ldr	r3, [pc, #484]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 8004148:	2b08      	cmp	r3, #8
 800414a:	f200 80e1 	bhi.w	8004310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x34>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x3a>
 8004156:	e0db      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b73      	ldr	r3, [pc, #460]	; (8004328 <HAL_RCC_GetSysClockFreq+0x204>)
 800415a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800415c:	e0db      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b73      	ldr	r3, [pc, #460]	; (800432c <HAL_RCC_GetSysClockFreq+0x208>)
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004162:	e0d8      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d063      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
 8004184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
 8004192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004196:	4622      	mov	r2, r4
 8004198:	462b      	mov	r3, r5
 800419a:	f04f 0000 	mov.w	r0, #0
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	0159      	lsls	r1, r3, #5
 80041a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a8:	0150      	lsls	r0, r2, #5
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4621      	mov	r1, r4
 80041b0:	1a51      	subs	r1, r2, r1
 80041b2:	6139      	str	r1, [r7, #16]
 80041b4:	4629      	mov	r1, r5
 80041b6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041c8:	4659      	mov	r1, fp
 80041ca:	018b      	lsls	r3, r1, #6
 80041cc:	4651      	mov	r1, sl
 80041ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d2:	4651      	mov	r1, sl
 80041d4:	018a      	lsls	r2, r1, #6
 80041d6:	4651      	mov	r1, sl
 80041d8:	ebb2 0801 	subs.w	r8, r2, r1
 80041dc:	4659      	mov	r1, fp
 80041de:	eb63 0901 	sbc.w	r9, r3, r1
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041f6:	4690      	mov	r8, r2
 80041f8:	4699      	mov	r9, r3
 80041fa:	4623      	mov	r3, r4
 80041fc:	eb18 0303 	adds.w	r3, r8, r3
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	462b      	mov	r3, r5
 8004204:	eb49 0303 	adc.w	r3, r9, r3
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004216:	4629      	mov	r1, r5
 8004218:	024b      	lsls	r3, r1, #9
 800421a:	4621      	mov	r1, r4
 800421c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004220:	4621      	mov	r1, r4
 8004222:	024a      	lsls	r2, r1, #9
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	2200      	movs	r2, #0
 800422c:	62bb      	str	r3, [r7, #40]	; 0x28
 800422e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004234:	f7fc fd08 	bl	8000c48 <__aeabi_uldivmod>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4613      	mov	r3, r2
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	e058      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b38      	ldr	r3, [pc, #224]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	2200      	movs	r2, #0
 800424a:	4618      	mov	r0, r3
 800424c:	4611      	mov	r1, r2
 800424e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	f04f 0000 	mov.w	r0, #0
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	0159      	lsls	r1, r3, #5
 800426a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426e:	0150      	lsls	r0, r2, #5
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4641      	mov	r1, r8
 8004276:	ebb2 0a01 	subs.w	sl, r2, r1
 800427a:	4649      	mov	r1, r9
 800427c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800428c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004294:	ebb2 040a 	subs.w	r4, r2, sl
 8004298:	eb63 050b 	sbc.w	r5, r3, fp
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	00eb      	lsls	r3, r5, #3
 80042a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042aa:	00e2      	lsls	r2, r4, #3
 80042ac:	4614      	mov	r4, r2
 80042ae:	461d      	mov	r5, r3
 80042b0:	4643      	mov	r3, r8
 80042b2:	18e3      	adds	r3, r4, r3
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	464b      	mov	r3, r9
 80042b8:	eb45 0303 	adc.w	r3, r5, r3
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ca:	4629      	mov	r1, r5
 80042cc:	028b      	lsls	r3, r1, #10
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042d4:	4621      	mov	r1, r4
 80042d6:	028a      	lsls	r2, r1, #10
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042de:	2200      	movs	r2, #0
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	61fa      	str	r2, [r7, #28]
 80042e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e8:	f7fc fcae 	bl	8000c48 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_GetSysClockFreq+0x200>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	3301      	adds	r3, #1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetSysClockFreq+0x204>)
 8004312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004318:	4618      	mov	r0, r3
 800431a:	3750      	adds	r7, #80	; 0x50
 800431c:	46bd      	mov	sp, r7
 800431e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400
 800432c:	007a1200 	.word	0x007a1200

08004330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_RCC_GetHCLKFreq+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000000 	.word	0x20000000

08004348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800434c:	f7ff fff0 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	0a9b      	lsrs	r3, r3, #10
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4903      	ldr	r1, [pc, #12]	; (800436c <HAL_RCC_GetPCLK1Freq+0x24>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	080079bc 	.word	0x080079bc

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004374:	f7ff ffdc 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0b5b      	lsrs	r3, r3, #13
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	080079bc 	.word	0x080079bc

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d035      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043c0:	4b62      	ldr	r3, [pc, #392]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fd fc23 	bl	8001c10 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ce:	f7fd fc1f 	bl	8001c10 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0b0      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e0:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	019a      	lsls	r2, r3, #6
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	071b      	lsls	r3, r3, #28
 80043f8:	4955      	ldr	r1, [pc, #340]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004400:	4b52      	ldr	r3, [pc, #328]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004406:	f7fd fc03 	bl	8001c10 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800440e:	f7fd fbff 	bl	8001c10 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e090      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8083 	beq.w	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	4b44      	ldr	r3, [pc, #272]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a43      	ldr	r2, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004456:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004462:	f7fd fbd5 	bl	8001c10 <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fd fbd1 	bl	8001c10 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e062      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004488:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d02f      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d028      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044bc:	4a24      	ldr	r2, [pc, #144]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d114      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fd fb9f 	bl	8001c10 <HAL_GetTick>
 80044d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fd fb9b 	bl	8001c10 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d901      	bls.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e02a      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ee      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004504:	d10d      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004506:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451a:	490d      	ldr	r1, [pc, #52]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	4313      	orrs	r3, r2
 800451e:	608b      	str	r3, [r1, #8]
 8004520:	e005      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a0a      	ldr	r2, [pc, #40]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004528:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800452c:	6093      	str	r3, [r2, #8]
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453a:	4905      	ldr	r1, [pc, #20]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453c:	4313      	orrs	r3, r2
 800453e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	42470068 	.word	0x42470068
 8004550:	40023800 	.word	0x40023800
 8004554:	40007000 	.word	0x40007000
 8004558:	42470e40 	.word	0x42470e40

0800455c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d13e      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d12f      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004592:	617b      	str	r3, [r7, #20]
          break;
 8004594:	e02f      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a2:	d108      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ac:	4a18      	ldr	r2, [pc, #96]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e007      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	0f1b      	lsrs	r3, r3, #28
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
          break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
          break;
 80045f4:	bf00      	nop
        }
      }
      break;
 80045f6:	bf00      	nop
    }
  }
  return frequency;
 80045f8:	697b      	ldr	r3, [r7, #20]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	00bb8000 	.word	0x00bb8000
 8004610:	007a1200 	.word	0x007a1200
 8004614:	00f42400 	.word	0x00f42400

08004618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07b      	b.n	8004722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463a:	d009      	beq.n	8004650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	e005      	b.n	8004650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fd f8ca 	bl	8001804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	ea42 0103 	orr.w	r1, r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	f003 0104 	and.w	r1, r3, #4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0210 	and.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e03f      	b.n	80047bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fd f89f 	bl	8001894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2224      	movs	r2, #36	; 0x24
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f928 	bl	80049c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004782:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004792:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d17c      	bne.n	80048de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Transmit+0x2c>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e075      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x3e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e06e      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004818:	f7fd f9fa 	bl	8001c10 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d108      	bne.n	8004846 <HAL_UART_Transmit+0x82>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e003      	b.n	800484e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004856:	e02a      	b.n	80048ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f840 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e036      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004886:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3302      	adds	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e007      	b.n	80048a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1cf      	bne.n	8004858 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f810 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b090      	sub	sp, #64	; 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e050      	b.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004900:	d04c      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004908:	f7fd f982 	bl	8001c10 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004914:	429a      	cmp	r2, r3
 8004916:	d241      	bcs.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004938:	637a      	str	r2, [r7, #52]	; 0x34
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	623a      	str	r2, [r7, #32]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00f      	b.n	80049bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d09f      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3740      	adds	r7, #64	; 0x40
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c0      	sub	sp, #256	; 0x100
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	ea40 0301 	orr.w	r3, r0, r1
 80049ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a1c:	f021 010c 	bic.w	r1, r1, #12
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	6999      	ldr	r1, [r3, #24]
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	ea40 0301 	orr.w	r3, r0, r1
 8004a4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b8f      	ldr	r3, [pc, #572]	; (8004c90 <UART_SetConfig+0x2cc>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <UART_SetConfig+0xa0>
 8004a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <UART_SetConfig+0x2d0>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a64:	f7ff fc84 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 8004a68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a6c:	e003      	b.n	8004a76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7ff fc6b 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8004a72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a80:	f040 810c 	bne.w	8004c9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	1891      	adds	r1, r2, r2
 8004a9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9e:	415b      	adcs	r3, r3
 8004aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	eb12 0801 	adds.w	r8, r2, r1
 8004aac:	4629      	mov	r1, r5
 8004aae:	eb43 0901 	adc.w	r9, r3, r1
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac6:	4690      	mov	r8, r2
 8004ac8:	4699      	mov	r9, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	eb18 0303 	adds.w	r3, r8, r3
 8004ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	eb49 0303 	adc.w	r3, r9, r3
 8004ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004aea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004af2:	460b      	mov	r3, r1
 8004af4:	18db      	adds	r3, r3, r3
 8004af6:	653b      	str	r3, [r7, #80]	; 0x50
 8004af8:	4613      	mov	r3, r2
 8004afa:	eb42 0303 	adc.w	r3, r2, r3
 8004afe:	657b      	str	r3, [r7, #84]	; 0x54
 8004b00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b08:	f7fc f89e 	bl	8000c48 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b34:	415b      	adcs	r3, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b42:	4649      	mov	r1, r9
 8004b44:	eb43 0b01 	adc.w	fp, r3, r1
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b5c:	4692      	mov	sl, r2
 8004b5e:	469b      	mov	fp, r3
 8004b60:	4643      	mov	r3, r8
 8004b62:	eb1a 0303 	adds.w	r3, sl, r3
 8004b66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	18db      	adds	r3, r3, r3
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8e:	4613      	mov	r3, r2
 8004b90:	eb42 0303 	adc.w	r3, r2, r3
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9e:	f7fc f853 	bl	8000c48 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4b3b      	ldr	r3, [pc, #236]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004baa:	fba3 2301 	umull	r2, r3, r3, r1
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2264      	movs	r2, #100	; 0x64
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	1acb      	subs	r3, r1, r3
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be8:	415b      	adcs	r3, r3
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c44:	460b      	mov	r3, r1
 8004c46:	18db      	adds	r3, r3, r3
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	eb42 0303 	adc.w	r3, r2, r3
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c5a:	f7fb fff5 	bl	8000c48 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c64:	fba3 1302 	umull	r1, r3, r3, r2
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	2164      	movs	r1, #100	; 0x64
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	3332      	adds	r3, #50	; 0x32
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x2d4>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4422      	add	r2, r4
 8004c8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c8c:	e105      	b.n	8004e9a <UART_SetConfig+0x4d6>
 8004c8e:	bf00      	nop
 8004c90:	40011000 	.word	0x40011000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004caa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cae:	4642      	mov	r2, r8
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	6239      	str	r1, [r7, #32]
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	1854      	adds	r4, r2, r1
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	eb43 0501 	adc.w	r5, r3, r1
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	008b      	lsls	r3, r1, #2
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d14:	4621      	mov	r1, r4
 8004d16:	008a      	lsls	r2, r1, #2
 8004d18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d1c:	f7fb ff94 	bl	8000c48 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4b60      	ldr	r3, [pc, #384]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004d26:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	011c      	lsls	r4, r3, #4
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	61b9      	str	r1, [r7, #24]
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6139      	str	r1, [r7, #16]
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da8:	4649      	mov	r1, r9
 8004daa:	008b      	lsls	r3, r1, #2
 8004dac:	4641      	mov	r1, r8
 8004dae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db2:	4641      	mov	r1, r8
 8004db4:	008a      	lsls	r2, r1, #2
 8004db6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dba:	f7fb ff45 	bl	8000c48 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	2164      	movs	r1, #100	; 0x64
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	3332      	adds	r3, #50	; 0x32
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de2:	441c      	add	r4, r3
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	673b      	str	r3, [r7, #112]	; 0x70
 8004dec:	677a      	str	r2, [r7, #116]	; 0x74
 8004dee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004df2:	4642      	mov	r2, r8
 8004df4:	464b      	mov	r3, r9
 8004df6:	1891      	adds	r1, r2, r2
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	415b      	adcs	r3, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e02:	4641      	mov	r1, r8
 8004e04:	1851      	adds	r1, r2, r1
 8004e06:	6039      	str	r1, [r7, #0]
 8004e08:	4649      	mov	r1, r9
 8004e0a:	414b      	adcs	r3, r1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	00cb      	lsls	r3, r1, #3
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e24:	4651      	mov	r1, sl
 8004e26:	00ca      	lsls	r2, r1, #3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4642      	mov	r2, r8
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e34:	464b      	mov	r3, r9
 8004e36:	460a      	mov	r2, r1
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	663b      	str	r3, [r7, #96]	; 0x60
 8004e48:	667a      	str	r2, [r7, #100]	; 0x64
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e56:	4649      	mov	r1, r9
 8004e58:	008b      	lsls	r3, r1, #2
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e60:	4641      	mov	r1, r8
 8004e62:	008a      	lsls	r2, r1, #2
 8004e64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e68:	f7fb feee 	bl	8000c48 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e72:	fba3 1302 	umull	r1, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	2164      	movs	r1, #100	; 0x64
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	3332      	adds	r3, #50	; 0x32
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <UART_SetConfig+0x4e4>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4422      	add	r2, r4
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	51eb851f 	.word	0x51eb851f

08004eac <__errno>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	; (8004eb4 <__errno+0x8>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	2000000c 	.word	0x2000000c

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4d0d      	ldr	r5, [pc, #52]	; (8004ef0 <__libc_init_array+0x38>)
 8004ebc:	4c0d      	ldr	r4, [pc, #52]	; (8004ef4 <__libc_init_array+0x3c>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	4d0b      	ldr	r5, [pc, #44]	; (8004ef8 <__libc_init_array+0x40>)
 8004eca:	4c0c      	ldr	r4, [pc, #48]	; (8004efc <__libc_init_array+0x44>)
 8004ecc:	f002 fd50 	bl	8007970 <_init>
 8004ed0:	1b64      	subs	r4, r4, r5
 8004ed2:	10a4      	asrs	r4, r4, #2
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	08007da4 	.word	0x08007da4
 8004ef4:	08007da4 	.word	0x08007da4
 8004ef8:	08007da4 	.word	0x08007da4
 8004efc:	08007da8 	.word	0x08007da8

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <__cvt>:
 8004f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	ec55 4b10 	vmov	r4, r5, d0
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	460e      	mov	r6, r1
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	462b      	mov	r3, r5
 8004f20:	bfbb      	ittet	lt
 8004f22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f26:	461d      	movlt	r5, r3
 8004f28:	2300      	movge	r3, #0
 8004f2a:	232d      	movlt	r3, #45	; 0x2d
 8004f2c:	700b      	strb	r3, [r1, #0]
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f34:	4691      	mov	r9, r2
 8004f36:	f023 0820 	bic.w	r8, r3, #32
 8004f3a:	bfbc      	itt	lt
 8004f3c:	4622      	movlt	r2, r4
 8004f3e:	4614      	movlt	r4, r2
 8004f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f44:	d005      	beq.n	8004f52 <__cvt+0x42>
 8004f46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f4a:	d100      	bne.n	8004f4e <__cvt+0x3e>
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	2102      	movs	r1, #2
 8004f50:	e000      	b.n	8004f54 <__cvt+0x44>
 8004f52:	2103      	movs	r1, #3
 8004f54:	ab03      	add	r3, sp, #12
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	ab02      	add	r3, sp, #8
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	ec45 4b10 	vmov	d0, r4, r5
 8004f60:	4653      	mov	r3, sl
 8004f62:	4632      	mov	r2, r6
 8004f64:	f000 fce4 	bl	8005930 <_dtoa_r>
 8004f68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	d102      	bne.n	8004f76 <__cvt+0x66>
 8004f70:	f019 0f01 	tst.w	r9, #1
 8004f74:	d022      	beq.n	8004fbc <__cvt+0xac>
 8004f76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f7a:	eb07 0906 	add.w	r9, r7, r6
 8004f7e:	d110      	bne.n	8004fa2 <__cvt+0x92>
 8004f80:	783b      	ldrb	r3, [r7, #0]
 8004f82:	2b30      	cmp	r3, #48	; 0x30
 8004f84:	d10a      	bne.n	8004f9c <__cvt+0x8c>
 8004f86:	2200      	movs	r2, #0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f92:	b918      	cbnz	r0, 8004f9c <__cvt+0x8c>
 8004f94:	f1c6 0601 	rsb	r6, r6, #1
 8004f98:	f8ca 6000 	str.w	r6, [sl]
 8004f9c:	f8da 3000 	ldr.w	r3, [sl]
 8004fa0:	4499      	add	r9, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fae:	b108      	cbz	r0, 8004fb4 <__cvt+0xa4>
 8004fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fb4:	2230      	movs	r2, #48	; 0x30
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	454b      	cmp	r3, r9
 8004fba:	d307      	bcc.n	8004fcc <__cvt+0xbc>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc0:	1bdb      	subs	r3, r3, r7
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	b004      	add	sp, #16
 8004fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fcc:	1c59      	adds	r1, r3, #1
 8004fce:	9103      	str	r1, [sp, #12]
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e7f0      	b.n	8004fb6 <__cvt+0xa6>

08004fd4 <__exponent>:
 8004fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	4249      	neglt	r1, r1
 8004fde:	f803 2b02 	strb.w	r2, [r3], #2
 8004fe2:	bfb4      	ite	lt
 8004fe4:	222d      	movlt	r2, #45	; 0x2d
 8004fe6:	222b      	movge	r2, #43	; 0x2b
 8004fe8:	2909      	cmp	r1, #9
 8004fea:	7042      	strb	r2, [r0, #1]
 8004fec:	dd2a      	ble.n	8005044 <__exponent+0x70>
 8004fee:	f10d 0407 	add.w	r4, sp, #7
 8004ff2:	46a4      	mov	ip, r4
 8004ff4:	270a      	movs	r7, #10
 8004ff6:	46a6      	mov	lr, r4
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ffe:	fb07 1516 	mls	r5, r7, r6, r1
 8005002:	3530      	adds	r5, #48	; 0x30
 8005004:	2a63      	cmp	r2, #99	; 0x63
 8005006:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800500a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800500e:	4631      	mov	r1, r6
 8005010:	dcf1      	bgt.n	8004ff6 <__exponent+0x22>
 8005012:	3130      	adds	r1, #48	; 0x30
 8005014:	f1ae 0502 	sub.w	r5, lr, #2
 8005018:	f804 1c01 	strb.w	r1, [r4, #-1]
 800501c:	1c44      	adds	r4, r0, #1
 800501e:	4629      	mov	r1, r5
 8005020:	4561      	cmp	r1, ip
 8005022:	d30a      	bcc.n	800503a <__exponent+0x66>
 8005024:	f10d 0209 	add.w	r2, sp, #9
 8005028:	eba2 020e 	sub.w	r2, r2, lr
 800502c:	4565      	cmp	r5, ip
 800502e:	bf88      	it	hi
 8005030:	2200      	movhi	r2, #0
 8005032:	4413      	add	r3, r2
 8005034:	1a18      	subs	r0, r3, r0
 8005036:	b003      	add	sp, #12
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800503e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005042:	e7ed      	b.n	8005020 <__exponent+0x4c>
 8005044:	2330      	movs	r3, #48	; 0x30
 8005046:	3130      	adds	r1, #48	; 0x30
 8005048:	7083      	strb	r3, [r0, #2]
 800504a:	70c1      	strb	r1, [r0, #3]
 800504c:	1d03      	adds	r3, r0, #4
 800504e:	e7f1      	b.n	8005034 <__exponent+0x60>

08005050 <_printf_float>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	ed2d 8b02 	vpush	{d8}
 8005058:	b08d      	sub	sp, #52	; 0x34
 800505a:	460c      	mov	r4, r1
 800505c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005060:	4616      	mov	r6, r2
 8005062:	461f      	mov	r7, r3
 8005064:	4605      	mov	r5, r0
 8005066:	f001 fb47 	bl	80066f8 <_localeconv_r>
 800506a:	f8d0 a000 	ldr.w	sl, [r0]
 800506e:	4650      	mov	r0, sl
 8005070:	f7fb f8ae 	bl	80001d0 <strlen>
 8005074:	2300      	movs	r3, #0
 8005076:	930a      	str	r3, [sp, #40]	; 0x28
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	f8d8 3000 	ldr.w	r3, [r8]
 8005080:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005084:	3307      	adds	r3, #7
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	f103 0208 	add.w	r2, r3, #8
 800508e:	f8c8 2000 	str.w	r2, [r8]
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800509a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800509e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050a2:	9307      	str	r3, [sp, #28]
 80050a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80050a8:	ee08 0a10 	vmov	s16, r0
 80050ac:	4b9f      	ldr	r3, [pc, #636]	; (800532c <_printf_float+0x2dc>)
 80050ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050b6:	f7fb fd39 	bl	8000b2c <__aeabi_dcmpun>
 80050ba:	bb88      	cbnz	r0, 8005120 <_printf_float+0xd0>
 80050bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c0:	4b9a      	ldr	r3, [pc, #616]	; (800532c <_printf_float+0x2dc>)
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050c6:	f7fb fd13 	bl	8000af0 <__aeabi_dcmple>
 80050ca:	bb48      	cbnz	r0, 8005120 <_printf_float+0xd0>
 80050cc:	2200      	movs	r2, #0
 80050ce:	2300      	movs	r3, #0
 80050d0:	4640      	mov	r0, r8
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fd02 	bl	8000adc <__aeabi_dcmplt>
 80050d8:	b110      	cbz	r0, 80050e0 <_printf_float+0x90>
 80050da:	232d      	movs	r3, #45	; 0x2d
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	4b93      	ldr	r3, [pc, #588]	; (8005330 <_printf_float+0x2e0>)
 80050e2:	4894      	ldr	r0, [pc, #592]	; (8005334 <_printf_float+0x2e4>)
 80050e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050e8:	bf94      	ite	ls
 80050ea:	4698      	movls	r8, r3
 80050ec:	4680      	movhi	r8, r0
 80050ee:	2303      	movs	r3, #3
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	9b05      	ldr	r3, [sp, #20]
 80050f4:	f023 0204 	bic.w	r2, r3, #4
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	f04f 0900 	mov.w	r9, #0
 80050fe:	9700      	str	r7, [sp, #0]
 8005100:	4633      	mov	r3, r6
 8005102:	aa0b      	add	r2, sp, #44	; 0x2c
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f000 f9d8 	bl	80054bc <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	f040 8090 	bne.w	8005232 <_printf_float+0x1e2>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005116:	b00d      	add	sp, #52	; 0x34
 8005118:	ecbd 8b02 	vpop	{d8}
 800511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	4640      	mov	r0, r8
 8005126:	4649      	mov	r1, r9
 8005128:	f7fb fd00 	bl	8000b2c <__aeabi_dcmpun>
 800512c:	b140      	cbz	r0, 8005140 <_printf_float+0xf0>
 800512e:	464b      	mov	r3, r9
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbc      	itt	lt
 8005134:	232d      	movlt	r3, #45	; 0x2d
 8005136:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800513a:	487f      	ldr	r0, [pc, #508]	; (8005338 <_printf_float+0x2e8>)
 800513c:	4b7f      	ldr	r3, [pc, #508]	; (800533c <_printf_float+0x2ec>)
 800513e:	e7d1      	b.n	80050e4 <_printf_float+0x94>
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005146:	9206      	str	r2, [sp, #24]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	d13f      	bne.n	80051cc <_printf_float+0x17c>
 800514c:	2306      	movs	r3, #6
 800514e:	6063      	str	r3, [r4, #4]
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	6861      	ldr	r1, [r4, #4]
 8005154:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005158:	2300      	movs	r3, #0
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	ab0a      	add	r3, sp, #40	; 0x28
 800515e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005162:	ab09      	add	r3, sp, #36	; 0x24
 8005164:	ec49 8b10 	vmov	d0, r8, r9
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005170:	4628      	mov	r0, r5
 8005172:	f7ff fecd 	bl	8004f10 <__cvt>
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	9909      	ldr	r1, [sp, #36]	; 0x24
 800517a:	2b47      	cmp	r3, #71	; 0x47
 800517c:	4680      	mov	r8, r0
 800517e:	d108      	bne.n	8005192 <_printf_float+0x142>
 8005180:	1cc8      	adds	r0, r1, #3
 8005182:	db02      	blt.n	800518a <_printf_float+0x13a>
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	4299      	cmp	r1, r3
 8005188:	dd41      	ble.n	800520e <_printf_float+0x1be>
 800518a:	f1ab 0b02 	sub.w	fp, fp, #2
 800518e:	fa5f fb8b 	uxtb.w	fp, fp
 8005192:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005196:	d820      	bhi.n	80051da <_printf_float+0x18a>
 8005198:	3901      	subs	r1, #1
 800519a:	465a      	mov	r2, fp
 800519c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051a0:	9109      	str	r1, [sp, #36]	; 0x24
 80051a2:	f7ff ff17 	bl	8004fd4 <__exponent>
 80051a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a8:	1813      	adds	r3, r2, r0
 80051aa:	2a01      	cmp	r2, #1
 80051ac:	4681      	mov	r9, r0
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	dc02      	bgt.n	80051b8 <_printf_float+0x168>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	07d2      	lsls	r2, r2, #31
 80051b6:	d501      	bpl.n	80051bc <_printf_float+0x16c>
 80051b8:	3301      	adds	r3, #1
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d09c      	beq.n	80050fe <_printf_float+0xae>
 80051c4:	232d      	movs	r3, #45	; 0x2d
 80051c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ca:	e798      	b.n	80050fe <_printf_float+0xae>
 80051cc:	9a06      	ldr	r2, [sp, #24]
 80051ce:	2a47      	cmp	r2, #71	; 0x47
 80051d0:	d1be      	bne.n	8005150 <_printf_float+0x100>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1bc      	bne.n	8005150 <_printf_float+0x100>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7b9      	b.n	800514e <_printf_float+0xfe>
 80051da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051de:	d118      	bne.n	8005212 <_printf_float+0x1c2>
 80051e0:	2900      	cmp	r1, #0
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	dd0b      	ble.n	80051fe <_printf_float+0x1ae>
 80051e6:	6121      	str	r1, [r4, #16]
 80051e8:	b913      	cbnz	r3, 80051f0 <_printf_float+0x1a0>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	07d0      	lsls	r0, r2, #31
 80051ee:	d502      	bpl.n	80051f6 <_printf_float+0x1a6>
 80051f0:	3301      	adds	r3, #1
 80051f2:	440b      	add	r3, r1
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	e7de      	b.n	80051bc <_printf_float+0x16c>
 80051fe:	b913      	cbnz	r3, 8005206 <_printf_float+0x1b6>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	07d2      	lsls	r2, r2, #31
 8005204:	d501      	bpl.n	800520a <_printf_float+0x1ba>
 8005206:	3302      	adds	r3, #2
 8005208:	e7f4      	b.n	80051f4 <_printf_float+0x1a4>
 800520a:	2301      	movs	r3, #1
 800520c:	e7f2      	b.n	80051f4 <_printf_float+0x1a4>
 800520e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005214:	4299      	cmp	r1, r3
 8005216:	db05      	blt.n	8005224 <_printf_float+0x1d4>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	6121      	str	r1, [r4, #16]
 800521c:	07d8      	lsls	r0, r3, #31
 800521e:	d5ea      	bpl.n	80051f6 <_printf_float+0x1a6>
 8005220:	1c4b      	adds	r3, r1, #1
 8005222:	e7e7      	b.n	80051f4 <_printf_float+0x1a4>
 8005224:	2900      	cmp	r1, #0
 8005226:	bfd4      	ite	le
 8005228:	f1c1 0202 	rsble	r2, r1, #2
 800522c:	2201      	movgt	r2, #1
 800522e:	4413      	add	r3, r2
 8005230:	e7e0      	b.n	80051f4 <_printf_float+0x1a4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	055a      	lsls	r2, r3, #21
 8005236:	d407      	bmi.n	8005248 <_printf_float+0x1f8>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	4642      	mov	r2, r8
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	d12c      	bne.n	80052a0 <_printf_float+0x250>
 8005246:	e764      	b.n	8005112 <_printf_float+0xc2>
 8005248:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800524c:	f240 80e0 	bls.w	8005410 <_printf_float+0x3c0>
 8005250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	f7fb fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800525c:	2800      	cmp	r0, #0
 800525e:	d034      	beq.n	80052ca <_printf_float+0x27a>
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <_printf_float+0x2f0>)
 8005262:	2301      	movs	r3, #1
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af51 	beq.w	8005112 <_printf_float+0xc2>
 8005270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005274:	429a      	cmp	r2, r3
 8005276:	db02      	blt.n	800527e <_printf_float+0x22e>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07d8      	lsls	r0, r3, #31
 800527c:	d510      	bpl.n	80052a0 <_printf_float+0x250>
 800527e:	ee18 3a10 	vmov	r3, s16
 8005282:	4652      	mov	r2, sl
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af41 	beq.w	8005112 <_printf_float+0xc2>
 8005290:	f04f 0800 	mov.w	r8, #0
 8005294:	f104 091a 	add.w	r9, r4, #26
 8005298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	4543      	cmp	r3, r8
 800529e:	dc09      	bgt.n	80052b4 <_printf_float+0x264>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	f100 8105 	bmi.w	80054b2 <_printf_float+0x462>
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ac:	4298      	cmp	r0, r3
 80052ae:	bfb8      	it	lt
 80052b0:	4618      	movlt	r0, r3
 80052b2:	e730      	b.n	8005116 <_printf_float+0xc6>
 80052b4:	2301      	movs	r3, #1
 80052b6:	464a      	mov	r2, r9
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f af27 	beq.w	8005112 <_printf_float+0xc2>
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	e7e6      	b.n	8005298 <_printf_float+0x248>
 80052ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc39      	bgt.n	8005344 <_printf_float+0x2f4>
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <_printf_float+0x2f0>)
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af19 	beq.w	8005112 <_printf_float+0xc2>
 80052e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d102      	bne.n	80052ee <_printf_float+0x29e>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d5d8      	bpl.n	80052a0 <_printf_float+0x250>
 80052ee:	ee18 3a10 	vmov	r3, s16
 80052f2:	4652      	mov	r2, sl
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af09 	beq.w	8005112 <_printf_float+0xc2>
 8005300:	f04f 0900 	mov.w	r9, #0
 8005304:	f104 0a1a 	add.w	sl, r4, #26
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	425b      	negs	r3, r3
 800530c:	454b      	cmp	r3, r9
 800530e:	dc01      	bgt.n	8005314 <_printf_float+0x2c4>
 8005310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005312:	e792      	b.n	800523a <_printf_float+0x1ea>
 8005314:	2301      	movs	r3, #1
 8005316:	4652      	mov	r2, sl
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f aef7 	beq.w	8005112 <_printf_float+0xc2>
 8005324:	f109 0901 	add.w	r9, r9, #1
 8005328:	e7ee      	b.n	8005308 <_printf_float+0x2b8>
 800532a:	bf00      	nop
 800532c:	7fefffff 	.word	0x7fefffff
 8005330:	080079c8 	.word	0x080079c8
 8005334:	080079cc 	.word	0x080079cc
 8005338:	080079d4 	.word	0x080079d4
 800533c:	080079d0 	.word	0x080079d0
 8005340:	080079d8 	.word	0x080079d8
 8005344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005348:	429a      	cmp	r2, r3
 800534a:	bfa8      	it	ge
 800534c:	461a      	movge	r2, r3
 800534e:	2a00      	cmp	r2, #0
 8005350:	4691      	mov	r9, r2
 8005352:	dc37      	bgt.n	80053c4 <_printf_float+0x374>
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535c:	f104 021a 	add.w	r2, r4, #26
 8005360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	eba3 0309 	sub.w	r3, r3, r9
 8005368:	455b      	cmp	r3, fp
 800536a:	dc33      	bgt.n	80053d4 <_printf_float+0x384>
 800536c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005370:	429a      	cmp	r2, r3
 8005372:	db3b      	blt.n	80053ec <_printf_float+0x39c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d438      	bmi.n	80053ec <_printf_float+0x39c>
 800537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005380:	1a9a      	subs	r2, r3, r2
 8005382:	eba3 0901 	sub.w	r9, r3, r1
 8005386:	4591      	cmp	r9, r2
 8005388:	bfa8      	it	ge
 800538a:	4691      	movge	r9, r2
 800538c:	f1b9 0f00 	cmp.w	r9, #0
 8005390:	dc35      	bgt.n	80053fe <_printf_float+0x3ae>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539a:	f104 0a1a 	add.w	sl, r4, #26
 800539e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	eba3 0309 	sub.w	r3, r3, r9
 80053a8:	4543      	cmp	r3, r8
 80053aa:	f77f af79 	ble.w	80052a0 <_printf_float+0x250>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f aeaa 	beq.w	8005112 <_printf_float+0xc2>
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	e7ec      	b.n	800539e <_printf_float+0x34e>
 80053c4:	4613      	mov	r3, r2
 80053c6:	4631      	mov	r1, r6
 80053c8:	4642      	mov	r2, r8
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	d1c0      	bne.n	8005354 <_printf_float+0x304>
 80053d2:	e69e      	b.n	8005112 <_printf_float+0xc2>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	9205      	str	r2, [sp, #20]
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f ae97 	beq.w	8005112 <_printf_float+0xc2>
 80053e4:	9a05      	ldr	r2, [sp, #20]
 80053e6:	f10b 0b01 	add.w	fp, fp, #1
 80053ea:	e7b9      	b.n	8005360 <_printf_float+0x310>
 80053ec:	ee18 3a10 	vmov	r3, s16
 80053f0:	4652      	mov	r2, sl
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1be      	bne.n	800537a <_printf_float+0x32a>
 80053fc:	e689      	b.n	8005112 <_printf_float+0xc2>
 80053fe:	9a05      	ldr	r2, [sp, #20]
 8005400:	464b      	mov	r3, r9
 8005402:	4442      	add	r2, r8
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	d1c1      	bne.n	8005392 <_printf_float+0x342>
 800540e:	e680      	b.n	8005112 <_printf_float+0xc2>
 8005410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005412:	2a01      	cmp	r2, #1
 8005414:	dc01      	bgt.n	800541a <_printf_float+0x3ca>
 8005416:	07db      	lsls	r3, r3, #31
 8005418:	d538      	bpl.n	800548c <_printf_float+0x43c>
 800541a:	2301      	movs	r3, #1
 800541c:	4642      	mov	r2, r8
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae74 	beq.w	8005112 <_printf_float+0xc2>
 800542a:	ee18 3a10 	vmov	r3, s16
 800542e:	4652      	mov	r2, sl
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f ae6b 	beq.w	8005112 <_printf_float+0xc2>
 800543c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005440:	2200      	movs	r2, #0
 8005442:	2300      	movs	r3, #0
 8005444:	f7fb fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8005448:	b9d8      	cbnz	r0, 8005482 <_printf_float+0x432>
 800544a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800544c:	f108 0201 	add.w	r2, r8, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d10e      	bne.n	800547a <_printf_float+0x42a>
 800545c:	e659      	b.n	8005112 <_printf_float+0xc2>
 800545e:	2301      	movs	r3, #1
 8005460:	4652      	mov	r2, sl
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae52 	beq.w	8005112 <_printf_float+0xc2>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	4543      	cmp	r3, r8
 8005478:	dcf1      	bgt.n	800545e <_printf_float+0x40e>
 800547a:	464b      	mov	r3, r9
 800547c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005480:	e6dc      	b.n	800523c <_printf_float+0x1ec>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 0a1a 	add.w	sl, r4, #26
 800548a:	e7f2      	b.n	8005472 <_printf_float+0x422>
 800548c:	2301      	movs	r3, #1
 800548e:	4642      	mov	r2, r8
 8005490:	e7df      	b.n	8005452 <_printf_float+0x402>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f ae38 	beq.w	8005112 <_printf_float+0xc2>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	4543      	cmp	r3, r8
 80054ae:	dcf0      	bgt.n	8005492 <_printf_float+0x442>
 80054b0:	e6fa      	b.n	80052a8 <_printf_float+0x258>
 80054b2:	f04f 0800 	mov.w	r8, #0
 80054b6:	f104 0919 	add.w	r9, r4, #25
 80054ba:	e7f4      	b.n	80054a6 <_printf_float+0x456>

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4616      	mov	r6, r2
 80054c2:	4699      	mov	r9, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bfb8      	it	lt
 80054d0:	4613      	movlt	r3, r2
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d8:	4607      	mov	r7, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b10a      	cbz	r2, 80054e2 <_printf_common+0x26>
 80054de:	3301      	adds	r3, #1
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	6833      	ldrmi	r3, [r6, #0]
 80054ea:	3302      	addmi	r3, #2
 80054ec:	6033      	strmi	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	f015 0506 	ands.w	r5, r5, #6
 80054f4:	d106      	bne.n	8005504 <_printf_common+0x48>
 80054f6:	f104 0a19 	add.w	sl, r4, #25
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	6832      	ldr	r2, [r6, #0]
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc26      	bgt.n	8005552 <_printf_common+0x96>
 8005504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005508:	1e13      	subs	r3, r2, #0
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	bf18      	it	ne
 800550e:	2301      	movne	r3, #1
 8005510:	0692      	lsls	r2, r2, #26
 8005512:	d42b      	bmi.n	800556c <_printf_common+0xb0>
 8005514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d01e      	beq.n	8005560 <_printf_common+0xa4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	68e5      	ldr	r5, [r4, #12]
 8005526:	6832      	ldr	r2, [r6, #0]
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	2b04      	cmp	r3, #4
 800552e:	bf08      	it	eq
 8005530:	1aad      	subeq	r5, r5, r2
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	bf0c      	ite	eq
 8005538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800553c:	2500      	movne	r5, #0
 800553e:	4293      	cmp	r3, r2
 8005540:	bfc4      	itt	gt
 8005542:	1a9b      	subgt	r3, r3, r2
 8005544:	18ed      	addgt	r5, r5, r3
 8005546:	2600      	movs	r6, #0
 8005548:	341a      	adds	r4, #26
 800554a:	42b5      	cmp	r5, r6
 800554c:	d11a      	bne.n	8005584 <_printf_common+0xc8>
 800554e:	2000      	movs	r0, #0
 8005550:	e008      	b.n	8005564 <_printf_common+0xa8>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4649      	mov	r1, r9
 8005558:	4638      	mov	r0, r7
 800555a:	47c0      	blx	r8
 800555c:	3001      	adds	r0, #1
 800555e:	d103      	bne.n	8005568 <_printf_common+0xac>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	3501      	adds	r5, #1
 800556a:	e7c6      	b.n	80054fa <_printf_common+0x3e>
 800556c:	18e1      	adds	r1, r4, r3
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	2030      	movs	r0, #48	; 0x30
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005576:	4422      	add	r2, r4
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800557c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005580:	3302      	adds	r3, #2
 8005582:	e7c7      	b.n	8005514 <_printf_common+0x58>
 8005584:	2301      	movs	r3, #1
 8005586:	4622      	mov	r2, r4
 8005588:	4649      	mov	r1, r9
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	3001      	adds	r0, #1
 8005590:	d0e6      	beq.n	8005560 <_printf_common+0xa4>
 8005592:	3601      	adds	r6, #1
 8005594:	e7d9      	b.n	800554a <_printf_common+0x8e>
	...

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	7e0f      	ldrb	r7, [r1, #24]
 800559e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055a0:	2f78      	cmp	r7, #120	; 0x78
 80055a2:	4691      	mov	r9, r2
 80055a4:	4680      	mov	r8, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	469a      	mov	sl, r3
 80055aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	; 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d8 	beq.w	800576a <_printf_i+0x1d2>
 80055ba:	2f58      	cmp	r7, #88	; 0x58
 80055bc:	f000 80a3 	beq.w	8005706 <_printf_i+0x16e>
 80055c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a101      	add	r1, pc, #4	; (adr r1, 80055d8 <_printf_i+0x40>)
 80055d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005751 	.word	0x08005751
 8005608:	08005675 	.word	0x08005675
 800560c:	08005733 	.word	0x08005733
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005773 	.word	0x08005773
 800561c:	080055c1 	.word	0x080055c1
 8005620:	08005675 	.word	0x08005675
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	0800573b 	.word	0x0800573b
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	602a      	str	r2, [r5, #0]
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e0a3      	b.n	800578c <_printf_i+0x1f4>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	6829      	ldr	r1, [r5, #0]
 8005648:	0606      	lsls	r6, r0, #24
 800564a:	f101 0304 	add.w	r3, r1, #4
 800564e:	d50a      	bpl.n	8005666 <_printf_i+0xce>
 8005650:	680e      	ldr	r6, [r1, #0]
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	2e00      	cmp	r6, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xc8>
 8005658:	232d      	movs	r3, #45	; 0x2d
 800565a:	4276      	negs	r6, r6
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	485e      	ldr	r0, [pc, #376]	; (80057dc <_printf_i+0x244>)
 8005662:	230a      	movs	r3, #10
 8005664:	e019      	b.n	800569a <_printf_i+0x102>
 8005666:	680e      	ldr	r6, [r1, #0]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800566e:	bf18      	it	ne
 8005670:	b236      	sxthne	r6, r6
 8005672:	e7ef      	b.n	8005654 <_printf_i+0xbc>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1d19      	adds	r1, r3, #4
 800567a:	6029      	str	r1, [r5, #0]
 800567c:	0601      	lsls	r1, r0, #24
 800567e:	d501      	bpl.n	8005684 <_printf_i+0xec>
 8005680:	681e      	ldr	r6, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0xf2>
 8005684:	0646      	lsls	r6, r0, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0xe8>
 8005688:	881e      	ldrh	r6, [r3, #0]
 800568a:	4854      	ldr	r0, [pc, #336]	; (80057dc <_printf_i+0x244>)
 800568c:	2f6f      	cmp	r7, #111	; 0x6f
 800568e:	bf0c      	ite	eq
 8005690:	2308      	moveq	r3, #8
 8005692:	230a      	movne	r3, #10
 8005694:	2100      	movs	r1, #0
 8005696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800569a:	6865      	ldr	r5, [r4, #4]
 800569c:	60a5      	str	r5, [r4, #8]
 800569e:	2d00      	cmp	r5, #0
 80056a0:	bfa2      	ittt	ge
 80056a2:	6821      	ldrge	r1, [r4, #0]
 80056a4:	f021 0104 	bicge.w	r1, r1, #4
 80056a8:	6021      	strge	r1, [r4, #0]
 80056aa:	b90e      	cbnz	r6, 80056b0 <_printf_i+0x118>
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	d04d      	beq.n	800574c <_printf_i+0x1b4>
 80056b0:	4615      	mov	r5, r2
 80056b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056b6:	fb03 6711 	mls	r7, r3, r1, r6
 80056ba:	5dc7      	ldrb	r7, [r0, r7]
 80056bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056c0:	4637      	mov	r7, r6
 80056c2:	42bb      	cmp	r3, r7
 80056c4:	460e      	mov	r6, r1
 80056c6:	d9f4      	bls.n	80056b2 <_printf_i+0x11a>
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10b      	bne.n	80056e4 <_printf_i+0x14c>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	07de      	lsls	r6, r3, #31
 80056d0:	d508      	bpl.n	80056e4 <_printf_i+0x14c>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4299      	cmp	r1, r3
 80056d8:	bfde      	ittt	le
 80056da:	2330      	movle	r3, #48	; 0x30
 80056dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80056e4:	1b52      	subs	r2, r2, r5
 80056e6:	6122      	str	r2, [r4, #16]
 80056e8:	f8cd a000 	str.w	sl, [sp]
 80056ec:	464b      	mov	r3, r9
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff fee2 	bl	80054bc <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14c      	bne.n	8005796 <_printf_i+0x1fe>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005700:	b004      	add	sp, #16
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	4835      	ldr	r0, [pc, #212]	; (80057dc <_printf_i+0x244>)
 8005708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800570c:	6829      	ldr	r1, [r5, #0]
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f851 6b04 	ldr.w	r6, [r1], #4
 8005714:	6029      	str	r1, [r5, #0]
 8005716:	061d      	lsls	r5, r3, #24
 8005718:	d514      	bpl.n	8005744 <_printf_i+0x1ac>
 800571a:	07df      	lsls	r7, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b91e      	cbnz	r6, 800572e <_printf_i+0x196>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f023 0320 	bic.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	2310      	movs	r3, #16
 8005730:	e7b0      	b.n	8005694 <_printf_i+0xfc>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	2378      	movs	r3, #120	; 0x78
 800573c:	4828      	ldr	r0, [pc, #160]	; (80057e0 <_printf_i+0x248>)
 800573e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005742:	e7e3      	b.n	800570c <_printf_i+0x174>
 8005744:	0659      	lsls	r1, r3, #25
 8005746:	bf48      	it	mi
 8005748:	b2b6      	uxthmi	r6, r6
 800574a:	e7e6      	b.n	800571a <_printf_i+0x182>
 800574c:	4615      	mov	r5, r2
 800574e:	e7bb      	b.n	80056c8 <_printf_i+0x130>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6826      	ldr	r6, [r4, #0]
 8005754:	6961      	ldr	r1, [r4, #20]
 8005756:	1d18      	adds	r0, r3, #4
 8005758:	6028      	str	r0, [r5, #0]
 800575a:	0635      	lsls	r5, r6, #24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	d501      	bpl.n	8005764 <_printf_i+0x1cc>
 8005760:	6019      	str	r1, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0x1d2>
 8005764:	0670      	lsls	r0, r6, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0x1c8>
 8005768:	8019      	strh	r1, [r3, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	4615      	mov	r5, r2
 8005770:	e7ba      	b.n	80056e8 <_printf_i+0x150>
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	602a      	str	r2, [r5, #0]
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	2100      	movs	r1, #0
 800577e:	4628      	mov	r0, r5
 8005780:	f7fa fd2e 	bl	80001e0 <memchr>
 8005784:	b108      	cbz	r0, 800578a <_printf_i+0x1f2>
 8005786:	1b40      	subs	r0, r0, r5
 8005788:	6060      	str	r0, [r4, #4]
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	2300      	movs	r3, #0
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	e7a8      	b.n	80056e8 <_printf_i+0x150>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	462a      	mov	r2, r5
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	47d0      	blx	sl
 80057a0:	3001      	adds	r0, #1
 80057a2:	d0ab      	beq.n	80056fc <_printf_i+0x164>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	d413      	bmi.n	80057d2 <_printf_i+0x23a>
 80057aa:	68e0      	ldr	r0, [r4, #12]
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	4298      	cmp	r0, r3
 80057b0:	bfb8      	it	lt
 80057b2:	4618      	movlt	r0, r3
 80057b4:	e7a4      	b.n	8005700 <_printf_i+0x168>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	47d0      	blx	sl
 80057c0:	3001      	adds	r0, #1
 80057c2:	d09b      	beq.n	80056fc <_printf_i+0x164>
 80057c4:	3501      	adds	r5, #1
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	9903      	ldr	r1, [sp, #12]
 80057ca:	1a5b      	subs	r3, r3, r1
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dcf2      	bgt.n	80057b6 <_printf_i+0x21e>
 80057d0:	e7eb      	b.n	80057aa <_printf_i+0x212>
 80057d2:	2500      	movs	r5, #0
 80057d4:	f104 0619 	add.w	r6, r4, #25
 80057d8:	e7f5      	b.n	80057c6 <_printf_i+0x22e>
 80057da:	bf00      	nop
 80057dc:	080079da 	.word	0x080079da
 80057e0:	080079eb 	.word	0x080079eb

080057e4 <iprintf>:
 80057e4:	b40f      	push	{r0, r1, r2, r3}
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <iprintf+0x2c>)
 80057e8:	b513      	push	{r0, r1, r4, lr}
 80057ea:	681c      	ldr	r4, [r3, #0]
 80057ec:	b124      	cbz	r4, 80057f8 <iprintf+0x14>
 80057ee:	69a3      	ldr	r3, [r4, #24]
 80057f0:	b913      	cbnz	r3, 80057f8 <iprintf+0x14>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 fee2 	bl	80065bc <__sinit>
 80057f8:	ab05      	add	r3, sp, #20
 80057fa:	9a04      	ldr	r2, [sp, #16]
 80057fc:	68a1      	ldr	r1, [r4, #8]
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	4620      	mov	r0, r4
 8005802:	f001 fc3b 	bl	800707c <_vfiprintf_r>
 8005806:	b002      	add	sp, #8
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	b004      	add	sp, #16
 800580e:	4770      	bx	lr
 8005810:	2000000c 	.word	0x2000000c

08005814 <quorem>:
 8005814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	6903      	ldr	r3, [r0, #16]
 800581a:	690c      	ldr	r4, [r1, #16]
 800581c:	42a3      	cmp	r3, r4
 800581e:	4607      	mov	r7, r0
 8005820:	f2c0 8081 	blt.w	8005926 <quorem+0x112>
 8005824:	3c01      	subs	r4, #1
 8005826:	f101 0814 	add.w	r8, r1, #20
 800582a:	f100 0514 	add.w	r5, r0, #20
 800582e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800583c:	3301      	adds	r3, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005848:	fbb2 f6f3 	udiv	r6, r2, r3
 800584c:	d331      	bcc.n	80058b2 <quorem+0x9e>
 800584e:	f04f 0e00 	mov.w	lr, #0
 8005852:	4640      	mov	r0, r8
 8005854:	46ac      	mov	ip, r5
 8005856:	46f2      	mov	sl, lr
 8005858:	f850 2b04 	ldr.w	r2, [r0], #4
 800585c:	b293      	uxth	r3, r2
 800585e:	fb06 e303 	mla	r3, r6, r3, lr
 8005862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005866:	b29b      	uxth	r3, r3
 8005868:	ebaa 0303 	sub.w	r3, sl, r3
 800586c:	f8dc a000 	ldr.w	sl, [ip]
 8005870:	0c12      	lsrs	r2, r2, #16
 8005872:	fa13 f38a 	uxtah	r3, r3, sl
 8005876:	fb06 e202 	mla	r2, r6, r2, lr
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005882:	b292      	uxth	r2, r2
 8005884:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800588c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005890:	4581      	cmp	r9, r0
 8005892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005896:	f84c 3b04 	str.w	r3, [ip], #4
 800589a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800589e:	d2db      	bcs.n	8005858 <quorem+0x44>
 80058a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80058a4:	b92b      	cbnz	r3, 80058b2 <quorem+0x9e>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	429d      	cmp	r5, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	d32e      	bcc.n	800590e <quorem+0xfa>
 80058b0:	613c      	str	r4, [r7, #16]
 80058b2:	4638      	mov	r0, r7
 80058b4:	f001 f9c0 	bl	8006c38 <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	db24      	blt.n	8005906 <quorem+0xf2>
 80058bc:	3601      	adds	r6, #1
 80058be:	4628      	mov	r0, r5
 80058c0:	f04f 0c00 	mov.w	ip, #0
 80058c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c8:	f8d0 e000 	ldr.w	lr, [r0]
 80058cc:	b293      	uxth	r3, r2
 80058ce:	ebac 0303 	sub.w	r3, ip, r3
 80058d2:	0c12      	lsrs	r2, r2, #16
 80058d4:	fa13 f38e 	uxtah	r3, r3, lr
 80058d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e6:	45c1      	cmp	r9, r8
 80058e8:	f840 3b04 	str.w	r3, [r0], #4
 80058ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058f0:	d2e8      	bcs.n	80058c4 <quorem+0xb0>
 80058f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fa:	b922      	cbnz	r2, 8005906 <quorem+0xf2>
 80058fc:	3b04      	subs	r3, #4
 80058fe:	429d      	cmp	r5, r3
 8005900:	461a      	mov	r2, r3
 8005902:	d30a      	bcc.n	800591a <quorem+0x106>
 8005904:	613c      	str	r4, [r7, #16]
 8005906:	4630      	mov	r0, r6
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1cc      	bne.n	80058b0 <quorem+0x9c>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7c7      	b.n	80058aa <quorem+0x96>
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	3b04      	subs	r3, #4
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1f0      	bne.n	8005904 <quorem+0xf0>
 8005922:	3c01      	subs	r4, #1
 8005924:	e7eb      	b.n	80058fe <quorem+0xea>
 8005926:	2000      	movs	r0, #0
 8005928:	e7ee      	b.n	8005908 <quorem+0xf4>
 800592a:	0000      	movs	r0, r0
 800592c:	0000      	movs	r0, r0
	...

08005930 <_dtoa_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b04 	vpush	{d8-d9}
 8005938:	ec57 6b10 	vmov	r6, r7, d0
 800593c:	b093      	sub	sp, #76	; 0x4c
 800593e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005944:	9106      	str	r1, [sp, #24]
 8005946:	ee10 aa10 	vmov	sl, s0
 800594a:	4604      	mov	r4, r0
 800594c:	9209      	str	r2, [sp, #36]	; 0x24
 800594e:	930c      	str	r3, [sp, #48]	; 0x30
 8005950:	46bb      	mov	fp, r7
 8005952:	b975      	cbnz	r5, 8005972 <_dtoa_r+0x42>
 8005954:	2010      	movs	r0, #16
 8005956:	f000 fed7 	bl	8006708 <malloc>
 800595a:	4602      	mov	r2, r0
 800595c:	6260      	str	r0, [r4, #36]	; 0x24
 800595e:	b920      	cbnz	r0, 800596a <_dtoa_r+0x3a>
 8005960:	4ba7      	ldr	r3, [pc, #668]	; (8005c00 <_dtoa_r+0x2d0>)
 8005962:	21ea      	movs	r1, #234	; 0xea
 8005964:	48a7      	ldr	r0, [pc, #668]	; (8005c04 <_dtoa_r+0x2d4>)
 8005966:	f001 fddf 	bl	8007528 <__assert_func>
 800596a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800596e:	6005      	str	r5, [r0, #0]
 8005970:	60c5      	str	r5, [r0, #12]
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	b151      	cbz	r1, 800598e <_dtoa_r+0x5e>
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	604a      	str	r2, [r1, #4]
 800597c:	2301      	movs	r3, #1
 800597e:	4093      	lsls	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
 8005982:	4620      	mov	r0, r4
 8005984:	f000 ff16 	bl	80067b4 <_Bfree>
 8005988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	1e3b      	subs	r3, r7, #0
 8005990:	bfaa      	itet	ge
 8005992:	2300      	movge	r3, #0
 8005994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005998:	f8c8 3000 	strge.w	r3, [r8]
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <_dtoa_r+0x2d8>)
 800599e:	bfbc      	itt	lt
 80059a0:	2201      	movlt	r2, #1
 80059a2:	f8c8 2000 	strlt.w	r2, [r8]
 80059a6:	ea33 030b 	bics.w	r3, r3, fp
 80059aa:	d11b      	bne.n	80059e4 <_dtoa_r+0xb4>
 80059ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b8:	4333      	orrs	r3, r6
 80059ba:	f000 8592 	beq.w	80064e2 <_dtoa_r+0xbb2>
 80059be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c0:	b963      	cbnz	r3, 80059dc <_dtoa_r+0xac>
 80059c2:	4b92      	ldr	r3, [pc, #584]	; (8005c0c <_dtoa_r+0x2dc>)
 80059c4:	e022      	b.n	8005a0c <_dtoa_r+0xdc>
 80059c6:	4b92      	ldr	r3, [pc, #584]	; (8005c10 <_dtoa_r+0x2e0>)
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	3308      	adds	r3, #8
 80059cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	b013      	add	sp, #76	; 0x4c
 80059d4:	ecbd 8b04 	vpop	{d8-d9}
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <_dtoa_r+0x2dc>)
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	3303      	adds	r3, #3
 80059e2:	e7f3      	b.n	80059cc <_dtoa_r+0x9c>
 80059e4:	2200      	movs	r2, #0
 80059e6:	2300      	movs	r3, #0
 80059e8:	4650      	mov	r0, sl
 80059ea:	4659      	mov	r1, fp
 80059ec:	f7fb f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 80059f0:	ec4b ab19 	vmov	d9, sl, fp
 80059f4:	4680      	mov	r8, r0
 80059f6:	b158      	cbz	r0, 8005a10 <_dtoa_r+0xe0>
 80059f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059fa:	2301      	movs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 856b 	beq.w	80064dc <_dtoa_r+0xbac>
 8005a06:	4883      	ldr	r0, [pc, #524]	; (8005c14 <_dtoa_r+0x2e4>)
 8005a08:	6018      	str	r0, [r3, #0]
 8005a0a:	1e43      	subs	r3, r0, #1
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	e7df      	b.n	80059d0 <_dtoa_r+0xa0>
 8005a10:	ec4b ab10 	vmov	d0, sl, fp
 8005a14:	aa10      	add	r2, sp, #64	; 0x40
 8005a16:	a911      	add	r1, sp, #68	; 0x44
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f001 f9b3 	bl	8006d84 <__d2b>
 8005a1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a22:	ee08 0a10 	vmov	s16, r0
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	f000 8084 	beq.w	8005b34 <_dtoa_r+0x204>
 8005a2c:	ee19 3a90 	vmov	r3, s19
 8005a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a38:	4656      	mov	r6, sl
 8005a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a46:	4b74      	ldr	r3, [pc, #464]	; (8005c18 <_dtoa_r+0x2e8>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fc1b 	bl	8000288 <__aeabi_dsub>
 8005a52:	a365      	add	r3, pc, #404	; (adr r3, 8005be8 <_dtoa_r+0x2b8>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fdce 	bl	80005f8 <__aeabi_dmul>
 8005a5c:	a364      	add	r3, pc, #400	; (adr r3, 8005bf0 <_dtoa_r+0x2c0>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fc13 	bl	800028c <__adddf3>
 8005a66:	4606      	mov	r6, r0
 8005a68:	4628      	mov	r0, r5
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa fd5a 	bl	8000524 <__aeabi_i2d>
 8005a70:	a361      	add	r3, pc, #388	; (adr r3, 8005bf8 <_dtoa_r+0x2c8>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fdbf 	bl	80005f8 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fa fc03 	bl	800028c <__adddf3>
 8005a86:	4606      	mov	r6, r0
 8005a88:	460f      	mov	r7, r1
 8005a8a:	f7fb f865 	bl	8000b58 <__aeabi_d2iz>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	9000      	str	r0, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f820 	bl	8000adc <__aeabi_dcmplt>
 8005a9c:	b150      	cbz	r0, 8005ab4 <_dtoa_r+0x184>
 8005a9e:	9800      	ldr	r0, [sp, #0]
 8005aa0:	f7fa fd40 	bl	8000524 <__aeabi_i2d>
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	f7fb f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aac:	b910      	cbnz	r0, 8005ab4 <_dtoa_r+0x184>
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	2b16      	cmp	r3, #22
 8005ab8:	d85a      	bhi.n	8005b70 <_dtoa_r+0x240>
 8005aba:	9a00      	ldr	r2, [sp, #0]
 8005abc:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <_dtoa_r+0x2ec>)
 8005abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	ec51 0b19 	vmov	r0, r1, d9
 8005aca:	f7fb f807 	bl	8000adc <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d050      	beq.n	8005b74 <_dtoa_r+0x244>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8005adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ade:	1b5d      	subs	r5, r3, r5
 8005ae0:	1e6b      	subs	r3, r5, #1
 8005ae2:	9305      	str	r3, [sp, #20]
 8005ae4:	bf45      	ittet	mi
 8005ae6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005aea:	9304      	strmi	r3, [sp, #16]
 8005aec:	2300      	movpl	r3, #0
 8005aee:	2300      	movmi	r3, #0
 8005af0:	bf4c      	ite	mi
 8005af2:	9305      	strmi	r3, [sp, #20]
 8005af4:	9304      	strpl	r3, [sp, #16]
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db3d      	blt.n	8005b78 <_dtoa_r+0x248>
 8005afc:	9b05      	ldr	r3, [sp, #20]
 8005afe:	9a00      	ldr	r2, [sp, #0]
 8005b00:	920a      	str	r2, [sp, #40]	; 0x28
 8005b02:	4413      	add	r3, r2
 8005b04:	9305      	str	r3, [sp, #20]
 8005b06:	2300      	movs	r3, #0
 8005b08:	9307      	str	r3, [sp, #28]
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	f200 8089 	bhi.w	8005c24 <_dtoa_r+0x2f4>
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	bfc4      	itt	gt
 8005b16:	3b04      	subgt	r3, #4
 8005b18:	9306      	strgt	r3, [sp, #24]
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b20:	bfcc      	ite	gt
 8005b22:	2500      	movgt	r5, #0
 8005b24:	2501      	movle	r5, #1
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f200 8087 	bhi.w	8005c3a <_dtoa_r+0x30a>
 8005b2c:	e8df f003 	tbb	[pc, r3]
 8005b30:	59383a2d 	.word	0x59383a2d
 8005b34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b38:	441d      	add	r5, r3
 8005b3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	bfc1      	itttt	gt
 8005b42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b52:	bfda      	itte	le
 8005b54:	f1c3 0320 	rsble	r3, r3, #32
 8005b58:	fa06 f003 	lslle.w	r0, r6, r3
 8005b5c:	4318      	orrgt	r0, r3
 8005b5e:	f7fa fcd1 	bl	8000504 <__aeabi_ui2d>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4606      	mov	r6, r0
 8005b66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b6a:	3d01      	subs	r5, #1
 8005b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b6e:	e76a      	b.n	8005a46 <_dtoa_r+0x116>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e7b2      	b.n	8005ada <_dtoa_r+0x1aa>
 8005b74:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b76:	e7b1      	b.n	8005adc <_dtoa_r+0x1ac>
 8005b78:	9b04      	ldr	r3, [sp, #16]
 8005b7a:	9a00      	ldr	r2, [sp, #0]
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	4253      	negs	r3, r2
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	e7bf      	b.n	8005b0a <_dtoa_r+0x1da>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc55      	bgt.n	8005c40 <_dtoa_r+0x310>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	e00c      	b.n	8005bba <_dtoa_r+0x28a>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e7f3      	b.n	8005b8c <_dtoa_r+0x25c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba8:	9308      	str	r3, [sp, #32]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	bfb8      	it	lt
 8005bb8:	2301      	movlt	r3, #1
 8005bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6042      	str	r2, [r0, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	f102 0614 	add.w	r6, r2, #20
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	d93d      	bls.n	8005c48 <_dtoa_r+0x318>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fdb1 	bl	8006734 <_Balloc>
 8005bd2:	9001      	str	r0, [sp, #4]
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d13b      	bne.n	8005c50 <_dtoa_r+0x320>
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <_dtoa_r+0x2f0>)
 8005bda:	4602      	mov	r2, r0
 8005bdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005be0:	e6c0      	b.n	8005964 <_dtoa_r+0x34>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7df      	b.n	8005ba6 <_dtoa_r+0x276>
 8005be6:	bf00      	nop
 8005be8:	636f4361 	.word	0x636f4361
 8005bec:	3fd287a7 	.word	0x3fd287a7
 8005bf0:	8b60c8b3 	.word	0x8b60c8b3
 8005bf4:	3fc68a28 	.word	0x3fc68a28
 8005bf8:	509f79fb 	.word	0x509f79fb
 8005bfc:	3fd34413 	.word	0x3fd34413
 8005c00:	08007a09 	.word	0x08007a09
 8005c04:	08007a20 	.word	0x08007a20
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	08007a05 	.word	0x08007a05
 8005c10:	080079fc 	.word	0x080079fc
 8005c14:	080079d9 	.word	0x080079d9
 8005c18:	3ff80000 	.word	0x3ff80000
 8005c1c:	08007b70 	.word	0x08007b70
 8005c20:	08007a7b 	.word	0x08007a7b
 8005c24:	2501      	movs	r5, #1
 8005c26:	2300      	movs	r3, #0
 8005c28:	9306      	str	r3, [sp, #24]
 8005c2a:	9508      	str	r5, [sp, #32]
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2312      	movs	r3, #18
 8005c38:	e7b0      	b.n	8005b9c <_dtoa_r+0x26c>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9308      	str	r3, [sp, #32]
 8005c3e:	e7f5      	b.n	8005c2c <_dtoa_r+0x2fc>
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c46:	e7b8      	b.n	8005bba <_dtoa_r+0x28a>
 8005c48:	3101      	adds	r1, #1
 8005c4a:	6041      	str	r1, [r0, #4]
 8005c4c:	0052      	lsls	r2, r2, #1
 8005c4e:	e7b8      	b.n	8005bc2 <_dtoa_r+0x292>
 8005c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	2b0e      	cmp	r3, #14
 8005c5a:	f200 809d 	bhi.w	8005d98 <_dtoa_r+0x468>
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	f000 809a 	beq.w	8005d98 <_dtoa_r+0x468>
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd32      	ble.n	8005cd0 <_dtoa_r+0x3a0>
 8005c6a:	4ab7      	ldr	r2, [pc, #732]	; (8005f48 <_dtoa_r+0x618>)
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c78:	9b00      	ldr	r3, [sp, #0]
 8005c7a:	05d8      	lsls	r0, r3, #23
 8005c7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c80:	d516      	bpl.n	8005cb0 <_dtoa_r+0x380>
 8005c82:	4bb2      	ldr	r3, [pc, #712]	; (8005f4c <_dtoa_r+0x61c>)
 8005c84:	ec51 0b19 	vmov	r0, r1, d9
 8005c88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c8c:	f7fa fdde 	bl	800084c <__aeabi_ddiv>
 8005c90:	f007 070f 	and.w	r7, r7, #15
 8005c94:	4682      	mov	sl, r0
 8005c96:	468b      	mov	fp, r1
 8005c98:	2503      	movs	r5, #3
 8005c9a:	4eac      	ldr	r6, [pc, #688]	; (8005f4c <_dtoa_r+0x61c>)
 8005c9c:	b957      	cbnz	r7, 8005cb4 <_dtoa_r+0x384>
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa fdd1 	bl	800084c <__aeabi_ddiv>
 8005caa:	4682      	mov	sl, r0
 8005cac:	468b      	mov	fp, r1
 8005cae:	e028      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005cb0:	2502      	movs	r5, #2
 8005cb2:	e7f2      	b.n	8005c9a <_dtoa_r+0x36a>
 8005cb4:	07f9      	lsls	r1, r7, #31
 8005cb6:	d508      	bpl.n	8005cca <_dtoa_r+0x39a>
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cc0:	f7fa fc9a 	bl	80005f8 <__aeabi_dmul>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	107f      	asrs	r7, r7, #1
 8005ccc:	3608      	adds	r6, #8
 8005cce:	e7e5      	b.n	8005c9c <_dtoa_r+0x36c>
 8005cd0:	f000 809b 	beq.w	8005e0a <_dtoa_r+0x4da>
 8005cd4:	9b00      	ldr	r3, [sp, #0]
 8005cd6:	4f9d      	ldr	r7, [pc, #628]	; (8005f4c <_dtoa_r+0x61c>)
 8005cd8:	425e      	negs	r6, r3
 8005cda:	4b9b      	ldr	r3, [pc, #620]	; (8005f48 <_dtoa_r+0x618>)
 8005cdc:	f006 020f 	and.w	r2, r6, #15
 8005ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	ec51 0b19 	vmov	r0, r1, d9
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	1136      	asrs	r6, r6, #4
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	468b      	mov	fp, r1
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2502      	movs	r5, #2
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d17a      	bne.n	8005df4 <_dtoa_r+0x4c4>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d3      	bne.n	8005caa <_dtoa_r+0x37a>
 8005d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8082 	beq.w	8005e0e <_dtoa_r+0x4de>
 8005d0a:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <_dtoa_r+0x620>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4659      	mov	r1, fp
 8005d12:	f7fa fee3 	bl	8000adc <__aeabi_dcmplt>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d079      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d076      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd36      	ble.n	8005d94 <_dtoa_r+0x464>
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	1e5f      	subs	r7, r3, #1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b88      	ldr	r3, [pc, #544]	; (8005f54 <_dtoa_r+0x624>)
 8005d32:	f7fa fc61 	bl	80005f8 <__aeabi_dmul>
 8005d36:	9e02      	ldr	r6, [sp, #8]
 8005d38:	4682      	mov	sl, r0
 8005d3a:	468b      	mov	fp, r1
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fa fbf0 	bl	8000524 <__aeabi_i2d>
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	f7fa fc56 	bl	80005f8 <__aeabi_dmul>
 8005d4c:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <_dtoa_r+0x628>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f7fa fa9c 	bl	800028c <__adddf3>
 8005d54:	46d0      	mov	r8, sl
 8005d56:	46d9      	mov	r9, fp
 8005d58:	4682      	mov	sl, r0
 8005d5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d158      	bne.n	8005e14 <_dtoa_r+0x4e4>
 8005d62:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <_dtoa_r+0x62c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	4640      	mov	r0, r8
 8005d68:	4649      	mov	r1, r9
 8005d6a:	f7fa fa8d 	bl	8000288 <__aeabi_dsub>
 8005d6e:	4652      	mov	r2, sl
 8005d70:	465b      	mov	r3, fp
 8005d72:	4680      	mov	r8, r0
 8005d74:	4689      	mov	r9, r1
 8005d76:	f7fa fecf 	bl	8000b18 <__aeabi_dcmpgt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 8295 	bne.w	80062aa <_dtoa_r+0x97a>
 8005d80:	4652      	mov	r2, sl
 8005d82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fea7 	bl	8000adc <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 8289 	bne.w	80062a6 <_dtoa_r+0x976>
 8005d94:	ec5b ab19 	vmov	sl, fp, d9
 8005d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f2c0 8148 	blt.w	8006030 <_dtoa_r+0x700>
 8005da0:	9a00      	ldr	r2, [sp, #0]
 8005da2:	2a0e      	cmp	r2, #14
 8005da4:	f300 8144 	bgt.w	8006030 <_dtoa_r+0x700>
 8005da8:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <_dtoa_r+0x618>)
 8005daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f280 80d5 	bge.w	8005f64 <_dtoa_r+0x634>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f300 80d1 	bgt.w	8005f64 <_dtoa_r+0x634>
 8005dc2:	f040 826f 	bne.w	80062a4 <_dtoa_r+0x974>
 8005dc6:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <_dtoa_r+0x62c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fc13 	bl	80005f8 <__aeabi_dmul>
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	f7fa fe95 	bl	8000b04 <__aeabi_dcmpge>
 8005dda:	9e03      	ldr	r6, [sp, #12]
 8005ddc:	4637      	mov	r7, r6
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f040 8245 	bne.w	800626e <_dtoa_r+0x93e>
 8005de4:	9d01      	ldr	r5, [sp, #4]
 8005de6:	2331      	movs	r3, #49	; 0x31
 8005de8:	f805 3b01 	strb.w	r3, [r5], #1
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	e240      	b.n	8006276 <_dtoa_r+0x946>
 8005df4:	07f2      	lsls	r2, r6, #31
 8005df6:	d505      	bpl.n	8005e04 <_dtoa_r+0x4d4>
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	f7fa fbfc 	bl	80005f8 <__aeabi_dmul>
 8005e00:	3501      	adds	r5, #1
 8005e02:	2301      	movs	r3, #1
 8005e04:	1076      	asrs	r6, r6, #1
 8005e06:	3708      	adds	r7, #8
 8005e08:	e777      	b.n	8005cfa <_dtoa_r+0x3ca>
 8005e0a:	2502      	movs	r5, #2
 8005e0c:	e779      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005e0e:	9f00      	ldr	r7, [sp, #0]
 8005e10:	9e03      	ldr	r6, [sp, #12]
 8005e12:	e794      	b.n	8005d3e <_dtoa_r+0x40e>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <_dtoa_r+0x618>)
 8005e18:	4431      	add	r1, r6
 8005e1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e1c:	9908      	ldr	r1, [sp, #32]
 8005e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d043      	beq.n	8005eb2 <_dtoa_r+0x582>
 8005e2a:	494d      	ldr	r1, [pc, #308]	; (8005f60 <_dtoa_r+0x630>)
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7fa fd0d 	bl	800084c <__aeabi_ddiv>
 8005e32:	4652      	mov	r2, sl
 8005e34:	465b      	mov	r3, fp
 8005e36:	f7fa fa27 	bl	8000288 <__aeabi_dsub>
 8005e3a:	9d01      	ldr	r5, [sp, #4]
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	468b      	mov	fp, r1
 8005e40:	4649      	mov	r1, r9
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7fa fe88 	bl	8000b58 <__aeabi_d2iz>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	f7fa fb6b 	bl	8000524 <__aeabi_i2d>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fa17 	bl	8000288 <__aeabi_dsub>
 8005e5a:	3630      	adds	r6, #48	; 0x30
 8005e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	465b      	mov	r3, fp
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f7fa fe38 	bl	8000adc <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d163      	bne.n	8005f38 <_dtoa_r+0x608>
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	4936      	ldr	r1, [pc, #216]	; (8005f50 <_dtoa_r+0x620>)
 8005e76:	2000      	movs	r0, #0
 8005e78:	f7fa fa06 	bl	8000288 <__aeabi_dsub>
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	465b      	mov	r3, fp
 8005e80:	f7fa fe2c 	bl	8000adc <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 80b5 	bne.w	8005ff4 <_dtoa_r+0x6c4>
 8005e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	d081      	beq.n	8005d94 <_dtoa_r+0x464>
 8005e90:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <_dtoa_r+0x624>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	4650      	mov	r0, sl
 8005e96:	4659      	mov	r1, fp
 8005e98:	f7fa fbae 	bl	80005f8 <__aeabi_dmul>
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <_dtoa_r+0x624>)
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f7fa fba6 	bl	80005f8 <__aeabi_dmul>
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	e7c6      	b.n	8005e40 <_dtoa_r+0x510>
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	f7fa fb9f 	bl	80005f8 <__aeabi_dmul>
 8005eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ebc:	9d01      	ldr	r5, [sp, #4]
 8005ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	f7fa fe46 	bl	8000b58 <__aeabi_d2iz>
 8005ecc:	4606      	mov	r6, r0
 8005ece:	f7fa fb29 	bl	8000524 <__aeabi_i2d>
 8005ed2:	3630      	adds	r6, #48	; 0x30
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa f9d4 	bl	8000288 <__aeabi_dsub>
 8005ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	429d      	cmp	r5, r3
 8005ee8:	4680      	mov	r8, r0
 8005eea:	4689      	mov	r9, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	d124      	bne.n	8005f3c <_dtoa_r+0x60c>
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <_dtoa_r+0x630>)
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	f7fa f9c8 	bl	800028c <__adddf3>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4640      	mov	r0, r8
 8005f02:	4649      	mov	r1, r9
 8005f04:	f7fa fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d173      	bne.n	8005ff4 <_dtoa_r+0x6c4>
 8005f0c:	4652      	mov	r2, sl
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4913      	ldr	r1, [pc, #76]	; (8005f60 <_dtoa_r+0x630>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7fa f9b8 	bl	8000288 <__aeabi_dsub>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fddc 	bl	8000adc <__aeabi_dcmplt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f43f af35 	beq.w	8005d94 <_dtoa_r+0x464>
 8005f2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f2c:	1e6b      	subs	r3, r5, #1
 8005f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d0f8      	beq.n	8005f2a <_dtoa_r+0x5fa>
 8005f38:	9700      	str	r7, [sp, #0]
 8005f3a:	e049      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <_dtoa_r+0x624>)
 8005f3e:	f7fa fb5b 	bl	80005f8 <__aeabi_dmul>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	e7bd      	b.n	8005ec4 <_dtoa_r+0x594>
 8005f48:	08007b70 	.word	0x08007b70
 8005f4c:	08007b48 	.word	0x08007b48
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	40240000 	.word	0x40240000
 8005f58:	401c0000 	.word	0x401c0000
 8005f5c:	40140000 	.word	0x40140000
 8005f60:	3fe00000 	.word	0x3fe00000
 8005f64:	9d01      	ldr	r5, [sp, #4]
 8005f66:	4656      	mov	r6, sl
 8005f68:	465f      	mov	r7, fp
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	4630      	mov	r0, r6
 8005f70:	4639      	mov	r1, r7
 8005f72:	f7fa fc6b 	bl	800084c <__aeabi_ddiv>
 8005f76:	f7fa fdef 	bl	8000b58 <__aeabi_d2iz>
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	f7fa fad2 	bl	8000524 <__aeabi_i2d>
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f94:	f7fa f978 	bl	8000288 <__aeabi_dsub>
 8005f98:	f805 6b01 	strb.w	r6, [r5], #1
 8005f9c:	9e01      	ldr	r6, [sp, #4]
 8005f9e:	9f03      	ldr	r7, [sp, #12]
 8005fa0:	1bae      	subs	r6, r5, r6
 8005fa2:	42b7      	cmp	r7, r6
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	d135      	bne.n	8006016 <_dtoa_r+0x6e6>
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4642      	mov	r2, r8
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	f7fa fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8005fba:	b9d0      	cbnz	r0, 8005ff2 <_dtoa_r+0x6c2>
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc8:	b110      	cbz	r0, 8005fd0 <_dtoa_r+0x6a0>
 8005fca:	f01a 0f01 	tst.w	sl, #1
 8005fce:	d110      	bne.n	8005ff2 <_dtoa_r+0x6c2>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	ee18 1a10 	vmov	r1, s16
 8005fd6:	f000 fbed 	bl	80067b4 <_Bfree>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9800      	ldr	r0, [sp, #0]
 8005fde:	702b      	strb	r3, [r5, #0]
 8005fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	6018      	str	r0, [r3, #0]
 8005fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f43f acf1 	beq.w	80059d0 <_dtoa_r+0xa0>
 8005fee:	601d      	str	r5, [r3, #0]
 8005ff0:	e4ee      	b.n	80059d0 <_dtoa_r+0xa0>
 8005ff2:	9f00      	ldr	r7, [sp, #0]
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ffc:	2a39      	cmp	r2, #57	; 0x39
 8005ffe:	d106      	bne.n	800600e <_dtoa_r+0x6de>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d1f7      	bne.n	8005ff6 <_dtoa_r+0x6c6>
 8006006:	9901      	ldr	r1, [sp, #4]
 8006008:	2230      	movs	r2, #48	; 0x30
 800600a:	3701      	adds	r7, #1
 800600c:	700a      	strb	r2, [r1, #0]
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	3201      	adds	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e790      	b.n	8005f38 <_dtoa_r+0x608>
 8006016:	4ba6      	ldr	r3, [pc, #664]	; (80062b0 <_dtoa_r+0x980>)
 8006018:	2200      	movs	r2, #0
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	f7fa fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800602a:	2800      	cmp	r0, #0
 800602c:	d09d      	beq.n	8005f6a <_dtoa_r+0x63a>
 800602e:	e7cf      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80d7 	beq.w	80061e6 <_dtoa_r+0x8b6>
 8006038:	9a06      	ldr	r2, [sp, #24]
 800603a:	2a01      	cmp	r2, #1
 800603c:	f300 80ba 	bgt.w	80061b4 <_dtoa_r+0x884>
 8006040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006042:	2a00      	cmp	r2, #0
 8006044:	f000 80b2 	beq.w	80061ac <_dtoa_r+0x87c>
 8006048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800604c:	9e07      	ldr	r6, [sp, #28]
 800604e:	9d04      	ldr	r5, [sp, #16]
 8006050:	9a04      	ldr	r2, [sp, #16]
 8006052:	441a      	add	r2, r3
 8006054:	9204      	str	r2, [sp, #16]
 8006056:	9a05      	ldr	r2, [sp, #20]
 8006058:	2101      	movs	r1, #1
 800605a:	441a      	add	r2, r3
 800605c:	4620      	mov	r0, r4
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	f000 fc60 	bl	8006924 <__i2b>
 8006064:	4607      	mov	r7, r0
 8006066:	2d00      	cmp	r5, #0
 8006068:	dd0c      	ble.n	8006084 <_dtoa_r+0x754>
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd09      	ble.n	8006084 <_dtoa_r+0x754>
 8006070:	42ab      	cmp	r3, r5
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	bfa8      	it	ge
 8006076:	462b      	movge	r3, r5
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	9204      	str	r2, [sp, #16]
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	1aed      	subs	r5, r5, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	b31b      	cbz	r3, 80060d0 <_dtoa_r+0x7a0>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80af 	beq.w	80061ee <_dtoa_r+0x8be>
 8006090:	2e00      	cmp	r6, #0
 8006092:	dd13      	ble.n	80060bc <_dtoa_r+0x78c>
 8006094:	4639      	mov	r1, r7
 8006096:	4632      	mov	r2, r6
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fd03 	bl	8006aa4 <__pow5mult>
 800609e:	ee18 2a10 	vmov	r2, s16
 80060a2:	4601      	mov	r1, r0
 80060a4:	4607      	mov	r7, r0
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fc52 	bl	8006950 <__multiply>
 80060ac:	ee18 1a10 	vmov	r1, s16
 80060b0:	4680      	mov	r8, r0
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb7e 	bl	80067b4 <_Bfree>
 80060b8:	ee08 8a10 	vmov	s16, r8
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	1b9a      	subs	r2, r3, r6
 80060c0:	d006      	beq.n	80060d0 <_dtoa_r+0x7a0>
 80060c2:	ee18 1a10 	vmov	r1, s16
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fcec 	bl	8006aa4 <__pow5mult>
 80060cc:	ee08 0a10 	vmov	s16, r0
 80060d0:	2101      	movs	r1, #1
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 fc26 	bl	8006924 <__i2b>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	4606      	mov	r6, r0
 80060de:	f340 8088 	ble.w	80061f2 <_dtoa_r+0x8c2>
 80060e2:	461a      	mov	r2, r3
 80060e4:	4601      	mov	r1, r0
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fcdc 	bl	8006aa4 <__pow5mult>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	4606      	mov	r6, r0
 80060f2:	f340 8081 	ble.w	80061f8 <_dtoa_r+0x8c8>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	6933      	ldr	r3, [r6, #16]
 80060fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006100:	6918      	ldr	r0, [r3, #16]
 8006102:	f000 fbbf 	bl	8006884 <__hi0bits>
 8006106:	f1c0 0020 	rsb	r0, r0, #32
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	4418      	add	r0, r3
 800610e:	f010 001f 	ands.w	r0, r0, #31
 8006112:	f000 8092 	beq.w	800623a <_dtoa_r+0x90a>
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	2b04      	cmp	r3, #4
 800611c:	f340 808a 	ble.w	8006234 <_dtoa_r+0x904>
 8006120:	f1c0 001c 	rsb	r0, r0, #28
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	4403      	add	r3, r0
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	4403      	add	r3, r0
 800612e:	4405      	add	r5, r0
 8006130:	9305      	str	r3, [sp, #20]
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dd07      	ble.n	8006148 <_dtoa_r+0x818>
 8006138:	ee18 1a10 	vmov	r1, s16
 800613c:	461a      	mov	r2, r3
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fd0a 	bl	8006b58 <__lshift>
 8006144:	ee08 0a10 	vmov	s16, r0
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd05      	ble.n	800615a <_dtoa_r+0x82a>
 800614e:	4631      	mov	r1, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4620      	mov	r0, r4
 8006154:	f000 fd00 	bl	8006b58 <__lshift>
 8006158:	4606      	mov	r6, r0
 800615a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d06e      	beq.n	800623e <_dtoa_r+0x90e>
 8006160:	ee18 0a10 	vmov	r0, s16
 8006164:	4631      	mov	r1, r6
 8006166:	f000 fd67 	bl	8006c38 <__mcmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	da67      	bge.n	800623e <_dtoa_r+0x90e>
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	ee18 1a10 	vmov	r1, s16
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	220a      	movs	r2, #10
 800617a:	2300      	movs	r3, #0
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fb3b 	bl	80067f8 <__multadd>
 8006182:	9b08      	ldr	r3, [sp, #32]
 8006184:	ee08 0a10 	vmov	s16, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 81b1 	beq.w	80064f0 <_dtoa_r+0xbc0>
 800618e:	2300      	movs	r3, #0
 8006190:	4639      	mov	r1, r7
 8006192:	220a      	movs	r2, #10
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fb2f 	bl	80067f8 <__multadd>
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	4607      	mov	r7, r0
 80061a0:	f300 808e 	bgt.w	80062c0 <_dtoa_r+0x990>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc51      	bgt.n	800624e <_dtoa_r+0x91e>
 80061aa:	e089      	b.n	80062c0 <_dtoa_r+0x990>
 80061ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061b2:	e74b      	b.n	800604c <_dtoa_r+0x71c>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1e5e      	subs	r6, r3, #1
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	42b3      	cmp	r3, r6
 80061bc:	bfbf      	itttt	lt
 80061be:	9b07      	ldrlt	r3, [sp, #28]
 80061c0:	9607      	strlt	r6, [sp, #28]
 80061c2:	1af2      	sublt	r2, r6, r3
 80061c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061c6:	bfb6      	itet	lt
 80061c8:	189b      	addlt	r3, r3, r2
 80061ca:	1b9e      	subge	r6, r3, r6
 80061cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	bfb8      	it	lt
 80061d2:	2600      	movlt	r6, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfb7      	itett	lt
 80061d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061e0:	1a9d      	sublt	r5, r3, r2
 80061e2:	2300      	movlt	r3, #0
 80061e4:	e734      	b.n	8006050 <_dtoa_r+0x720>
 80061e6:	9e07      	ldr	r6, [sp, #28]
 80061e8:	9d04      	ldr	r5, [sp, #16]
 80061ea:	9f08      	ldr	r7, [sp, #32]
 80061ec:	e73b      	b.n	8006066 <_dtoa_r+0x736>
 80061ee:	9a07      	ldr	r2, [sp, #28]
 80061f0:	e767      	b.n	80060c2 <_dtoa_r+0x792>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	dc18      	bgt.n	800622a <_dtoa_r+0x8fa>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	d115      	bne.n	800622a <_dtoa_r+0x8fa>
 80061fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006202:	b993      	cbnz	r3, 800622a <_dtoa_r+0x8fa>
 8006204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	b183      	cbz	r3, 8006230 <_dtoa_r+0x900>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	3301      	adds	r3, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f04f 0801 	mov.w	r8, #1
 800621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	f47f af6a 	bne.w	80060fa <_dtoa_r+0x7ca>
 8006226:	2001      	movs	r0, #1
 8006228:	e76f      	b.n	800610a <_dtoa_r+0x7da>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	e7f6      	b.n	800621e <_dtoa_r+0x8ee>
 8006230:	4698      	mov	r8, r3
 8006232:	e7f4      	b.n	800621e <_dtoa_r+0x8ee>
 8006234:	f43f af7d 	beq.w	8006132 <_dtoa_r+0x802>
 8006238:	4618      	mov	r0, r3
 800623a:	301c      	adds	r0, #28
 800623c:	e772      	b.n	8006124 <_dtoa_r+0x7f4>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dc37      	bgt.n	80062b4 <_dtoa_r+0x984>
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	dd34      	ble.n	80062b4 <_dtoa_r+0x984>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	b96b      	cbnz	r3, 800626e <_dtoa_r+0x93e>
 8006252:	4631      	mov	r1, r6
 8006254:	2205      	movs	r2, #5
 8006256:	4620      	mov	r0, r4
 8006258:	f000 face 	bl	80067f8 <__multadd>
 800625c:	4601      	mov	r1, r0
 800625e:	4606      	mov	r6, r0
 8006260:	ee18 0a10 	vmov	r0, s16
 8006264:	f000 fce8 	bl	8006c38 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	f73f adbb 	bgt.w	8005de4 <_dtoa_r+0x4b4>
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	9d01      	ldr	r5, [sp, #4]
 8006272:	43db      	mvns	r3, r3
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	4631      	mov	r1, r6
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fa99 	bl	80067b4 <_Bfree>
 8006282:	2f00      	cmp	r7, #0
 8006284:	f43f aea4 	beq.w	8005fd0 <_dtoa_r+0x6a0>
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	d005      	beq.n	800629a <_dtoa_r+0x96a>
 800628e:	45b8      	cmp	r8, r7
 8006290:	d003      	beq.n	800629a <_dtoa_r+0x96a>
 8006292:	4641      	mov	r1, r8
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fa8d 	bl	80067b4 <_Bfree>
 800629a:	4639      	mov	r1, r7
 800629c:	4620      	mov	r0, r4
 800629e:	f000 fa89 	bl	80067b4 <_Bfree>
 80062a2:	e695      	b.n	8005fd0 <_dtoa_r+0x6a0>
 80062a4:	2600      	movs	r6, #0
 80062a6:	4637      	mov	r7, r6
 80062a8:	e7e1      	b.n	800626e <_dtoa_r+0x93e>
 80062aa:	9700      	str	r7, [sp, #0]
 80062ac:	4637      	mov	r7, r6
 80062ae:	e599      	b.n	8005de4 <_dtoa_r+0x4b4>
 80062b0:	40240000 	.word	0x40240000
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80ca 	beq.w	8006450 <_dtoa_r+0xb20>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	9302      	str	r3, [sp, #8]
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	dd05      	ble.n	80062d0 <_dtoa_r+0x9a0>
 80062c4:	4639      	mov	r1, r7
 80062c6:	462a      	mov	r2, r5
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fc45 	bl	8006b58 <__lshift>
 80062ce:	4607      	mov	r7, r0
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	d05b      	beq.n	800638e <_dtoa_r+0xa5e>
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fa2b 	bl	8006734 <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b928      	cbnz	r0, 80062ee <_dtoa_r+0x9be>
 80062e2:	4b87      	ldr	r3, [pc, #540]	; (8006500 <_dtoa_r+0xbd0>)
 80062e4:	4602      	mov	r2, r0
 80062e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062ea:	f7ff bb3b 	b.w	8005964 <_dtoa_r+0x34>
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	3202      	adds	r2, #2
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	f107 010c 	add.w	r1, r7, #12
 80062f8:	300c      	adds	r0, #12
 80062fa:	f000 fa0d 	bl	8006718 <memcpy>
 80062fe:	2201      	movs	r2, #1
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc28 	bl	8006b58 <__lshift>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	f103 0901 	add.w	r9, r3, #1
 800630e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006312:	4413      	add	r3, r2
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	f00a 0301 	and.w	r3, sl, #1
 800631a:	46b8      	mov	r8, r7
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	4607      	mov	r7, r0
 8006320:	4631      	mov	r1, r6
 8006322:	ee18 0a10 	vmov	r0, s16
 8006326:	f7ff fa75 	bl	8005814 <quorem>
 800632a:	4641      	mov	r1, r8
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006332:	ee18 0a10 	vmov	r0, s16
 8006336:	f000 fc7f 	bl	8006c38 <__mcmp>
 800633a:	463a      	mov	r2, r7
 800633c:	9003      	str	r0, [sp, #12]
 800633e:	4631      	mov	r1, r6
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fc95 	bl	8006c70 <__mdiff>
 8006346:	68c2      	ldr	r2, [r0, #12]
 8006348:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800634c:	4605      	mov	r5, r0
 800634e:	bb02      	cbnz	r2, 8006392 <_dtoa_r+0xa62>
 8006350:	4601      	mov	r1, r0
 8006352:	ee18 0a10 	vmov	r0, s16
 8006356:	f000 fc6f 	bl	8006c38 <__mcmp>
 800635a:	4602      	mov	r2, r0
 800635c:	4629      	mov	r1, r5
 800635e:	4620      	mov	r0, r4
 8006360:	9207      	str	r2, [sp, #28]
 8006362:	f000 fa27 	bl	80067b4 <_Bfree>
 8006366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800636a:	ea43 0102 	orr.w	r1, r3, r2
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	430b      	orrs	r3, r1
 8006372:	464d      	mov	r5, r9
 8006374:	d10f      	bne.n	8006396 <_dtoa_r+0xa66>
 8006376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800637a:	d02a      	beq.n	80063d2 <_dtoa_r+0xaa2>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd02      	ble.n	8006388 <_dtoa_r+0xa58>
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006388:	f88b a000 	strb.w	sl, [fp]
 800638c:	e775      	b.n	800627a <_dtoa_r+0x94a>
 800638e:	4638      	mov	r0, r7
 8006390:	e7ba      	b.n	8006308 <_dtoa_r+0x9d8>
 8006392:	2201      	movs	r2, #1
 8006394:	e7e2      	b.n	800635c <_dtoa_r+0xa2c>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db04      	blt.n	80063a6 <_dtoa_r+0xa76>
 800639c:	9906      	ldr	r1, [sp, #24]
 800639e:	430b      	orrs	r3, r1
 80063a0:	9904      	ldr	r1, [sp, #16]
 80063a2:	430b      	orrs	r3, r1
 80063a4:	d122      	bne.n	80063ec <_dtoa_r+0xabc>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	ddee      	ble.n	8006388 <_dtoa_r+0xa58>
 80063aa:	ee18 1a10 	vmov	r1, s16
 80063ae:	2201      	movs	r2, #1
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fbd1 	bl	8006b58 <__lshift>
 80063b6:	4631      	mov	r1, r6
 80063b8:	ee08 0a10 	vmov	s16, r0
 80063bc:	f000 fc3c 	bl	8006c38 <__mcmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	dc03      	bgt.n	80063cc <_dtoa_r+0xa9c>
 80063c4:	d1e0      	bne.n	8006388 <_dtoa_r+0xa58>
 80063c6:	f01a 0f01 	tst.w	sl, #1
 80063ca:	d0dd      	beq.n	8006388 <_dtoa_r+0xa58>
 80063cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063d0:	d1d7      	bne.n	8006382 <_dtoa_r+0xa52>
 80063d2:	2339      	movs	r3, #57	; 0x39
 80063d4:	f88b 3000 	strb.w	r3, [fp]
 80063d8:	462b      	mov	r3, r5
 80063da:	461d      	mov	r5, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063e2:	2a39      	cmp	r2, #57	; 0x39
 80063e4:	d071      	beq.n	80064ca <_dtoa_r+0xb9a>
 80063e6:	3201      	adds	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e746      	b.n	800627a <_dtoa_r+0x94a>
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	dd07      	ble.n	8006400 <_dtoa_r+0xad0>
 80063f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063f4:	d0ed      	beq.n	80063d2 <_dtoa_r+0xaa2>
 80063f6:	f10a 0301 	add.w	r3, sl, #1
 80063fa:	f88b 3000 	strb.w	r3, [fp]
 80063fe:	e73c      	b.n	800627a <_dtoa_r+0x94a>
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006406:	4599      	cmp	r9, r3
 8006408:	d047      	beq.n	800649a <_dtoa_r+0xb6a>
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	2300      	movs	r3, #0
 8006410:	220a      	movs	r2, #10
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f9f0 	bl	80067f8 <__multadd>
 8006418:	45b8      	cmp	r8, r7
 800641a:	ee08 0a10 	vmov	s16, r0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 020a 	mov.w	r2, #10
 8006426:	4641      	mov	r1, r8
 8006428:	4620      	mov	r0, r4
 800642a:	d106      	bne.n	800643a <_dtoa_r+0xb0a>
 800642c:	f000 f9e4 	bl	80067f8 <__multadd>
 8006430:	4680      	mov	r8, r0
 8006432:	4607      	mov	r7, r0
 8006434:	f109 0901 	add.w	r9, r9, #1
 8006438:	e772      	b.n	8006320 <_dtoa_r+0x9f0>
 800643a:	f000 f9dd 	bl	80067f8 <__multadd>
 800643e:	4639      	mov	r1, r7
 8006440:	4680      	mov	r8, r0
 8006442:	2300      	movs	r3, #0
 8006444:	220a      	movs	r2, #10
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f9d6 	bl	80067f8 <__multadd>
 800644c:	4607      	mov	r7, r0
 800644e:	e7f1      	b.n	8006434 <_dtoa_r+0xb04>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	9d01      	ldr	r5, [sp, #4]
 8006456:	ee18 0a10 	vmov	r0, s16
 800645a:	4631      	mov	r1, r6
 800645c:	f7ff f9da 	bl	8005814 <quorem>
 8006460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	f805 ab01 	strb.w	sl, [r5], #1
 800646a:	1aea      	subs	r2, r5, r3
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	4293      	cmp	r3, r2
 8006470:	dd09      	ble.n	8006486 <_dtoa_r+0xb56>
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f9bc 	bl	80067f8 <__multadd>
 8006480:	ee08 0a10 	vmov	s16, r0
 8006484:	e7e7      	b.n	8006456 <_dtoa_r+0xb26>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfc8      	it	gt
 800648c:	461d      	movgt	r5, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	bfd8      	it	le
 8006492:	2501      	movle	r5, #1
 8006494:	441d      	add	r5, r3
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ee18 1a10 	vmov	r1, s16
 800649e:	2201      	movs	r2, #1
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 fb59 	bl	8006b58 <__lshift>
 80064a6:	4631      	mov	r1, r6
 80064a8:	ee08 0a10 	vmov	s16, r0
 80064ac:	f000 fbc4 	bl	8006c38 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	dc91      	bgt.n	80063d8 <_dtoa_r+0xaa8>
 80064b4:	d102      	bne.n	80064bc <_dtoa_r+0xb8c>
 80064b6:	f01a 0f01 	tst.w	sl, #1
 80064ba:	d18d      	bne.n	80063d8 <_dtoa_r+0xaa8>
 80064bc:	462b      	mov	r3, r5
 80064be:	461d      	mov	r5, r3
 80064c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064c4:	2a30      	cmp	r2, #48	; 0x30
 80064c6:	d0fa      	beq.n	80064be <_dtoa_r+0xb8e>
 80064c8:	e6d7      	b.n	800627a <_dtoa_r+0x94a>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d184      	bne.n	80063da <_dtoa_r+0xaaa>
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2331      	movs	r3, #49	; 0x31
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	e6ce      	b.n	800627a <_dtoa_r+0x94a>
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <_dtoa_r+0xbd4>)
 80064de:	f7ff ba95 	b.w	8005a0c <_dtoa_r+0xdc>
 80064e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aa6e 	bne.w	80059c6 <_dtoa_r+0x96>
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <_dtoa_r+0xbd8>)
 80064ec:	f7ff ba8e 	b.w	8005a0c <_dtoa_r+0xdc>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dcae      	bgt.n	8006454 <_dtoa_r+0xb24>
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f73f aea8 	bgt.w	800624e <_dtoa_r+0x91e>
 80064fe:	e7a9      	b.n	8006454 <_dtoa_r+0xb24>
 8006500:	08007a7b 	.word	0x08007a7b
 8006504:	080079d8 	.word	0x080079d8
 8006508:	080079fc 	.word	0x080079fc

0800650c <std>:
 800650c:	2300      	movs	r3, #0
 800650e:	b510      	push	{r4, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	e9c0 3300 	strd	r3, r3, [r0]
 8006516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800651a:	6083      	str	r3, [r0, #8]
 800651c:	8181      	strh	r1, [r0, #12]
 800651e:	6643      	str	r3, [r0, #100]	; 0x64
 8006520:	81c2      	strh	r2, [r0, #14]
 8006522:	6183      	str	r3, [r0, #24]
 8006524:	4619      	mov	r1, r3
 8006526:	2208      	movs	r2, #8
 8006528:	305c      	adds	r0, #92	; 0x5c
 800652a:	f7fe fce9 	bl	8004f00 <memset>
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <std+0x38>)
 8006530:	6263      	str	r3, [r4, #36]	; 0x24
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <std+0x3c>)
 8006534:	62a3      	str	r3, [r4, #40]	; 0x28
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <std+0x40>)
 8006538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <std+0x44>)
 800653c:	6224      	str	r4, [r4, #32]
 800653e:	6323      	str	r3, [r4, #48]	; 0x30
 8006540:	bd10      	pop	{r4, pc}
 8006542:	bf00      	nop
 8006544:	080072fd 	.word	0x080072fd
 8006548:	0800731f 	.word	0x0800731f
 800654c:	08007357 	.word	0x08007357
 8006550:	0800737b 	.word	0x0800737b

08006554 <_cleanup_r>:
 8006554:	4901      	ldr	r1, [pc, #4]	; (800655c <_cleanup_r+0x8>)
 8006556:	f000 b8af 	b.w	80066b8 <_fwalk_reent>
 800655a:	bf00      	nop
 800655c:	08007691 	.word	0x08007691

08006560 <__sfmoreglue>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	2268      	movs	r2, #104	; 0x68
 8006564:	1e4d      	subs	r5, r1, #1
 8006566:	4355      	muls	r5, r2
 8006568:	460e      	mov	r6, r1
 800656a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800656e:	f000 fce7 	bl	8006f40 <_malloc_r>
 8006572:	4604      	mov	r4, r0
 8006574:	b140      	cbz	r0, 8006588 <__sfmoreglue+0x28>
 8006576:	2100      	movs	r1, #0
 8006578:	e9c0 1600 	strd	r1, r6, [r0]
 800657c:	300c      	adds	r0, #12
 800657e:	60a0      	str	r0, [r4, #8]
 8006580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006584:	f7fe fcbc 	bl	8004f00 <memset>
 8006588:	4620      	mov	r0, r4
 800658a:	bd70      	pop	{r4, r5, r6, pc}

0800658c <__sfp_lock_acquire>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__sfp_lock_acquire+0x8>)
 800658e:	f000 b8b8 	b.w	8006702 <__retarget_lock_acquire_recursive>
 8006592:	bf00      	nop
 8006594:	20000351 	.word	0x20000351

08006598 <__sfp_lock_release>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__sfp_lock_release+0x8>)
 800659a:	f000 b8b3 	b.w	8006704 <__retarget_lock_release_recursive>
 800659e:	bf00      	nop
 80065a0:	20000351 	.word	0x20000351

080065a4 <__sinit_lock_acquire>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__sinit_lock_acquire+0x8>)
 80065a6:	f000 b8ac 	b.w	8006702 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000352 	.word	0x20000352

080065b0 <__sinit_lock_release>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__sinit_lock_release+0x8>)
 80065b2:	f000 b8a7 	b.w	8006704 <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000352 	.word	0x20000352

080065bc <__sinit>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	f7ff fff0 	bl	80065a4 <__sinit_lock_acquire>
 80065c4:	69a3      	ldr	r3, [r4, #24]
 80065c6:	b11b      	cbz	r3, 80065d0 <__sinit+0x14>
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f7ff bff0 	b.w	80065b0 <__sinit_lock_release>
 80065d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065d4:	6523      	str	r3, [r4, #80]	; 0x50
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <__sinit+0x68>)
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <__sinit+0x6c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80065de:	42a3      	cmp	r3, r4
 80065e0:	bf04      	itt	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	61a3      	streq	r3, [r4, #24]
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f820 	bl	800662c <__sfp>
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 f81c 	bl	800662c <__sfp>
 80065f4:	60a0      	str	r0, [r4, #8]
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f818 	bl	800662c <__sfp>
 80065fc:	2200      	movs	r2, #0
 80065fe:	60e0      	str	r0, [r4, #12]
 8006600:	2104      	movs	r1, #4
 8006602:	6860      	ldr	r0, [r4, #4]
 8006604:	f7ff ff82 	bl	800650c <std>
 8006608:	68a0      	ldr	r0, [r4, #8]
 800660a:	2201      	movs	r2, #1
 800660c:	2109      	movs	r1, #9
 800660e:	f7ff ff7d 	bl	800650c <std>
 8006612:	68e0      	ldr	r0, [r4, #12]
 8006614:	2202      	movs	r2, #2
 8006616:	2112      	movs	r1, #18
 8006618:	f7ff ff78 	bl	800650c <std>
 800661c:	2301      	movs	r3, #1
 800661e:	61a3      	str	r3, [r4, #24]
 8006620:	e7d2      	b.n	80065c8 <__sinit+0xc>
 8006622:	bf00      	nop
 8006624:	080079c4 	.word	0x080079c4
 8006628:	08006555 	.word	0x08006555

0800662c <__sfp>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	4607      	mov	r7, r0
 8006630:	f7ff ffac 	bl	800658c <__sfp_lock_acquire>
 8006634:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <__sfp+0x84>)
 8006636:	681e      	ldr	r6, [r3, #0]
 8006638:	69b3      	ldr	r3, [r6, #24]
 800663a:	b913      	cbnz	r3, 8006642 <__sfp+0x16>
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff ffbd 	bl	80065bc <__sinit>
 8006642:	3648      	adds	r6, #72	; 0x48
 8006644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	d503      	bpl.n	8006654 <__sfp+0x28>
 800664c:	6833      	ldr	r3, [r6, #0]
 800664e:	b30b      	cbz	r3, 8006694 <__sfp+0x68>
 8006650:	6836      	ldr	r6, [r6, #0]
 8006652:	e7f7      	b.n	8006644 <__sfp+0x18>
 8006654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006658:	b9d5      	cbnz	r5, 8006690 <__sfp+0x64>
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <__sfp+0x88>)
 800665c:	60e3      	str	r3, [r4, #12]
 800665e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006662:	6665      	str	r5, [r4, #100]	; 0x64
 8006664:	f000 f84c 	bl	8006700 <__retarget_lock_init_recursive>
 8006668:	f7ff ff96 	bl	8006598 <__sfp_lock_release>
 800666c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006674:	6025      	str	r5, [r4, #0]
 8006676:	61a5      	str	r5, [r4, #24]
 8006678:	2208      	movs	r2, #8
 800667a:	4629      	mov	r1, r5
 800667c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006680:	f7fe fc3e 	bl	8004f00 <memset>
 8006684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800668c:	4620      	mov	r0, r4
 800668e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006690:	3468      	adds	r4, #104	; 0x68
 8006692:	e7d9      	b.n	8006648 <__sfp+0x1c>
 8006694:	2104      	movs	r1, #4
 8006696:	4638      	mov	r0, r7
 8006698:	f7ff ff62 	bl	8006560 <__sfmoreglue>
 800669c:	4604      	mov	r4, r0
 800669e:	6030      	str	r0, [r6, #0]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1d5      	bne.n	8006650 <__sfp+0x24>
 80066a4:	f7ff ff78 	bl	8006598 <__sfp_lock_release>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	e7ee      	b.n	800668c <__sfp+0x60>
 80066ae:	bf00      	nop
 80066b0:	080079c4 	.word	0x080079c4
 80066b4:	ffff0001 	.word	0xffff0001

080066b8 <_fwalk_reent>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4606      	mov	r6, r0
 80066be:	4688      	mov	r8, r1
 80066c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066c4:	2700      	movs	r7, #0
 80066c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ca:	f1b9 0901 	subs.w	r9, r9, #1
 80066ce:	d505      	bpl.n	80066dc <_fwalk_reent+0x24>
 80066d0:	6824      	ldr	r4, [r4, #0]
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d1f7      	bne.n	80066c6 <_fwalk_reent+0xe>
 80066d6:	4638      	mov	r0, r7
 80066d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066dc:	89ab      	ldrh	r3, [r5, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d907      	bls.n	80066f2 <_fwalk_reent+0x3a>
 80066e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e6:	3301      	adds	r3, #1
 80066e8:	d003      	beq.n	80066f2 <_fwalk_reent+0x3a>
 80066ea:	4629      	mov	r1, r5
 80066ec:	4630      	mov	r0, r6
 80066ee:	47c0      	blx	r8
 80066f0:	4307      	orrs	r7, r0
 80066f2:	3568      	adds	r5, #104	; 0x68
 80066f4:	e7e9      	b.n	80066ca <_fwalk_reent+0x12>
	...

080066f8 <_localeconv_r>:
 80066f8:	4800      	ldr	r0, [pc, #0]	; (80066fc <_localeconv_r+0x4>)
 80066fa:	4770      	bx	lr
 80066fc:	20000160 	.word	0x20000160

08006700 <__retarget_lock_init_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_acquire_recursive>:
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_release_recursive>:
 8006704:	4770      	bx	lr
	...

08006708 <malloc>:
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <malloc+0xc>)
 800670a:	4601      	mov	r1, r0
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f000 bc17 	b.w	8006f40 <_malloc_r>
 8006712:	bf00      	nop
 8006714:	2000000c 	.word	0x2000000c

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <_Balloc>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	b976      	cbnz	r6, 800675c <_Balloc+0x28>
 800673e:	2010      	movs	r0, #16
 8006740:	f7ff ffe2 	bl	8006708 <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	6260      	str	r0, [r4, #36]	; 0x24
 8006748:	b920      	cbnz	r0, 8006754 <_Balloc+0x20>
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <_Balloc+0x78>)
 800674c:	4818      	ldr	r0, [pc, #96]	; (80067b0 <_Balloc+0x7c>)
 800674e:	2166      	movs	r1, #102	; 0x66
 8006750:	f000 feea 	bl	8007528 <__assert_func>
 8006754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006758:	6006      	str	r6, [r0, #0]
 800675a:	60c6      	str	r6, [r0, #12]
 800675c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800675e:	68f3      	ldr	r3, [r6, #12]
 8006760:	b183      	cbz	r3, 8006784 <_Balloc+0x50>
 8006762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800676a:	b9b8      	cbnz	r0, 800679c <_Balloc+0x68>
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f605 	lsl.w	r6, r1, r5
 8006772:	1d72      	adds	r2, r6, #5
 8006774:	0092      	lsls	r2, r2, #2
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fb60 	bl	8006e3c <_calloc_r>
 800677c:	b160      	cbz	r0, 8006798 <_Balloc+0x64>
 800677e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006782:	e00e      	b.n	80067a2 <_Balloc+0x6e>
 8006784:	2221      	movs	r2, #33	; 0x21
 8006786:	2104      	movs	r1, #4
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fb57 	bl	8006e3c <_calloc_r>
 800678e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006790:	60f0      	str	r0, [r6, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e4      	bne.n	8006762 <_Balloc+0x2e>
 8006798:	2000      	movs	r0, #0
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067a2:	2300      	movs	r3, #0
 80067a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067a8:	e7f7      	b.n	800679a <_Balloc+0x66>
 80067aa:	bf00      	nop
 80067ac:	08007a09 	.word	0x08007a09
 80067b0:	08007aec 	.word	0x08007aec

080067b4 <_Bfree>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b976      	cbnz	r6, 80067dc <_Bfree+0x28>
 80067be:	2010      	movs	r0, #16
 80067c0:	f7ff ffa2 	bl	8006708 <malloc>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6268      	str	r0, [r5, #36]	; 0x24
 80067c8:	b920      	cbnz	r0, 80067d4 <_Bfree+0x20>
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <_Bfree+0x3c>)
 80067cc:	4809      	ldr	r0, [pc, #36]	; (80067f4 <_Bfree+0x40>)
 80067ce:	218a      	movs	r1, #138	; 0x8a
 80067d0:	f000 feaa 	bl	8007528 <__assert_func>
 80067d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067d8:	6006      	str	r6, [r0, #0]
 80067da:	60c6      	str	r6, [r0, #12]
 80067dc:	b13c      	cbz	r4, 80067ee <_Bfree+0x3a>
 80067de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067e0:	6862      	ldr	r2, [r4, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e8:	6021      	str	r1, [r4, #0]
 80067ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	08007a09 	.word	0x08007a09
 80067f4:	08007aec 	.word	0x08007aec

080067f8 <__multadd>:
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	690d      	ldr	r5, [r1, #16]
 80067fe:	4607      	mov	r7, r0
 8006800:	460c      	mov	r4, r1
 8006802:	461e      	mov	r6, r3
 8006804:	f101 0c14 	add.w	ip, r1, #20
 8006808:	2000      	movs	r0, #0
 800680a:	f8dc 3000 	ldr.w	r3, [ip]
 800680e:	b299      	uxth	r1, r3
 8006810:	fb02 6101 	mla	r1, r2, r1, r6
 8006814:	0c1e      	lsrs	r6, r3, #16
 8006816:	0c0b      	lsrs	r3, r1, #16
 8006818:	fb02 3306 	mla	r3, r2, r6, r3
 800681c:	b289      	uxth	r1, r1
 800681e:	3001      	adds	r0, #1
 8006820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006824:	4285      	cmp	r5, r0
 8006826:	f84c 1b04 	str.w	r1, [ip], #4
 800682a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800682e:	dcec      	bgt.n	800680a <__multadd+0x12>
 8006830:	b30e      	cbz	r6, 8006876 <__multadd+0x7e>
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc19      	bgt.n	800686c <__multadd+0x74>
 8006838:	6861      	ldr	r1, [r4, #4]
 800683a:	4638      	mov	r0, r7
 800683c:	3101      	adds	r1, #1
 800683e:	f7ff ff79 	bl	8006734 <_Balloc>
 8006842:	4680      	mov	r8, r0
 8006844:	b928      	cbnz	r0, 8006852 <__multadd+0x5a>
 8006846:	4602      	mov	r2, r0
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <__multadd+0x84>)
 800684a:	480d      	ldr	r0, [pc, #52]	; (8006880 <__multadd+0x88>)
 800684c:	21b5      	movs	r1, #181	; 0xb5
 800684e:	f000 fe6b 	bl	8007528 <__assert_func>
 8006852:	6922      	ldr	r2, [r4, #16]
 8006854:	3202      	adds	r2, #2
 8006856:	f104 010c 	add.w	r1, r4, #12
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	300c      	adds	r0, #12
 800685e:	f7ff ff5b 	bl	8006718 <memcpy>
 8006862:	4621      	mov	r1, r4
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ffa5 	bl	80067b4 <_Bfree>
 800686a:	4644      	mov	r4, r8
 800686c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006870:	3501      	adds	r5, #1
 8006872:	615e      	str	r6, [r3, #20]
 8006874:	6125      	str	r5, [r4, #16]
 8006876:	4620      	mov	r0, r4
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	08007a7b 	.word	0x08007a7b
 8006880:	08007aec 	.word	0x08007aec

08006884 <__hi0bits>:
 8006884:	0c03      	lsrs	r3, r0, #16
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	b9d3      	cbnz	r3, 80068c0 <__hi0bits+0x3c>
 800688a:	0400      	lsls	r0, r0, #16
 800688c:	2310      	movs	r3, #16
 800688e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006892:	bf04      	itt	eq
 8006894:	0200      	lsleq	r0, r0, #8
 8006896:	3308      	addeq	r3, #8
 8006898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800689c:	bf04      	itt	eq
 800689e:	0100      	lsleq	r0, r0, #4
 80068a0:	3304      	addeq	r3, #4
 80068a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068a6:	bf04      	itt	eq
 80068a8:	0080      	lsleq	r0, r0, #2
 80068aa:	3302      	addeq	r3, #2
 80068ac:	2800      	cmp	r0, #0
 80068ae:	db05      	blt.n	80068bc <__hi0bits+0x38>
 80068b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068b4:	f103 0301 	add.w	r3, r3, #1
 80068b8:	bf08      	it	eq
 80068ba:	2320      	moveq	r3, #32
 80068bc:	4618      	mov	r0, r3
 80068be:	4770      	bx	lr
 80068c0:	2300      	movs	r3, #0
 80068c2:	e7e4      	b.n	800688e <__hi0bits+0xa>

080068c4 <__lo0bits>:
 80068c4:	6803      	ldr	r3, [r0, #0]
 80068c6:	f013 0207 	ands.w	r2, r3, #7
 80068ca:	4601      	mov	r1, r0
 80068cc:	d00b      	beq.n	80068e6 <__lo0bits+0x22>
 80068ce:	07da      	lsls	r2, r3, #31
 80068d0:	d423      	bmi.n	800691a <__lo0bits+0x56>
 80068d2:	0798      	lsls	r0, r3, #30
 80068d4:	bf49      	itett	mi
 80068d6:	085b      	lsrmi	r3, r3, #1
 80068d8:	089b      	lsrpl	r3, r3, #2
 80068da:	2001      	movmi	r0, #1
 80068dc:	600b      	strmi	r3, [r1, #0]
 80068de:	bf5c      	itt	pl
 80068e0:	600b      	strpl	r3, [r1, #0]
 80068e2:	2002      	movpl	r0, #2
 80068e4:	4770      	bx	lr
 80068e6:	b298      	uxth	r0, r3
 80068e8:	b9a8      	cbnz	r0, 8006916 <__lo0bits+0x52>
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	2010      	movs	r0, #16
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	b90a      	cbnz	r2, 80068f6 <__lo0bits+0x32>
 80068f2:	3008      	adds	r0, #8
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	071a      	lsls	r2, r3, #28
 80068f8:	bf04      	itt	eq
 80068fa:	091b      	lsreq	r3, r3, #4
 80068fc:	3004      	addeq	r0, #4
 80068fe:	079a      	lsls	r2, r3, #30
 8006900:	bf04      	itt	eq
 8006902:	089b      	lsreq	r3, r3, #2
 8006904:	3002      	addeq	r0, #2
 8006906:	07da      	lsls	r2, r3, #31
 8006908:	d403      	bmi.n	8006912 <__lo0bits+0x4e>
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f100 0001 	add.w	r0, r0, #1
 8006910:	d005      	beq.n	800691e <__lo0bits+0x5a>
 8006912:	600b      	str	r3, [r1, #0]
 8006914:	4770      	bx	lr
 8006916:	4610      	mov	r0, r2
 8006918:	e7e9      	b.n	80068ee <__lo0bits+0x2a>
 800691a:	2000      	movs	r0, #0
 800691c:	4770      	bx	lr
 800691e:	2020      	movs	r0, #32
 8006920:	4770      	bx	lr
	...

08006924 <__i2b>:
 8006924:	b510      	push	{r4, lr}
 8006926:	460c      	mov	r4, r1
 8006928:	2101      	movs	r1, #1
 800692a:	f7ff ff03 	bl	8006734 <_Balloc>
 800692e:	4602      	mov	r2, r0
 8006930:	b928      	cbnz	r0, 800693e <__i2b+0x1a>
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <__i2b+0x24>)
 8006934:	4805      	ldr	r0, [pc, #20]	; (800694c <__i2b+0x28>)
 8006936:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800693a:	f000 fdf5 	bl	8007528 <__assert_func>
 800693e:	2301      	movs	r3, #1
 8006940:	6144      	str	r4, [r0, #20]
 8006942:	6103      	str	r3, [r0, #16]
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08007a7b 	.word	0x08007a7b
 800694c:	08007aec 	.word	0x08007aec

08006950 <__multiply>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	4691      	mov	r9, r2
 8006956:	690a      	ldr	r2, [r1, #16]
 8006958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	bfb8      	it	lt
 8006960:	460b      	movlt	r3, r1
 8006962:	460c      	mov	r4, r1
 8006964:	bfbc      	itt	lt
 8006966:	464c      	movlt	r4, r9
 8006968:	4699      	movlt	r9, r3
 800696a:	6927      	ldr	r7, [r4, #16]
 800696c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006970:	68a3      	ldr	r3, [r4, #8]
 8006972:	6861      	ldr	r1, [r4, #4]
 8006974:	eb07 060a 	add.w	r6, r7, sl
 8006978:	42b3      	cmp	r3, r6
 800697a:	b085      	sub	sp, #20
 800697c:	bfb8      	it	lt
 800697e:	3101      	addlt	r1, #1
 8006980:	f7ff fed8 	bl	8006734 <_Balloc>
 8006984:	b930      	cbnz	r0, 8006994 <__multiply+0x44>
 8006986:	4602      	mov	r2, r0
 8006988:	4b44      	ldr	r3, [pc, #272]	; (8006a9c <__multiply+0x14c>)
 800698a:	4845      	ldr	r0, [pc, #276]	; (8006aa0 <__multiply+0x150>)
 800698c:	f240 115d 	movw	r1, #349	; 0x15d
 8006990:	f000 fdca 	bl	8007528 <__assert_func>
 8006994:	f100 0514 	add.w	r5, r0, #20
 8006998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800699c:	462b      	mov	r3, r5
 800699e:	2200      	movs	r2, #0
 80069a0:	4543      	cmp	r3, r8
 80069a2:	d321      	bcc.n	80069e8 <__multiply+0x98>
 80069a4:	f104 0314 	add.w	r3, r4, #20
 80069a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069ac:	f109 0314 	add.w	r3, r9, #20
 80069b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	1b3a      	subs	r2, r7, r4
 80069b8:	3a15      	subs	r2, #21
 80069ba:	f022 0203 	bic.w	r2, r2, #3
 80069be:	3204      	adds	r2, #4
 80069c0:	f104 0115 	add.w	r1, r4, #21
 80069c4:	428f      	cmp	r7, r1
 80069c6:	bf38      	it	cc
 80069c8:	2204      	movcc	r2, #4
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9a02      	ldr	r2, [sp, #8]
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d80c      	bhi.n	80069ee <__multiply+0x9e>
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	dd03      	ble.n	80069e0 <__multiply+0x90>
 80069d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05a      	beq.n	8006a96 <__multiply+0x146>
 80069e0:	6106      	str	r6, [r0, #16]
 80069e2:	b005      	add	sp, #20
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	f843 2b04 	str.w	r2, [r3], #4
 80069ec:	e7d8      	b.n	80069a0 <__multiply+0x50>
 80069ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80069f2:	f1ba 0f00 	cmp.w	sl, #0
 80069f6:	d024      	beq.n	8006a42 <__multiply+0xf2>
 80069f8:	f104 0e14 	add.w	lr, r4, #20
 80069fc:	46a9      	mov	r9, r5
 80069fe:	f04f 0c00 	mov.w	ip, #0
 8006a02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a06:	f8d9 1000 	ldr.w	r1, [r9]
 8006a0a:	fa1f fb82 	uxth.w	fp, r2
 8006a0e:	b289      	uxth	r1, r1
 8006a10:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a18:	f8d9 2000 	ldr.w	r2, [r9]
 8006a1c:	4461      	add	r1, ip
 8006a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a22:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a2a:	b289      	uxth	r1, r1
 8006a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a30:	4577      	cmp	r7, lr
 8006a32:	f849 1b04 	str.w	r1, [r9], #4
 8006a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a3a:	d8e2      	bhi.n	8006a02 <__multiply+0xb2>
 8006a3c:	9a01      	ldr	r2, [sp, #4]
 8006a3e:	f845 c002 	str.w	ip, [r5, r2]
 8006a42:	9a03      	ldr	r2, [sp, #12]
 8006a44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	f1b9 0f00 	cmp.w	r9, #0
 8006a4e:	d020      	beq.n	8006a92 <__multiply+0x142>
 8006a50:	6829      	ldr	r1, [r5, #0]
 8006a52:	f104 0c14 	add.w	ip, r4, #20
 8006a56:	46ae      	mov	lr, r5
 8006a58:	f04f 0a00 	mov.w	sl, #0
 8006a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a64:	fb09 220b 	mla	r2, r9, fp, r2
 8006a68:	4492      	add	sl, r2
 8006a6a:	b289      	uxth	r1, r1
 8006a6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a70:	f84e 1b04 	str.w	r1, [lr], #4
 8006a74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a78:	f8be 1000 	ldrh.w	r1, [lr]
 8006a7c:	0c12      	lsrs	r2, r2, #16
 8006a7e:	fb09 1102 	mla	r1, r9, r2, r1
 8006a82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a86:	4567      	cmp	r7, ip
 8006a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a8c:	d8e6      	bhi.n	8006a5c <__multiply+0x10c>
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	50a9      	str	r1, [r5, r2]
 8006a92:	3504      	adds	r5, #4
 8006a94:	e79a      	b.n	80069cc <__multiply+0x7c>
 8006a96:	3e01      	subs	r6, #1
 8006a98:	e79c      	b.n	80069d4 <__multiply+0x84>
 8006a9a:	bf00      	nop
 8006a9c:	08007a7b 	.word	0x08007a7b
 8006aa0:	08007aec 	.word	0x08007aec

08006aa4 <__pow5mult>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	f012 0203 	ands.w	r2, r2, #3
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	d007      	beq.n	8006ac4 <__pow5mult+0x20>
 8006ab4:	4c25      	ldr	r4, [pc, #148]	; (8006b4c <__pow5mult+0xa8>)
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006abe:	f7ff fe9b 	bl	80067f8 <__multadd>
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	10ad      	asrs	r5, r5, #2
 8006ac6:	d03d      	beq.n	8006b44 <__pow5mult+0xa0>
 8006ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aca:	b97c      	cbnz	r4, 8006aec <__pow5mult+0x48>
 8006acc:	2010      	movs	r0, #16
 8006ace:	f7ff fe1b 	bl	8006708 <malloc>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ad6:	b928      	cbnz	r0, 8006ae4 <__pow5mult+0x40>
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <__pow5mult+0xac>)
 8006ada:	481e      	ldr	r0, [pc, #120]	; (8006b54 <__pow5mult+0xb0>)
 8006adc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ae0:	f000 fd22 	bl	8007528 <__assert_func>
 8006ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ae8:	6004      	str	r4, [r0, #0]
 8006aea:	60c4      	str	r4, [r0, #12]
 8006aec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006af4:	b94c      	cbnz	r4, 8006b0a <__pow5mult+0x66>
 8006af6:	f240 2171 	movw	r1, #625	; 0x271
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff ff12 	bl	8006924 <__i2b>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b06:	4604      	mov	r4, r0
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	07eb      	lsls	r3, r5, #31
 8006b10:	d50a      	bpl.n	8006b28 <__pow5mult+0x84>
 8006b12:	4639      	mov	r1, r7
 8006b14:	4622      	mov	r2, r4
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff ff1a 	bl	8006950 <__multiply>
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4680      	mov	r8, r0
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff fe47 	bl	80067b4 <_Bfree>
 8006b26:	4647      	mov	r7, r8
 8006b28:	106d      	asrs	r5, r5, #1
 8006b2a:	d00b      	beq.n	8006b44 <__pow5mult+0xa0>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	b938      	cbnz	r0, 8006b40 <__pow5mult+0x9c>
 8006b30:	4622      	mov	r2, r4
 8006b32:	4621      	mov	r1, r4
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff ff0b 	bl	8006950 <__multiply>
 8006b3a:	6020      	str	r0, [r4, #0]
 8006b3c:	f8c0 9000 	str.w	r9, [r0]
 8006b40:	4604      	mov	r4, r0
 8006b42:	e7e4      	b.n	8006b0e <__pow5mult+0x6a>
 8006b44:	4638      	mov	r0, r7
 8006b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08007c38 	.word	0x08007c38
 8006b50:	08007a09 	.word	0x08007a09
 8006b54:	08007aec 	.word	0x08007aec

08006b58 <__lshift>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	6849      	ldr	r1, [r1, #4]
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	4607      	mov	r7, r0
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b70:	f108 0601 	add.w	r6, r8, #1
 8006b74:	42b3      	cmp	r3, r6
 8006b76:	db0b      	blt.n	8006b90 <__lshift+0x38>
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff fddb 	bl	8006734 <_Balloc>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	b948      	cbnz	r0, 8006b96 <__lshift+0x3e>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <__lshift+0xd8>)
 8006b86:	482b      	ldr	r0, [pc, #172]	; (8006c34 <__lshift+0xdc>)
 8006b88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b8c:	f000 fccc 	bl	8007528 <__assert_func>
 8006b90:	3101      	adds	r1, #1
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	e7ee      	b.n	8006b74 <__lshift+0x1c>
 8006b96:	2300      	movs	r3, #0
 8006b98:	f100 0114 	add.w	r1, r0, #20
 8006b9c:	f100 0210 	add.w	r2, r0, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	4553      	cmp	r3, sl
 8006ba4:	db37      	blt.n	8006c16 <__lshift+0xbe>
 8006ba6:	6920      	ldr	r0, [r4, #16]
 8006ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bac:	f104 0314 	add.w	r3, r4, #20
 8006bb0:	f019 091f 	ands.w	r9, r9, #31
 8006bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006bbc:	d02f      	beq.n	8006c1e <__lshift+0xc6>
 8006bbe:	f1c9 0e20 	rsb	lr, r9, #32
 8006bc2:	468a      	mov	sl, r1
 8006bc4:	f04f 0c00 	mov.w	ip, #0
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	fa02 f209 	lsl.w	r2, r2, r9
 8006bce:	ea42 020c 	orr.w	r2, r2, ip
 8006bd2:	f84a 2b04 	str.w	r2, [sl], #4
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	4298      	cmp	r0, r3
 8006bdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006be0:	d8f2      	bhi.n	8006bc8 <__lshift+0x70>
 8006be2:	1b03      	subs	r3, r0, r4
 8006be4:	3b15      	subs	r3, #21
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	3304      	adds	r3, #4
 8006bec:	f104 0215 	add.w	r2, r4, #21
 8006bf0:	4290      	cmp	r0, r2
 8006bf2:	bf38      	it	cc
 8006bf4:	2304      	movcc	r3, #4
 8006bf6:	f841 c003 	str.w	ip, [r1, r3]
 8006bfa:	f1bc 0f00 	cmp.w	ip, #0
 8006bfe:	d001      	beq.n	8006c04 <__lshift+0xac>
 8006c00:	f108 0602 	add.w	r6, r8, #2
 8006c04:	3e01      	subs	r6, #1
 8006c06:	4638      	mov	r0, r7
 8006c08:	612e      	str	r6, [r5, #16]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f7ff fdd2 	bl	80067b4 <_Bfree>
 8006c10:	4628      	mov	r0, r5
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	e7c1      	b.n	8006ba2 <__lshift+0x4a>
 8006c1e:	3904      	subs	r1, #4
 8006c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	d8f9      	bhi.n	8006c20 <__lshift+0xc8>
 8006c2c:	e7ea      	b.n	8006c04 <__lshift+0xac>
 8006c2e:	bf00      	nop
 8006c30:	08007a7b 	.word	0x08007a7b
 8006c34:	08007aec 	.word	0x08007aec

08006c38 <__mcmp>:
 8006c38:	b530      	push	{r4, r5, lr}
 8006c3a:	6902      	ldr	r2, [r0, #16]
 8006c3c:	690c      	ldr	r4, [r1, #16]
 8006c3e:	1b12      	subs	r2, r2, r4
 8006c40:	d10e      	bne.n	8006c60 <__mcmp+0x28>
 8006c42:	f100 0314 	add.w	r3, r0, #20
 8006c46:	3114      	adds	r1, #20
 8006c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c58:	42a5      	cmp	r5, r4
 8006c5a:	d003      	beq.n	8006c64 <__mcmp+0x2c>
 8006c5c:	d305      	bcc.n	8006c6a <__mcmp+0x32>
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4610      	mov	r0, r2
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	4283      	cmp	r3, r0
 8006c66:	d3f3      	bcc.n	8006c50 <__mcmp+0x18>
 8006c68:	e7fa      	b.n	8006c60 <__mcmp+0x28>
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c6e:	e7f7      	b.n	8006c60 <__mcmp+0x28>

08006c70 <__mdiff>:
 8006c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	4606      	mov	r6, r0
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	f7ff ffdb 	bl	8006c38 <__mcmp>
 8006c82:	1e05      	subs	r5, r0, #0
 8006c84:	d110      	bne.n	8006ca8 <__mdiff+0x38>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fd53 	bl	8006734 <_Balloc>
 8006c8e:	b930      	cbnz	r0, 8006c9e <__mdiff+0x2e>
 8006c90:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <__mdiff+0x10c>)
 8006c92:	4602      	mov	r2, r0
 8006c94:	f240 2132 	movw	r1, #562	; 0x232
 8006c98:	4839      	ldr	r0, [pc, #228]	; (8006d80 <__mdiff+0x110>)
 8006c9a:	f000 fc45 	bl	8007528 <__assert_func>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	bfa4      	itt	ge
 8006caa:	4643      	movge	r3, r8
 8006cac:	46a0      	movge	r8, r4
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cb4:	bfa6      	itte	ge
 8006cb6:	461c      	movge	r4, r3
 8006cb8:	2500      	movge	r5, #0
 8006cba:	2501      	movlt	r5, #1
 8006cbc:	f7ff fd3a 	bl	8006734 <_Balloc>
 8006cc0:	b920      	cbnz	r0, 8006ccc <__mdiff+0x5c>
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <__mdiff+0x10c>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cca:	e7e5      	b.n	8006c98 <__mdiff+0x28>
 8006ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cd0:	6926      	ldr	r6, [r4, #16]
 8006cd2:	60c5      	str	r5, [r0, #12]
 8006cd4:	f104 0914 	add.w	r9, r4, #20
 8006cd8:	f108 0514 	add.w	r5, r8, #20
 8006cdc:	f100 0e14 	add.w	lr, r0, #20
 8006ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ce8:	f108 0210 	add.w	r2, r8, #16
 8006cec:	46f2      	mov	sl, lr
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006cf8:	fa1f f883 	uxth.w	r8, r3
 8006cfc:	fa11 f18b 	uxtah	r1, r1, fp
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	eba1 0808 	sub.w	r8, r1, r8
 8006d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d0e:	fa1f f888 	uxth.w	r8, r8
 8006d12:	1419      	asrs	r1, r3, #16
 8006d14:	454e      	cmp	r6, r9
 8006d16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8006d1e:	d8e7      	bhi.n	8006cf0 <__mdiff+0x80>
 8006d20:	1b33      	subs	r3, r6, r4
 8006d22:	3b15      	subs	r3, #21
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	3304      	adds	r3, #4
 8006d2a:	3415      	adds	r4, #21
 8006d2c:	42a6      	cmp	r6, r4
 8006d2e:	bf38      	it	cc
 8006d30:	2304      	movcc	r3, #4
 8006d32:	441d      	add	r5, r3
 8006d34:	4473      	add	r3, lr
 8006d36:	469e      	mov	lr, r3
 8006d38:	462e      	mov	r6, r5
 8006d3a:	4566      	cmp	r6, ip
 8006d3c:	d30e      	bcc.n	8006d5c <__mdiff+0xec>
 8006d3e:	f10c 0203 	add.w	r2, ip, #3
 8006d42:	1b52      	subs	r2, r2, r5
 8006d44:	f022 0203 	bic.w	r2, r2, #3
 8006d48:	3d03      	subs	r5, #3
 8006d4a:	45ac      	cmp	ip, r5
 8006d4c:	bf38      	it	cc
 8006d4e:	2200      	movcc	r2, #0
 8006d50:	441a      	add	r2, r3
 8006d52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d56:	b17b      	cbz	r3, 8006d78 <__mdiff+0x108>
 8006d58:	6107      	str	r7, [r0, #16]
 8006d5a:	e7a3      	b.n	8006ca4 <__mdiff+0x34>
 8006d5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d60:	fa11 f288 	uxtah	r2, r1, r8
 8006d64:	1414      	asrs	r4, r2, #16
 8006d66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d70:	f84e 2b04 	str.w	r2, [lr], #4
 8006d74:	1421      	asrs	r1, r4, #16
 8006d76:	e7e0      	b.n	8006d3a <__mdiff+0xca>
 8006d78:	3f01      	subs	r7, #1
 8006d7a:	e7ea      	b.n	8006d52 <__mdiff+0xe2>
 8006d7c:	08007a7b 	.word	0x08007a7b
 8006d80:	08007aec 	.word	0x08007aec

08006d84 <__d2b>:
 8006d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4689      	mov	r9, r1
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	ec57 6b10 	vmov	r6, r7, d0
 8006d90:	4690      	mov	r8, r2
 8006d92:	f7ff fccf 	bl	8006734 <_Balloc>
 8006d96:	4604      	mov	r4, r0
 8006d98:	b930      	cbnz	r0, 8006da8 <__d2b+0x24>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <__d2b+0xb0>)
 8006d9e:	4826      	ldr	r0, [pc, #152]	; (8006e38 <__d2b+0xb4>)
 8006da0:	f240 310a 	movw	r1, #778	; 0x30a
 8006da4:	f000 fbc0 	bl	8007528 <__assert_func>
 8006da8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006db0:	bb35      	cbnz	r5, 8006e00 <__d2b+0x7c>
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	d028      	beq.n	8006e0a <__d2b+0x86>
 8006db8:	4668      	mov	r0, sp
 8006dba:	9600      	str	r6, [sp, #0]
 8006dbc:	f7ff fd82 	bl	80068c4 <__lo0bits>
 8006dc0:	9900      	ldr	r1, [sp, #0]
 8006dc2:	b300      	cbz	r0, 8006e06 <__d2b+0x82>
 8006dc4:	9a01      	ldr	r2, [sp, #4]
 8006dc6:	f1c0 0320 	rsb	r3, r0, #32
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	40c2      	lsrs	r2, r0
 8006dd2:	6163      	str	r3, [r4, #20]
 8006dd4:	9201      	str	r2, [sp, #4]
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	61a3      	str	r3, [r4, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bf14      	ite	ne
 8006dde:	2202      	movne	r2, #2
 8006de0:	2201      	moveq	r2, #1
 8006de2:	6122      	str	r2, [r4, #16]
 8006de4:	b1d5      	cbz	r5, 8006e1c <__d2b+0x98>
 8006de6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dea:	4405      	add	r5, r0
 8006dec:	f8c9 5000 	str.w	r5, [r9]
 8006df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006df4:	f8c8 0000 	str.w	r0, [r8]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e04:	e7d5      	b.n	8006db2 <__d2b+0x2e>
 8006e06:	6161      	str	r1, [r4, #20]
 8006e08:	e7e5      	b.n	8006dd6 <__d2b+0x52>
 8006e0a:	a801      	add	r0, sp, #4
 8006e0c:	f7ff fd5a 	bl	80068c4 <__lo0bits>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	2201      	movs	r2, #1
 8006e16:	6122      	str	r2, [r4, #16]
 8006e18:	3020      	adds	r0, #32
 8006e1a:	e7e3      	b.n	8006de4 <__d2b+0x60>
 8006e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e24:	f8c9 0000 	str.w	r0, [r9]
 8006e28:	6918      	ldr	r0, [r3, #16]
 8006e2a:	f7ff fd2b 	bl	8006884 <__hi0bits>
 8006e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e32:	e7df      	b.n	8006df4 <__d2b+0x70>
 8006e34:	08007a7b 	.word	0x08007a7b
 8006e38:	08007aec 	.word	0x08007aec

08006e3c <_calloc_r>:
 8006e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3e:	fba1 2402 	umull	r2, r4, r1, r2
 8006e42:	b94c      	cbnz	r4, 8006e58 <_calloc_r+0x1c>
 8006e44:	4611      	mov	r1, r2
 8006e46:	9201      	str	r2, [sp, #4]
 8006e48:	f000 f87a 	bl	8006f40 <_malloc_r>
 8006e4c:	9a01      	ldr	r2, [sp, #4]
 8006e4e:	4605      	mov	r5, r0
 8006e50:	b930      	cbnz	r0, 8006e60 <_calloc_r+0x24>
 8006e52:	4628      	mov	r0, r5
 8006e54:	b003      	add	sp, #12
 8006e56:	bd30      	pop	{r4, r5, pc}
 8006e58:	220c      	movs	r2, #12
 8006e5a:	6002      	str	r2, [r0, #0]
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	e7f8      	b.n	8006e52 <_calloc_r+0x16>
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7fe f84d 	bl	8004f00 <memset>
 8006e66:	e7f4      	b.n	8006e52 <_calloc_r+0x16>

08006e68 <_free_r>:
 8006e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d044      	beq.n	8006ef8 <_free_r+0x90>
 8006e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e72:	9001      	str	r0, [sp, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f1a1 0404 	sub.w	r4, r1, #4
 8006e7a:	bfb8      	it	lt
 8006e7c:	18e4      	addlt	r4, r4, r3
 8006e7e:	f000 fcdf 	bl	8007840 <__malloc_lock>
 8006e82:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <_free_r+0x94>)
 8006e84:	9801      	ldr	r0, [sp, #4]
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	b933      	cbnz	r3, 8006e98 <_free_r+0x30>
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6014      	str	r4, [r2, #0]
 8006e8e:	b003      	add	sp, #12
 8006e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e94:	f000 bcda 	b.w	800784c <__malloc_unlock>
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d908      	bls.n	8006eae <_free_r+0x46>
 8006e9c:	6825      	ldr	r5, [r4, #0]
 8006e9e:	1961      	adds	r1, r4, r5
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf01      	itttt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	1949      	addeq	r1, r1, r5
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	e7ed      	b.n	8006e8a <_free_r+0x22>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b10b      	cbz	r3, 8006eb8 <_free_r+0x50>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d9fa      	bls.n	8006eae <_free_r+0x46>
 8006eb8:	6811      	ldr	r1, [r2, #0]
 8006eba:	1855      	adds	r5, r2, r1
 8006ebc:	42a5      	cmp	r5, r4
 8006ebe:	d10b      	bne.n	8006ed8 <_free_r+0x70>
 8006ec0:	6824      	ldr	r4, [r4, #0]
 8006ec2:	4421      	add	r1, r4
 8006ec4:	1854      	adds	r4, r2, r1
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	6011      	str	r1, [r2, #0]
 8006eca:	d1e0      	bne.n	8006e8e <_free_r+0x26>
 8006ecc:	681c      	ldr	r4, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	6053      	str	r3, [r2, #4]
 8006ed2:	4421      	add	r1, r4
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	e7da      	b.n	8006e8e <_free_r+0x26>
 8006ed8:	d902      	bls.n	8006ee0 <_free_r+0x78>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	e7d6      	b.n	8006e8e <_free_r+0x26>
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	bf04      	itt	eq
 8006ee8:	6819      	ldreq	r1, [r3, #0]
 8006eea:	685b      	ldreq	r3, [r3, #4]
 8006eec:	6063      	str	r3, [r4, #4]
 8006eee:	bf04      	itt	eq
 8006ef0:	1949      	addeq	r1, r1, r5
 8006ef2:	6021      	streq	r1, [r4, #0]
 8006ef4:	6054      	str	r4, [r2, #4]
 8006ef6:	e7ca      	b.n	8006e8e <_free_r+0x26>
 8006ef8:	b003      	add	sp, #12
 8006efa:	bd30      	pop	{r4, r5, pc}
 8006efc:	20000354 	.word	0x20000354

08006f00 <sbrk_aligned>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4e0e      	ldr	r6, [pc, #56]	; (8006f3c <sbrk_aligned+0x3c>)
 8006f04:	460c      	mov	r4, r1
 8006f06:	6831      	ldr	r1, [r6, #0]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	b911      	cbnz	r1, 8006f12 <sbrk_aligned+0x12>
 8006f0c:	f000 f9e6 	bl	80072dc <_sbrk_r>
 8006f10:	6030      	str	r0, [r6, #0]
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f9e1 	bl	80072dc <_sbrk_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d00a      	beq.n	8006f34 <sbrk_aligned+0x34>
 8006f1e:	1cc4      	adds	r4, r0, #3
 8006f20:	f024 0403 	bic.w	r4, r4, #3
 8006f24:	42a0      	cmp	r0, r4
 8006f26:	d007      	beq.n	8006f38 <sbrk_aligned+0x38>
 8006f28:	1a21      	subs	r1, r4, r0
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f9d6 	bl	80072dc <_sbrk_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d101      	bne.n	8006f38 <sbrk_aligned+0x38>
 8006f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	20000358 	.word	0x20000358

08006f40 <_malloc_r>:
 8006f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f44:	1ccd      	adds	r5, r1, #3
 8006f46:	f025 0503 	bic.w	r5, r5, #3
 8006f4a:	3508      	adds	r5, #8
 8006f4c:	2d0c      	cmp	r5, #12
 8006f4e:	bf38      	it	cc
 8006f50:	250c      	movcc	r5, #12
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	4607      	mov	r7, r0
 8006f56:	db01      	blt.n	8006f5c <_malloc_r+0x1c>
 8006f58:	42a9      	cmp	r1, r5
 8006f5a:	d905      	bls.n	8006f68 <_malloc_r+0x28>
 8006f5c:	230c      	movs	r3, #12
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	2600      	movs	r6, #0
 8006f62:	4630      	mov	r0, r6
 8006f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f68:	4e2e      	ldr	r6, [pc, #184]	; (8007024 <_malloc_r+0xe4>)
 8006f6a:	f000 fc69 	bl	8007840 <__malloc_lock>
 8006f6e:	6833      	ldr	r3, [r6, #0]
 8006f70:	461c      	mov	r4, r3
 8006f72:	bb34      	cbnz	r4, 8006fc2 <_malloc_r+0x82>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4638      	mov	r0, r7
 8006f78:	f7ff ffc2 	bl	8006f00 <sbrk_aligned>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	4604      	mov	r4, r0
 8006f80:	d14d      	bne.n	800701e <_malloc_r+0xde>
 8006f82:	6834      	ldr	r4, [r6, #0]
 8006f84:	4626      	mov	r6, r4
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d140      	bne.n	800700c <_malloc_r+0xcc>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4638      	mov	r0, r7
 8006f90:	eb04 0803 	add.w	r8, r4, r3
 8006f94:	f000 f9a2 	bl	80072dc <_sbrk_r>
 8006f98:	4580      	cmp	r8, r0
 8006f9a:	d13a      	bne.n	8007012 <_malloc_r+0xd2>
 8006f9c:	6821      	ldr	r1, [r4, #0]
 8006f9e:	3503      	adds	r5, #3
 8006fa0:	1a6d      	subs	r5, r5, r1
 8006fa2:	f025 0503 	bic.w	r5, r5, #3
 8006fa6:	3508      	adds	r5, #8
 8006fa8:	2d0c      	cmp	r5, #12
 8006faa:	bf38      	it	cc
 8006fac:	250c      	movcc	r5, #12
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff ffa5 	bl	8006f00 <sbrk_aligned>
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d02b      	beq.n	8007012 <_malloc_r+0xd2>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	442b      	add	r3, r5
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	e00e      	b.n	8006fe0 <_malloc_r+0xa0>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	1b52      	subs	r2, r2, r5
 8006fc6:	d41e      	bmi.n	8007006 <_malloc_r+0xc6>
 8006fc8:	2a0b      	cmp	r2, #11
 8006fca:	d916      	bls.n	8006ffa <_malloc_r+0xba>
 8006fcc:	1961      	adds	r1, r4, r5
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	6025      	str	r5, [r4, #0]
 8006fd2:	bf18      	it	ne
 8006fd4:	6059      	strne	r1, [r3, #4]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	bf08      	it	eq
 8006fda:	6031      	streq	r1, [r6, #0]
 8006fdc:	5162      	str	r2, [r4, r5]
 8006fde:	604b      	str	r3, [r1, #4]
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f104 060b 	add.w	r6, r4, #11
 8006fe6:	f000 fc31 	bl	800784c <__malloc_unlock>
 8006fea:	f026 0607 	bic.w	r6, r6, #7
 8006fee:	1d23      	adds	r3, r4, #4
 8006ff0:	1af2      	subs	r2, r6, r3
 8006ff2:	d0b6      	beq.n	8006f62 <_malloc_r+0x22>
 8006ff4:	1b9b      	subs	r3, r3, r6
 8006ff6:	50a3      	str	r3, [r4, r2]
 8006ff8:	e7b3      	b.n	8006f62 <_malloc_r+0x22>
 8006ffa:	6862      	ldr	r2, [r4, #4]
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	bf0c      	ite	eq
 8007000:	6032      	streq	r2, [r6, #0]
 8007002:	605a      	strne	r2, [r3, #4]
 8007004:	e7ec      	b.n	8006fe0 <_malloc_r+0xa0>
 8007006:	4623      	mov	r3, r4
 8007008:	6864      	ldr	r4, [r4, #4]
 800700a:	e7b2      	b.n	8006f72 <_malloc_r+0x32>
 800700c:	4634      	mov	r4, r6
 800700e:	6876      	ldr	r6, [r6, #4]
 8007010:	e7b9      	b.n	8006f86 <_malloc_r+0x46>
 8007012:	230c      	movs	r3, #12
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4638      	mov	r0, r7
 8007018:	f000 fc18 	bl	800784c <__malloc_unlock>
 800701c:	e7a1      	b.n	8006f62 <_malloc_r+0x22>
 800701e:	6025      	str	r5, [r4, #0]
 8007020:	e7de      	b.n	8006fe0 <_malloc_r+0xa0>
 8007022:	bf00      	nop
 8007024:	20000354 	.word	0x20000354

08007028 <__sfputc_r>:
 8007028:	6893      	ldr	r3, [r2, #8]
 800702a:	3b01      	subs	r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	b410      	push	{r4}
 8007030:	6093      	str	r3, [r2, #8]
 8007032:	da08      	bge.n	8007046 <__sfputc_r+0x1e>
 8007034:	6994      	ldr	r4, [r2, #24]
 8007036:	42a3      	cmp	r3, r4
 8007038:	db01      	blt.n	800703e <__sfputc_r+0x16>
 800703a:	290a      	cmp	r1, #10
 800703c:	d103      	bne.n	8007046 <__sfputc_r+0x1e>
 800703e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007042:	f000 b99f 	b.w	8007384 <__swbuf_r>
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	1c58      	adds	r0, r3, #1
 800704a:	6010      	str	r0, [r2, #0]
 800704c:	7019      	strb	r1, [r3, #0]
 800704e:	4608      	mov	r0, r1
 8007050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007054:	4770      	bx	lr

08007056 <__sfputs_r>:
 8007056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	4614      	mov	r4, r2
 800705e:	18d5      	adds	r5, r2, r3
 8007060:	42ac      	cmp	r4, r5
 8007062:	d101      	bne.n	8007068 <__sfputs_r+0x12>
 8007064:	2000      	movs	r0, #0
 8007066:	e007      	b.n	8007078 <__sfputs_r+0x22>
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	463a      	mov	r2, r7
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ffda 	bl	8007028 <__sfputc_r>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d1f3      	bne.n	8007060 <__sfputs_r+0xa>
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800707c <_vfiprintf_r>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	460d      	mov	r5, r1
 8007082:	b09d      	sub	sp, #116	; 0x74
 8007084:	4614      	mov	r4, r2
 8007086:	4698      	mov	r8, r3
 8007088:	4606      	mov	r6, r0
 800708a:	b118      	cbz	r0, 8007094 <_vfiprintf_r+0x18>
 800708c:	6983      	ldr	r3, [r0, #24]
 800708e:	b90b      	cbnz	r3, 8007094 <_vfiprintf_r+0x18>
 8007090:	f7ff fa94 	bl	80065bc <__sinit>
 8007094:	4b89      	ldr	r3, [pc, #548]	; (80072bc <_vfiprintf_r+0x240>)
 8007096:	429d      	cmp	r5, r3
 8007098:	d11b      	bne.n	80070d2 <_vfiprintf_r+0x56>
 800709a:	6875      	ldr	r5, [r6, #4]
 800709c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800709e:	07d9      	lsls	r1, r3, #31
 80070a0:	d405      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	059a      	lsls	r2, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070aa:	f7ff fb2a 	bl	8006702 <__retarget_lock_acquire_recursive>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	071b      	lsls	r3, r3, #28
 80070b2:	d501      	bpl.n	80070b8 <_vfiprintf_r+0x3c>
 80070b4:	692b      	ldr	r3, [r5, #16]
 80070b6:	b9eb      	cbnz	r3, 80070f4 <_vfiprintf_r+0x78>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f000 f9c6 	bl	800744c <__swsetup_r>
 80070c0:	b1c0      	cbz	r0, 80070f4 <_vfiprintf_r+0x78>
 80070c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c4:	07dc      	lsls	r4, r3, #31
 80070c6:	d50e      	bpl.n	80070e6 <_vfiprintf_r+0x6a>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070cc:	b01d      	add	sp, #116	; 0x74
 80070ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d2:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <_vfiprintf_r+0x244>)
 80070d4:	429d      	cmp	r5, r3
 80070d6:	d101      	bne.n	80070dc <_vfiprintf_r+0x60>
 80070d8:	68b5      	ldr	r5, [r6, #8]
 80070da:	e7df      	b.n	800709c <_vfiprintf_r+0x20>
 80070dc:	4b79      	ldr	r3, [pc, #484]	; (80072c4 <_vfiprintf_r+0x248>)
 80070de:	429d      	cmp	r5, r3
 80070e0:	bf08      	it	eq
 80070e2:	68f5      	ldreq	r5, [r6, #12]
 80070e4:	e7da      	b.n	800709c <_vfiprintf_r+0x20>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	0598      	lsls	r0, r3, #22
 80070ea:	d4ed      	bmi.n	80070c8 <_vfiprintf_r+0x4c>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f7ff fb09 	bl	8006704 <__retarget_lock_release_recursive>
 80070f2:	e7e9      	b.n	80070c8 <_vfiprintf_r+0x4c>
 80070f4:	2300      	movs	r3, #0
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2320      	movs	r3, #32
 80070fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007102:	2330      	movs	r3, #48	; 0x30
 8007104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072c8 <_vfiprintf_r+0x24c>
 8007108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800710c:	f04f 0901 	mov.w	r9, #1
 8007110:	4623      	mov	r3, r4
 8007112:	469a      	mov	sl, r3
 8007114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007118:	b10a      	cbz	r2, 800711e <_vfiprintf_r+0xa2>
 800711a:	2a25      	cmp	r2, #37	; 0x25
 800711c:	d1f9      	bne.n	8007112 <_vfiprintf_r+0x96>
 800711e:	ebba 0b04 	subs.w	fp, sl, r4
 8007122:	d00b      	beq.n	800713c <_vfiprintf_r+0xc0>
 8007124:	465b      	mov	r3, fp
 8007126:	4622      	mov	r2, r4
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ff93 	bl	8007056 <__sfputs_r>
 8007130:	3001      	adds	r0, #1
 8007132:	f000 80aa 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007138:	445a      	add	r2, fp
 800713a:	9209      	str	r2, [sp, #36]	; 0x24
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a2 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007146:	2300      	movs	r3, #0
 8007148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800714c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715c:	931a      	str	r3, [sp, #104]	; 0x68
 800715e:	4654      	mov	r4, sl
 8007160:	2205      	movs	r2, #5
 8007162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007166:	4858      	ldr	r0, [pc, #352]	; (80072c8 <_vfiprintf_r+0x24c>)
 8007168:	f7f9 f83a 	bl	80001e0 <memchr>
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	b9d8      	cbnz	r0, 80071a8 <_vfiprintf_r+0x12c>
 8007170:	06d1      	lsls	r1, r2, #27
 8007172:	bf44      	itt	mi
 8007174:	2320      	movmi	r3, #32
 8007176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717a:	0713      	lsls	r3, r2, #28
 800717c:	bf44      	itt	mi
 800717e:	232b      	movmi	r3, #43	; 0x2b
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007184:	f89a 3000 	ldrb.w	r3, [sl]
 8007188:	2b2a      	cmp	r3, #42	; 0x2a
 800718a:	d015      	beq.n	80071b8 <_vfiprintf_r+0x13c>
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	4654      	mov	r4, sl
 8007190:	2000      	movs	r0, #0
 8007192:	f04f 0c0a 	mov.w	ip, #10
 8007196:	4621      	mov	r1, r4
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94e      	bls.n	8007240 <_vfiprintf_r+0x1c4>
 80071a2:	b1b0      	cbz	r0, 80071d2 <_vfiprintf_r+0x156>
 80071a4:	9207      	str	r2, [sp, #28]
 80071a6:	e014      	b.n	80071d2 <_vfiprintf_r+0x156>
 80071a8:	eba0 0308 	sub.w	r3, r0, r8
 80071ac:	fa09 f303 	lsl.w	r3, r9, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	46a2      	mov	sl, r4
 80071b6:	e7d2      	b.n	800715e <_vfiprintf_r+0xe2>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d19      	adds	r1, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbb      	ittet	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ca:	9307      	strge	r3, [sp, #28]
 80071cc:	9307      	strlt	r3, [sp, #28]
 80071ce:	bfb8      	it	lt
 80071d0:	9204      	strlt	r2, [sp, #16]
 80071d2:	7823      	ldrb	r3, [r4, #0]
 80071d4:	2b2e      	cmp	r3, #46	; 0x2e
 80071d6:	d10c      	bne.n	80071f2 <_vfiprintf_r+0x176>
 80071d8:	7863      	ldrb	r3, [r4, #1]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d135      	bne.n	800724a <_vfiprintf_r+0x1ce>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071ee:	3402      	adds	r4, #2
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072d8 <_vfiprintf_r+0x25c>
 80071f6:	7821      	ldrb	r1, [r4, #0]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4650      	mov	r0, sl
 80071fc:	f7f8 fff0 	bl	80001e0 <memchr>
 8007200:	b140      	cbz	r0, 8007214 <_vfiprintf_r+0x198>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	eba0 000a 	sub.w	r0, r0, sl
 8007208:	fa03 f000 	lsl.w	r0, r3, r0
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	4303      	orrs	r3, r0
 8007210:	3401      	adds	r4, #1
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007218:	482c      	ldr	r0, [pc, #176]	; (80072cc <_vfiprintf_r+0x250>)
 800721a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721e:	2206      	movs	r2, #6
 8007220:	f7f8 ffde 	bl	80001e0 <memchr>
 8007224:	2800      	cmp	r0, #0
 8007226:	d03f      	beq.n	80072a8 <_vfiprintf_r+0x22c>
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <_vfiprintf_r+0x254>)
 800722a:	bb1b      	cbnz	r3, 8007274 <_vfiprintf_r+0x1f8>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	3308      	adds	r3, #8
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	443b      	add	r3, r7
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	e767      	b.n	8007110 <_vfiprintf_r+0x94>
 8007240:	fb0c 3202 	mla	r2, ip, r2, r3
 8007244:	460c      	mov	r4, r1
 8007246:	2001      	movs	r0, #1
 8007248:	e7a5      	b.n	8007196 <_vfiprintf_r+0x11a>
 800724a:	2300      	movs	r3, #0
 800724c:	3401      	adds	r4, #1
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	4619      	mov	r1, r3
 8007252:	f04f 0c0a 	mov.w	ip, #10
 8007256:	4620      	mov	r0, r4
 8007258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725c:	3a30      	subs	r2, #48	; 0x30
 800725e:	2a09      	cmp	r2, #9
 8007260:	d903      	bls.n	800726a <_vfiprintf_r+0x1ee>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c5      	beq.n	80071f2 <_vfiprintf_r+0x176>
 8007266:	9105      	str	r1, [sp, #20]
 8007268:	e7c3      	b.n	80071f2 <_vfiprintf_r+0x176>
 800726a:	fb0c 2101 	mla	r1, ip, r1, r2
 800726e:	4604      	mov	r4, r0
 8007270:	2301      	movs	r3, #1
 8007272:	e7f0      	b.n	8007256 <_vfiprintf_r+0x1da>
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <_vfiprintf_r+0x258>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	4630      	mov	r0, r6
 8007280:	f7fd fee6 	bl	8005050 <_printf_float>
 8007284:	4607      	mov	r7, r0
 8007286:	1c78      	adds	r0, r7, #1
 8007288:	d1d6      	bne.n	8007238 <_vfiprintf_r+0x1bc>
 800728a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d405      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007290:	89ab      	ldrh	r3, [r5, #12]
 8007292:	059a      	lsls	r2, r3, #22
 8007294:	d402      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007298:	f7ff fa34 	bl	8006704 <__retarget_lock_release_recursive>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	f53f af12 	bmi.w	80070c8 <_vfiprintf_r+0x4c>
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	e711      	b.n	80070cc <_vfiprintf_r+0x50>
 80072a8:	ab03      	add	r3, sp, #12
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	462a      	mov	r2, r5
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <_vfiprintf_r+0x258>)
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7fe f970 	bl	8005598 <_printf_i>
 80072b8:	e7e4      	b.n	8007284 <_vfiprintf_r+0x208>
 80072ba:	bf00      	nop
 80072bc:	08007aac 	.word	0x08007aac
 80072c0:	08007acc 	.word	0x08007acc
 80072c4:	08007a8c 	.word	0x08007a8c
 80072c8:	08007c44 	.word	0x08007c44
 80072cc:	08007c4e 	.word	0x08007c4e
 80072d0:	08005051 	.word	0x08005051
 80072d4:	08007057 	.word	0x08007057
 80072d8:	08007c4a 	.word	0x08007c4a

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fa fbba 	bl	8001a60 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	2000035c 	.word	0x2000035c

080072fc <__sread>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	460c      	mov	r4, r1
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	f000 faa8 	bl	8007858 <_read_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	bfab      	itete	ge
 800730c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800730e:	89a3      	ldrhlt	r3, [r4, #12]
 8007310:	181b      	addge	r3, r3, r0
 8007312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007316:	bfac      	ite	ge
 8007318:	6563      	strge	r3, [r4, #84]	; 0x54
 800731a:	81a3      	strhlt	r3, [r4, #12]
 800731c:	bd10      	pop	{r4, pc}

0800731e <__swrite>:
 800731e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	461f      	mov	r7, r3
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	05db      	lsls	r3, r3, #23
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4616      	mov	r6, r2
 800732e:	d505      	bpl.n	800733c <__swrite+0x1e>
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2302      	movs	r3, #2
 8007336:	2200      	movs	r2, #0
 8007338:	f000 f9f8 	bl	800772c <_lseek_r>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007352:	f000 b869 	b.w	8007428 <_write_r>

08007356 <__sseek>:
 8007356:	b510      	push	{r4, lr}
 8007358:	460c      	mov	r4, r1
 800735a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735e:	f000 f9e5 	bl	800772c <_lseek_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	bf15      	itete	ne
 8007368:	6560      	strne	r0, [r4, #84]	; 0x54
 800736a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800736e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007372:	81a3      	strheq	r3, [r4, #12]
 8007374:	bf18      	it	ne
 8007376:	81a3      	strhne	r3, [r4, #12]
 8007378:	bd10      	pop	{r4, pc}

0800737a <__sclose>:
 800737a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737e:	f000 b8f1 	b.w	8007564 <_close_r>
	...

08007384 <__swbuf_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	460e      	mov	r6, r1
 8007388:	4614      	mov	r4, r2
 800738a:	4605      	mov	r5, r0
 800738c:	b118      	cbz	r0, 8007396 <__swbuf_r+0x12>
 800738e:	6983      	ldr	r3, [r0, #24]
 8007390:	b90b      	cbnz	r3, 8007396 <__swbuf_r+0x12>
 8007392:	f7ff f913 	bl	80065bc <__sinit>
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <__swbuf_r+0x98>)
 8007398:	429c      	cmp	r4, r3
 800739a:	d12b      	bne.n	80073f4 <__swbuf_r+0x70>
 800739c:	686c      	ldr	r4, [r5, #4]
 800739e:	69a3      	ldr	r3, [r4, #24]
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	071a      	lsls	r2, r3, #28
 80073a6:	d52f      	bpl.n	8007408 <__swbuf_r+0x84>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	b36b      	cbz	r3, 8007408 <__swbuf_r+0x84>
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	1ac0      	subs	r0, r0, r3
 80073b2:	6963      	ldr	r3, [r4, #20]
 80073b4:	b2f6      	uxtb	r6, r6
 80073b6:	4283      	cmp	r3, r0
 80073b8:	4637      	mov	r7, r6
 80073ba:	dc04      	bgt.n	80073c6 <__swbuf_r+0x42>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 f966 	bl	8007690 <_fflush_r>
 80073c4:	bb30      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60a3      	str	r3, [r4, #8]
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	701e      	strb	r6, [r3, #0]
 80073d4:	6963      	ldr	r3, [r4, #20]
 80073d6:	3001      	adds	r0, #1
 80073d8:	4283      	cmp	r3, r0
 80073da:	d004      	beq.n	80073e6 <__swbuf_r+0x62>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d506      	bpl.n	80073f0 <__swbuf_r+0x6c>
 80073e2:	2e0a      	cmp	r6, #10
 80073e4:	d104      	bne.n	80073f0 <__swbuf_r+0x6c>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 f951 	bl	8007690 <_fflush_r>
 80073ee:	b988      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073f0:	4638      	mov	r0, r7
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <__swbuf_r+0x9c>)
 80073f6:	429c      	cmp	r4, r3
 80073f8:	d101      	bne.n	80073fe <__swbuf_r+0x7a>
 80073fa:	68ac      	ldr	r4, [r5, #8]
 80073fc:	e7cf      	b.n	800739e <__swbuf_r+0x1a>
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <__swbuf_r+0xa0>)
 8007400:	429c      	cmp	r4, r3
 8007402:	bf08      	it	eq
 8007404:	68ec      	ldreq	r4, [r5, #12]
 8007406:	e7ca      	b.n	800739e <__swbuf_r+0x1a>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f81e 	bl	800744c <__swsetup_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0cb      	beq.n	80073ac <__swbuf_r+0x28>
 8007414:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007418:	e7ea      	b.n	80073f0 <__swbuf_r+0x6c>
 800741a:	bf00      	nop
 800741c:	08007aac 	.word	0x08007aac
 8007420:	08007acc 	.word	0x08007acc
 8007424:	08007a8c 	.word	0x08007a8c

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_write_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7f9 fd88 	bl	8000f4c <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	2000035c 	.word	0x2000035c

0800744c <__swsetup_r>:
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <__swsetup_r+0xcc>)
 800744e:	b570      	push	{r4, r5, r6, lr}
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	4606      	mov	r6, r0
 8007454:	460c      	mov	r4, r1
 8007456:	b125      	cbz	r5, 8007462 <__swsetup_r+0x16>
 8007458:	69ab      	ldr	r3, [r5, #24]
 800745a:	b913      	cbnz	r3, 8007462 <__swsetup_r+0x16>
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff f8ad 	bl	80065bc <__sinit>
 8007462:	4b2e      	ldr	r3, [pc, #184]	; (800751c <__swsetup_r+0xd0>)
 8007464:	429c      	cmp	r4, r3
 8007466:	d10f      	bne.n	8007488 <__swsetup_r+0x3c>
 8007468:	686c      	ldr	r4, [r5, #4]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007470:	0719      	lsls	r1, r3, #28
 8007472:	d42c      	bmi.n	80074ce <__swsetup_r+0x82>
 8007474:	06dd      	lsls	r5, r3, #27
 8007476:	d411      	bmi.n	800749c <__swsetup_r+0x50>
 8007478:	2309      	movs	r3, #9
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007486:	e03e      	b.n	8007506 <__swsetup_r+0xba>
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <__swsetup_r+0xd4>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d101      	bne.n	8007492 <__swsetup_r+0x46>
 800748e:	68ac      	ldr	r4, [r5, #8]
 8007490:	e7eb      	b.n	800746a <__swsetup_r+0x1e>
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <__swsetup_r+0xd8>)
 8007494:	429c      	cmp	r4, r3
 8007496:	bf08      	it	eq
 8007498:	68ec      	ldreq	r4, [r5, #12]
 800749a:	e7e6      	b.n	800746a <__swsetup_r+0x1e>
 800749c:	0758      	lsls	r0, r3, #29
 800749e:	d512      	bpl.n	80074c6 <__swsetup_r+0x7a>
 80074a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a2:	b141      	cbz	r1, 80074b6 <__swsetup_r+0x6a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__swsetup_r+0x66>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff fcdb 	bl	8006e68 <_free_r>
 80074b2:	2300      	movs	r3, #0
 80074b4:	6363      	str	r3, [r4, #52]	; 0x34
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	b94b      	cbnz	r3, 80074e6 <__swsetup_r+0x9a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074dc:	d003      	beq.n	80074e6 <__swsetup_r+0x9a>
 80074de:	4621      	mov	r1, r4
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f95b 	bl	800779c <__smakebuf_r>
 80074e6:	89a0      	ldrh	r0, [r4, #12]
 80074e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ec:	f010 0301 	ands.w	r3, r0, #1
 80074f0:	d00a      	beq.n	8007508 <__swsetup_r+0xbc>
 80074f2:	2300      	movs	r3, #0
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6963      	ldr	r3, [r4, #20]
 80074f8:	425b      	negs	r3, r3
 80074fa:	61a3      	str	r3, [r4, #24]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	b943      	cbnz	r3, 8007512 <__swsetup_r+0xc6>
 8007500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007504:	d1ba      	bne.n	800747c <__swsetup_r+0x30>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	0781      	lsls	r1, r0, #30
 800750a:	bf58      	it	pl
 800750c:	6963      	ldrpl	r3, [r4, #20]
 800750e:	60a3      	str	r3, [r4, #8]
 8007510:	e7f4      	b.n	80074fc <__swsetup_r+0xb0>
 8007512:	2000      	movs	r0, #0
 8007514:	e7f7      	b.n	8007506 <__swsetup_r+0xba>
 8007516:	bf00      	nop
 8007518:	2000000c 	.word	0x2000000c
 800751c:	08007aac 	.word	0x08007aac
 8007520:	08007acc 	.word	0x08007acc
 8007524:	08007a8c 	.word	0x08007a8c

08007528 <__assert_func>:
 8007528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800752a:	4614      	mov	r4, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <__assert_func+0x2c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4605      	mov	r5, r0
 8007534:	68d8      	ldr	r0, [r3, #12]
 8007536:	b14c      	cbz	r4, 800754c <__assert_func+0x24>
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <__assert_func+0x30>)
 800753a:	9100      	str	r1, [sp, #0]
 800753c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007540:	4906      	ldr	r1, [pc, #24]	; (800755c <__assert_func+0x34>)
 8007542:	462b      	mov	r3, r5
 8007544:	f000 f8e0 	bl	8007708 <fiprintf>
 8007548:	f000 f9a5 	bl	8007896 <abort>
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <__assert_func+0x38>)
 800754e:	461c      	mov	r4, r3
 8007550:	e7f3      	b.n	800753a <__assert_func+0x12>
 8007552:	bf00      	nop
 8007554:	2000000c 	.word	0x2000000c
 8007558:	08007c55 	.word	0x08007c55
 800755c:	08007c62 	.word	0x08007c62
 8007560:	08007c90 	.word	0x08007c90

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_close_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa fa41 	bl	80019f6 <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	2000035c 	.word	0x2000035c

08007584 <__sflush_r>:
 8007584:	898a      	ldrh	r2, [r1, #12]
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	4605      	mov	r5, r0
 800758c:	0710      	lsls	r0, r2, #28
 800758e:	460c      	mov	r4, r1
 8007590:	d458      	bmi.n	8007644 <__sflush_r+0xc0>
 8007592:	684b      	ldr	r3, [r1, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc05      	bgt.n	80075a4 <__sflush_r+0x20>
 8007598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc02      	bgt.n	80075a4 <__sflush_r+0x20>
 800759e:	2000      	movs	r0, #0
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d0f9      	beq.n	800759e <__sflush_r+0x1a>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b0:	682f      	ldr	r7, [r5, #0]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	d032      	beq.n	800761c <__sflush_r+0x98>
 80075b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	075a      	lsls	r2, r3, #29
 80075bc:	d505      	bpl.n	80075ca <__sflush_r+0x46>
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	1ac0      	subs	r0, r0, r3
 80075c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c4:	b10b      	cbz	r3, 80075ca <__sflush_r+0x46>
 80075c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075c8:	1ac0      	subs	r0, r0, r3
 80075ca:	2300      	movs	r3, #0
 80075cc:	4602      	mov	r2, r0
 80075ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d0:	6a21      	ldr	r1, [r4, #32]
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b0      	blx	r6
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	d106      	bne.n	80075ea <__sflush_r+0x66>
 80075dc:	6829      	ldr	r1, [r5, #0]
 80075de:	291d      	cmp	r1, #29
 80075e0:	d82c      	bhi.n	800763c <__sflush_r+0xb8>
 80075e2:	4a2a      	ldr	r2, [pc, #168]	; (800768c <__sflush_r+0x108>)
 80075e4:	40ca      	lsrs	r2, r1
 80075e6:	07d6      	lsls	r6, r2, #31
 80075e8:	d528      	bpl.n	800763c <__sflush_r+0xb8>
 80075ea:	2200      	movs	r2, #0
 80075ec:	6062      	str	r2, [r4, #4]
 80075ee:	04d9      	lsls	r1, r3, #19
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	d504      	bpl.n	8007600 <__sflush_r+0x7c>
 80075f6:	1c42      	adds	r2, r0, #1
 80075f8:	d101      	bne.n	80075fe <__sflush_r+0x7a>
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	b903      	cbnz	r3, 8007600 <__sflush_r+0x7c>
 80075fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007602:	602f      	str	r7, [r5, #0]
 8007604:	2900      	cmp	r1, #0
 8007606:	d0ca      	beq.n	800759e <__sflush_r+0x1a>
 8007608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__sflush_r+0x92>
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fc29 	bl	8006e68 <_free_r>
 8007616:	2000      	movs	r0, #0
 8007618:	6360      	str	r0, [r4, #52]	; 0x34
 800761a:	e7c1      	b.n	80075a0 <__sflush_r+0x1c>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	2301      	movs	r3, #1
 8007620:	4628      	mov	r0, r5
 8007622:	47b0      	blx	r6
 8007624:	1c41      	adds	r1, r0, #1
 8007626:	d1c7      	bne.n	80075b8 <__sflush_r+0x34>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0c4      	beq.n	80075b8 <__sflush_r+0x34>
 800762e:	2b1d      	cmp	r3, #29
 8007630:	d001      	beq.n	8007636 <__sflush_r+0xb2>
 8007632:	2b16      	cmp	r3, #22
 8007634:	d101      	bne.n	800763a <__sflush_r+0xb6>
 8007636:	602f      	str	r7, [r5, #0]
 8007638:	e7b1      	b.n	800759e <__sflush_r+0x1a>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e7ad      	b.n	80075a0 <__sflush_r+0x1c>
 8007644:	690f      	ldr	r7, [r1, #16]
 8007646:	2f00      	cmp	r7, #0
 8007648:	d0a9      	beq.n	800759e <__sflush_r+0x1a>
 800764a:	0793      	lsls	r3, r2, #30
 800764c:	680e      	ldr	r6, [r1, #0]
 800764e:	bf08      	it	eq
 8007650:	694b      	ldreq	r3, [r1, #20]
 8007652:	600f      	str	r7, [r1, #0]
 8007654:	bf18      	it	ne
 8007656:	2300      	movne	r3, #0
 8007658:	eba6 0807 	sub.w	r8, r6, r7
 800765c:	608b      	str	r3, [r1, #8]
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	dd9c      	ble.n	800759e <__sflush_r+0x1a>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007668:	4643      	mov	r3, r8
 800766a:	463a      	mov	r2, r7
 800766c:	4628      	mov	r0, r5
 800766e:	47b0      	blx	r6
 8007670:	2800      	cmp	r0, #0
 8007672:	dc06      	bgt.n	8007682 <__sflush_r+0xfe>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007680:	e78e      	b.n	80075a0 <__sflush_r+0x1c>
 8007682:	4407      	add	r7, r0
 8007684:	eba8 0800 	sub.w	r8, r8, r0
 8007688:	e7e9      	b.n	800765e <__sflush_r+0xda>
 800768a:	bf00      	nop
 800768c:	20400001 	.word	0x20400001

08007690 <_fflush_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	690b      	ldr	r3, [r1, #16]
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b913      	cbnz	r3, 80076a0 <_fflush_r+0x10>
 800769a:	2500      	movs	r5, #0
 800769c:	4628      	mov	r0, r5
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	b118      	cbz	r0, 80076aa <_fflush_r+0x1a>
 80076a2:	6983      	ldr	r3, [r0, #24]
 80076a4:	b90b      	cbnz	r3, 80076aa <_fflush_r+0x1a>
 80076a6:	f7fe ff89 	bl	80065bc <__sinit>
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <_fflush_r+0x6c>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	d11b      	bne.n	80076e8 <_fflush_r+0x58>
 80076b0:	686c      	ldr	r4, [r5, #4]
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ef      	beq.n	800769a <_fflush_r+0xa>
 80076ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076bc:	07d0      	lsls	r0, r2, #31
 80076be:	d404      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c0:	0599      	lsls	r1, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f7ff f81c 	bl	8006702 <__retarget_lock_acquire_recursive>
 80076ca:	4628      	mov	r0, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	f7ff ff59 	bl	8007584 <__sflush_r>
 80076d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d4:	07da      	lsls	r2, r3, #31
 80076d6:	4605      	mov	r5, r0
 80076d8:	d4e0      	bmi.n	800769c <_fflush_r+0xc>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	059b      	lsls	r3, r3, #22
 80076de:	d4dd      	bmi.n	800769c <_fflush_r+0xc>
 80076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e2:	f7ff f80f 	bl	8006704 <__retarget_lock_release_recursive>
 80076e6:	e7d9      	b.n	800769c <_fflush_r+0xc>
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <_fflush_r+0x70>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d101      	bne.n	80076f2 <_fflush_r+0x62>
 80076ee:	68ac      	ldr	r4, [r5, #8]
 80076f0:	e7df      	b.n	80076b2 <_fflush_r+0x22>
 80076f2:	4b04      	ldr	r3, [pc, #16]	; (8007704 <_fflush_r+0x74>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	bf08      	it	eq
 80076f8:	68ec      	ldreq	r4, [r5, #12]
 80076fa:	e7da      	b.n	80076b2 <_fflush_r+0x22>
 80076fc:	08007aac 	.word	0x08007aac
 8007700:	08007acc 	.word	0x08007acc
 8007704:	08007a8c 	.word	0x08007a8c

08007708 <fiprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b503      	push	{r0, r1, lr}
 800770c:	4601      	mov	r1, r0
 800770e:	ab03      	add	r3, sp, #12
 8007710:	4805      	ldr	r0, [pc, #20]	; (8007728 <fiprintf+0x20>)
 8007712:	f853 2b04 	ldr.w	r2, [r3], #4
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	f7ff fcaf 	bl	800707c <_vfiprintf_r>
 800771e:	b002      	add	sp, #8
 8007720:	f85d eb04 	ldr.w	lr, [sp], #4
 8007724:	b003      	add	sp, #12
 8007726:	4770      	bx	lr
 8007728:	2000000c 	.word	0x2000000c

0800772c <_lseek_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d07      	ldr	r5, [pc, #28]	; (800774c <_lseek_r+0x20>)
 8007730:	4604      	mov	r4, r0
 8007732:	4608      	mov	r0, r1
 8007734:	4611      	mov	r1, r2
 8007736:	2200      	movs	r2, #0
 8007738:	602a      	str	r2, [r5, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f7fa f982 	bl	8001a44 <_lseek>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_lseek_r+0x1e>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_lseek_r+0x1e>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	2000035c 	.word	0x2000035c

08007750 <__swhatbuf_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	460e      	mov	r6, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2900      	cmp	r1, #0
 800775a:	b096      	sub	sp, #88	; 0x58
 800775c:	4614      	mov	r4, r2
 800775e:	461d      	mov	r5, r3
 8007760:	da08      	bge.n	8007774 <__swhatbuf_r+0x24>
 8007762:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	061a      	lsls	r2, r3, #24
 800776c:	d410      	bmi.n	8007790 <__swhatbuf_r+0x40>
 800776e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007772:	e00e      	b.n	8007792 <__swhatbuf_r+0x42>
 8007774:	466a      	mov	r2, sp
 8007776:	f000 f895 	bl	80078a4 <_fstat_r>
 800777a:	2800      	cmp	r0, #0
 800777c:	dbf1      	blt.n	8007762 <__swhatbuf_r+0x12>
 800777e:	9a01      	ldr	r2, [sp, #4]
 8007780:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007784:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007788:	425a      	negs	r2, r3
 800778a:	415a      	adcs	r2, r3
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	e7ee      	b.n	800776e <__swhatbuf_r+0x1e>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2000      	movs	r0, #0
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	b016      	add	sp, #88	; 0x58
 8007798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800779c <__smakebuf_r>:
 800779c:	898b      	ldrh	r3, [r1, #12]
 800779e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a0:	079d      	lsls	r5, r3, #30
 80077a2:	4606      	mov	r6, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	d507      	bpl.n	80077b8 <__smakebuf_r+0x1c>
 80077a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	2301      	movs	r3, #1
 80077b2:	6163      	str	r3, [r4, #20]
 80077b4:	b002      	add	sp, #8
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	ab01      	add	r3, sp, #4
 80077ba:	466a      	mov	r2, sp
 80077bc:	f7ff ffc8 	bl	8007750 <__swhatbuf_r>
 80077c0:	9900      	ldr	r1, [sp, #0]
 80077c2:	4605      	mov	r5, r0
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff fbbb 	bl	8006f40 <_malloc_r>
 80077ca:	b948      	cbnz	r0, 80077e0 <__smakebuf_r+0x44>
 80077cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d4ef      	bmi.n	80077b4 <__smakebuf_r+0x18>
 80077d4:	f023 0303 	bic.w	r3, r3, #3
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7e3      	b.n	80077a8 <__smakebuf_r+0xc>
 80077e0:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <__smakebuf_r+0x7c>)
 80077e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	6020      	str	r0, [r4, #0]
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	6163      	str	r3, [r4, #20]
 80077f2:	9b01      	ldr	r3, [sp, #4]
 80077f4:	6120      	str	r0, [r4, #16]
 80077f6:	b15b      	cbz	r3, 8007810 <__smakebuf_r+0x74>
 80077f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f863 	bl	80078c8 <_isatty_r>
 8007802:	b128      	cbz	r0, 8007810 <__smakebuf_r+0x74>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	89a0      	ldrh	r0, [r4, #12]
 8007812:	4305      	orrs	r5, r0
 8007814:	81a5      	strh	r5, [r4, #12]
 8007816:	e7cd      	b.n	80077b4 <__smakebuf_r+0x18>
 8007818:	08006555 	.word	0x08006555

0800781c <__ascii_mbtowc>:
 800781c:	b082      	sub	sp, #8
 800781e:	b901      	cbnz	r1, 8007822 <__ascii_mbtowc+0x6>
 8007820:	a901      	add	r1, sp, #4
 8007822:	b142      	cbz	r2, 8007836 <__ascii_mbtowc+0x1a>
 8007824:	b14b      	cbz	r3, 800783a <__ascii_mbtowc+0x1e>
 8007826:	7813      	ldrb	r3, [r2, #0]
 8007828:	600b      	str	r3, [r1, #0]
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	1e10      	subs	r0, r2, #0
 800782e:	bf18      	it	ne
 8007830:	2001      	movne	r0, #1
 8007832:	b002      	add	sp, #8
 8007834:	4770      	bx	lr
 8007836:	4610      	mov	r0, r2
 8007838:	e7fb      	b.n	8007832 <__ascii_mbtowc+0x16>
 800783a:	f06f 0001 	mvn.w	r0, #1
 800783e:	e7f8      	b.n	8007832 <__ascii_mbtowc+0x16>

08007840 <__malloc_lock>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__malloc_lock+0x8>)
 8007842:	f7fe bf5e 	b.w	8006702 <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	20000350 	.word	0x20000350

0800784c <__malloc_unlock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_unlock+0x8>)
 800784e:	f7fe bf59 	b.w	8006704 <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	20000350 	.word	0x20000350

08007858 <_read_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_read_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7fa f8a8 	bl	80019bc <_read>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_read_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_read_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	2000035c 	.word	0x2000035c

0800787c <__ascii_wctomb>:
 800787c:	b149      	cbz	r1, 8007892 <__ascii_wctomb+0x16>
 800787e:	2aff      	cmp	r2, #255	; 0xff
 8007880:	bf85      	ittet	hi
 8007882:	238a      	movhi	r3, #138	; 0x8a
 8007884:	6003      	strhi	r3, [r0, #0]
 8007886:	700a      	strbls	r2, [r1, #0]
 8007888:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800788c:	bf98      	it	ls
 800788e:	2001      	movls	r0, #1
 8007890:	4770      	bx	lr
 8007892:	4608      	mov	r0, r1
 8007894:	4770      	bx	lr

08007896 <abort>:
 8007896:	b508      	push	{r3, lr}
 8007898:	2006      	movs	r0, #6
 800789a:	f000 f84d 	bl	8007938 <raise>
 800789e:	2001      	movs	r0, #1
 80078a0:	f7fa f882 	bl	80019a8 <_exit>

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	f7fa f8ac 	bl	8001a0e <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	2000035c 	.word	0x2000035c

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fa f8ab 	bl	8001a2e <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	2000035c 	.word	0x2000035c

080078e8 <_raise_r>:
 80078e8:	291f      	cmp	r1, #31
 80078ea:	b538      	push	{r3, r4, r5, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	d904      	bls.n	80078fc <_raise_r+0x14>
 80078f2:	2316      	movs	r3, #22
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078fe:	b112      	cbz	r2, 8007906 <_raise_r+0x1e>
 8007900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007904:	b94b      	cbnz	r3, 800791a <_raise_r+0x32>
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f830 	bl	800796c <_getpid_r>
 800790c:	462a      	mov	r2, r5
 800790e:	4601      	mov	r1, r0
 8007910:	4620      	mov	r0, r4
 8007912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007916:	f000 b817 	b.w	8007948 <_kill_r>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00a      	beq.n	8007934 <_raise_r+0x4c>
 800791e:	1c59      	adds	r1, r3, #1
 8007920:	d103      	bne.n	800792a <_raise_r+0x42>
 8007922:	2316      	movs	r3, #22
 8007924:	6003      	str	r3, [r0, #0]
 8007926:	2001      	movs	r0, #1
 8007928:	e7e7      	b.n	80078fa <_raise_r+0x12>
 800792a:	2400      	movs	r4, #0
 800792c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007930:	4628      	mov	r0, r5
 8007932:	4798      	blx	r3
 8007934:	2000      	movs	r0, #0
 8007936:	e7e0      	b.n	80078fa <_raise_r+0x12>

08007938 <raise>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <raise+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f7ff bfd3 	b.w	80078e8 <_raise_r>
 8007942:	bf00      	nop
 8007944:	2000000c 	.word	0x2000000c

08007948 <_kill_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_kill_r+0x20>)
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	602b      	str	r3, [r5, #0]
 8007956:	f7fa f817 	bl	8001988 <_kill>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	d102      	bne.n	8007964 <_kill_r+0x1c>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b103      	cbz	r3, 8007964 <_kill_r+0x1c>
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	bd38      	pop	{r3, r4, r5, pc}
 8007966:	bf00      	nop
 8007968:	2000035c 	.word	0x2000035c

0800796c <_getpid_r>:
 800796c:	f7fa b804 	b.w	8001978 <_getpid>

08007970 <_init>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr

0800797c <_fini>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr
